//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import BWWalkthrough
import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 8 view controllers.
  struct segue {
    /// This struct is generated for `EnablePersonalInformationViewController`, and contains static references to 1 segues.
    struct enablePersonalInformationViewController {
      /// Segue identifier `goToMain`.
      static let goToMain: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, EnablePersonalInformationViewController, UIKit.UITabBarController> = Rswift.StoryboardSegueIdentifier(identifier: "goToMain")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToMain`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToMain(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, EnablePersonalInformationViewController, UIKit.UITabBarController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.enablePersonalInformationViewController.goToMain, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `MAFirstPageViewController`, and contains static references to 3 segues.
    struct maFirstPageViewController {
      /// Segue identifier `goToMain`.
      static let goToMain: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MAFirstPageViewController, EnablePersonalInformationViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToMain")
      /// Segue identifier `goToSuccessMail`.
      static let goToSuccessMail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MAFirstPageViewController, MSuccessEmailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToSuccessMail")
      /// Segue identifier `goToSuccessRegister`.
      static let goToSuccessRegister: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MAFirstPageViewController, HiddenNavBarNavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "goToSuccessRegister")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToMain`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToMain(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MAFirstPageViewController, EnablePersonalInformationViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.maFirstPageViewController.goToMain, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToSuccessMail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToSuccessMail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MAFirstPageViewController, MSuccessEmailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.maFirstPageViewController.goToSuccessMail, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToSuccessRegister`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToSuccessRegister(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MAFirstPageViewController, HiddenNavBarNavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.maFirstPageViewController.goToSuccessRegister, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `MEmailLoginViewController`, and contains static references to 1 segues.
    struct mEmailLoginViewController {
      /// Segue identifier `goToSuccessMail`.
      static let goToSuccessMail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MEmailLoginViewController, MSuccessEmailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToSuccessMail")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToSuccessMail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToSuccessMail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MEmailLoginViewController, MSuccessEmailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mEmailLoginViewController.goToSuccessMail, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `MProductReservationViewController`, and contains static references to 2 segues.
    struct mProductReservationViewController {
      /// Segue identifier `goToPaymentFromSelected`.
      static let goToPaymentFromSelected: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MProductReservationViewController, MPaymentViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToPaymentFromSelected")
      /// Segue identifier `goToPaymentSimple`.
      static let goToPaymentSimple: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MProductReservationViewController, MPaymentViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToPaymentSimple")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToPaymentFromSelected`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToPaymentFromSelected(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MProductReservationViewController, MPaymentViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mProductReservationViewController.goToPaymentFromSelected, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToPaymentSimple`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToPaymentSimple(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MProductReservationViewController, MPaymentViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mProductReservationViewController.goToPaymentSimple, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `MQRViewController`, and contains static references to 2 segues.
    struct mqrViewController {
      /// Segue identifier `goToChooseProduct`.
      static let goToChooseProduct: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MQRViewController, MProductReservationViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToChooseProduct")
      /// Segue identifier `goToVoucherPayment`.
      static let goToVoucherPayment: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MQRViewController, MPaymentViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToVoucherPayment")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToChooseProduct`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToChooseProduct(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MQRViewController, MProductReservationViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mqrViewController.goToChooseProduct, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToVoucherPayment`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToVoucherPayment(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MQRViewController, MPaymentViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mqrViewController.goToVoucherPayment, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `MRecordsViewController`, and contains static references to 1 segues.
    struct mRecordsViewController {
      /// Segue identifier `goToRecordDetail`.
      static let goToRecordDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MRecordsViewController, CommonPullUpViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToRecordDetail")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToRecordDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToRecordDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MRecordsViewController, CommonPullUpViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mRecordsViewController.goToRecordDetail, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `MSuccessEmailViewController`, and contains static references to 1 segues.
    struct mSuccessEmailViewController {
      /// Segue identifier `goToSuccessRegister`.
      static let goToSuccessRegister: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MSuccessEmailViewController, HiddenNavBarNavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "goToSuccessRegister")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToSuccessRegister`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToSuccessRegister(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MSuccessEmailViewController, HiddenNavBarNavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mSuccessEmailViewController.goToSuccessRegister, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `MVouchersViewController`, and contains static references to 2 segues.
    struct mVouchersViewController {
      /// Segue identifier `goToProduct`.
      static let goToProduct: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MVouchersViewController, CommonPullUpViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToProduct")
      /// Segue identifier `goToVoucher`.
      static let goToVoucher: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MVouchersViewController, CommonPullUpViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToVoucher")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToProduct`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToProduct(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MVouchersViewController, CommonPullUpViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mVouchersViewController.goToProduct, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToVoucher`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToVoucher(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MVouchersViewController, CommonPullUpViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mVouchersViewController.goToVoucher, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 18 storyboards.
  struct storyboard {
    /// Storyboard `About`.
    static let about = _R.storyboard.about()
    /// Storyboard `ChooseTypeRecord`.
    static let chooseTypeRecord = _R.storyboard.chooseTypeRecord()
    /// Storyboard `EmailLogin`.
    static let emailLogin = _R.storyboard.emailLogin()
    /// Storyboard `EnablePersonalInformation`.
    static let enablePersonalInformation = _R.storyboard.enablePersonalInformation()
    /// Storyboard `First`.
    static let first = _R.storyboard.first()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LoginQRAndCodeViewController`.
    static let loginQRAndCodeViewController = _R.storyboard.loginQRAndCodeViewController()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Payment`.
    static let payment = _R.storyboard.payment()
    /// Storyboard `ProductReservation`.
    static let productReservation = _R.storyboard.productReservation()
    /// Storyboard `ProductVoucher`.
    static let productVoucher = _R.storyboard.productVoucher()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `RecordDetail`.
    static let recordDetail = _R.storyboard.recordDetail()
    /// Storyboard `RecordValidators`.
    static let recordValidators = _R.storyboard.recordValidators()
    /// Storyboard `SuccessEmail`.
    static let successEmail = _R.storyboard.successEmail()
    /// Storyboard `SuccessRegister`.
    static let successRegister = _R.storyboard.successRegister()
    /// Storyboard `TextRecord`.
    static let textRecord = _R.storyboard.textRecord()
    /// Storyboard `Voucher`.
    static let voucher = _R.storyboard.voucher()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "About", bundle: ...)`
    static func about(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.about)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ChooseTypeRecord", bundle: ...)`
    static func chooseTypeRecord(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.chooseTypeRecord)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "EmailLogin", bundle: ...)`
    static func emailLogin(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.emailLogin)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "EnablePersonalInformation", bundle: ...)`
    static func enablePersonalInformation(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.enablePersonalInformation)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "First", bundle: ...)`
    static func first(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.first)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LoginQRAndCodeViewController", bundle: ...)`
    static func loginQRAndCodeViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.loginQRAndCodeViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Payment", bundle: ...)`
    static func payment(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.payment)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ProductReservation", bundle: ...)`
    static func productReservation(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.productReservation)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ProductVoucher", bundle: ...)`
    static func productVoucher(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.productVoucher)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "RecordDetail", bundle: ...)`
    static func recordDetail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.recordDetail)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "RecordValidators", bundle: ...)`
    static func recordValidators(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.recordValidators)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SuccessEmail", bundle: ...)`
    static func successEmail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.successEmail)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SuccessRegister", bundle: ...)`
    static func successRegister(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.successRegister)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "TextRecord", bundle: ...)`
    static func textRecord(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.textRecord)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Voucher", bundle: ...)`
    static func voucher(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.voucher)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `MainBodyColor`.
    static let mainBodyColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "MainBodyColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "MainBodyColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainBodyColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainBodyColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 11 files.
  struct file {
    /// Resource file `GoogleSans-Bold.ttf`.
    static let googleSansBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleSans-Bold", pathExtension: "ttf")
    /// Resource file `GoogleSans-BoldItalic.ttf`.
    static let googleSansBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleSans-BoldItalic", pathExtension: "ttf")
    /// Resource file `GoogleSans-Italic.ttf`.
    static let googleSansItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleSans-Italic", pathExtension: "ttf")
    /// Resource file `GoogleSans-Medium.ttf`.
    static let googleSansMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleSans-Medium", pathExtension: "ttf")
    /// Resource file `GoogleSans-MediumItalic.ttf`.
    static let googleSansMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleSans-MediumItalic", pathExtension: "ttf")
    /// Resource file `GoogleSans-Regular.ttf`.
    static let googleSansRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleSans-Regular", pathExtension: "ttf")
    /// Resource file `LICENSE`.
    static let licensE = Rswift.FileResource(bundle: R.hostingBundle, name: "LICENSE", pathExtension: "")
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")
    /// Resource file `backspaceBlue.png`.
    static let backspaceBluePng = Rswift.FileResource(bundle: R.hostingBundle, name: "backspaceBlue", pathExtension: "png")
    /// Resource file `backspaceBlue@2x.png`.
    static let backspaceBlue2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "backspaceBlue@2x", pathExtension: "png")
    /// Resource file `backspaceBlue@3x.png`.
    static let backspaceBlue3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "backspaceBlue@3x", pathExtension: "png")

    /// `bundle.url(forResource: "GoogleSans-Bold", withExtension: "ttf")`
    static func googleSansBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleSansBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleSans-BoldItalic", withExtension: "ttf")`
    static func googleSansBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleSansBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleSans-Italic", withExtension: "ttf")`
    static func googleSansItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleSansItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleSans-Medium", withExtension: "ttf")`
    static func googleSansMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleSansMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleSans-MediumItalic", withExtension: "ttf")`
    static func googleSansMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleSansMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleSans-Regular", withExtension: "ttf")`
    static func googleSansRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleSansRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "LICENSE", withExtension: "")`
    static func licensE(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.licensE
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "backspaceBlue", withExtension: "png")`
    static func backspaceBluePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.backspaceBluePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "backspaceBlue@2x", withExtension: "png")`
    static func backspaceBlue2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.backspaceBlue2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "backspaceBlue@3x", withExtension: "png")`
    static func backspaceBlue3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.backspaceBlue3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 6 fonts.
  struct font: Rswift.Validatable {
    /// Font `GoogleSans-BoldItalic`.
    static let googleSansBoldItalic = Rswift.FontResource(fontName: "GoogleSans-BoldItalic")
    /// Font `GoogleSans-Bold`.
    static let googleSansBold = Rswift.FontResource(fontName: "GoogleSans-Bold")
    /// Font `GoogleSans-Italic`.
    static let googleSansItalic = Rswift.FontResource(fontName: "GoogleSans-Italic")
    /// Font `GoogleSans-MediumItalic`.
    static let googleSansMediumItalic = Rswift.FontResource(fontName: "GoogleSans-MediumItalic")
    /// Font `GoogleSans-Medium`.
    static let googleSansMedium = Rswift.FontResource(fontName: "GoogleSans-Medium")
    /// Font `GoogleSans-Regular`.
    static let googleSansRegular = Rswift.FontResource(fontName: "GoogleSans-Regular")

    /// `UIFont(name: "GoogleSans-Bold", size: ...)`
    static func googleSansBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: googleSansBold, size: size)
    }

    /// `UIFont(name: "GoogleSans-BoldItalic", size: ...)`
    static func googleSansBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: googleSansBoldItalic, size: size)
    }

    /// `UIFont(name: "GoogleSans-Italic", size: ...)`
    static func googleSansItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: googleSansItalic, size: size)
    }

    /// `UIFont(name: "GoogleSans-Medium", size: ...)`
    static func googleSansMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: googleSansMedium, size: size)
    }

    /// `UIFont(name: "GoogleSans-MediumItalic", size: ...)`
    static func googleSansMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: googleSansMediumItalic, size: size)
    }

    /// `UIFont(name: "GoogleSans-Regular", size: ...)`
    static func googleSansRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: googleSansRegular, size: size)
    }

    static func validate() throws {
      if R.font.googleSansBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GoogleSans-Bold' could not be loaded, is 'GoogleSans-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.googleSansBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GoogleSans-BoldItalic' could not be loaded, is 'GoogleSans-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.googleSansItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GoogleSans-Italic' could not be loaded, is 'GoogleSans-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.googleSansMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GoogleSans-Medium' could not be loaded, is 'GoogleSans-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.googleSansMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GoogleSans-MediumItalic' could not be loaded, is 'GoogleSans-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.googleSansRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GoogleSans-Regular' could not be loaded, is 'GoogleSans-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.id` struct is generated, and contains static references to accessibility identifiers.
  struct id {
    struct loginQRAndCodeViewController {
      /// Accessibility identifier `topViewHandle`.
      static let topViewHandle: String = "topViewHandle"

      fileprivate init() {}
    }

    struct productVoucher {
      /// Accessibility identifier `topViewHandle`.
      static let topViewHandle: String = "topViewHandle"

      fileprivate init() {}
    }

    struct profile {
      /// Accessibility identifier `topViewHandle`.
      static let topViewHandle: String = "topViewHandle"

      fileprivate init() {}
    }

    struct recordDetail {
      /// Accessibility identifier `topViewHandle`.
      static let topViewHandle: String = "topViewHandle"

      fileprivate init() {}
    }

    struct voucher {
      /// Accessibility identifier `topViewHandle`.
      static let topViewHandle: String = "topViewHandle"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 63 images.
  struct image {
    /// Image `5XVoucherContainerWElevation`.
    static let xVoucherContainerWElevation = Rswift.ImageResource(bundle: R.hostingBundle, name: "5XVoucherContainerWElevation")
    /// Image `5XVoucherSurface`.
    static let xVoucherSurface = Rswift.ImageResource(bundle: R.hostingBundle, name: "5XVoucherSurface")
    /// Image `Done@1,5x 1`.
    static let done15x1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Done@1,5x 1")
    /// Image `FlashlightOff`.
    static let flashlightOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "FlashlightOff")
    /// Image `FlashlightOn`.
    static let flashlightOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "FlashlightOn")
    /// Image `Illustration-1`.
    static let illustration1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Illustration-1")
    /// Image `IlustrationCheckmark`.
    static let ilustrationCheckmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "IlustrationCheckmark")
    /// Image `Me app`.
    static let meApp = Rswift.ImageResource(bundle: R.hostingBundle, name: "Me app")
    /// Image `Resting`.
    static let resting = Rswift.ImageResource(bundle: R.hostingBundle, name: "Resting")
    /// Image `Shadow`.
    static let shadow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shadow")
    /// Image `activeBlue`.
    static let activeBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "activeBlue")
    /// Image `arrow`.
    static let arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow")
    /// Image `backCopy`.
    static let backCopy = Rswift.ImageResource(bundle: R.hostingBundle, name: "backCopy")
    /// Image `backIcon`.
    static let backIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "backIcon")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `backspaceBlue`.
    static let backspaceBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "backspaceBlue")
    /// Image `camera`.
    static let camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera")
    /// Image `carLocation`.
    static let carLocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "carLocation")
    /// Image `cellularNetwork`.
    static let cellularNetwork = Rswift.ImageResource(bundle: R.hostingBundle, name: "cellularNetwork")
    /// Image `circular`.
    static let circular = Rswift.ImageResource(bundle: R.hostingBundle, name: "circular")
    /// Image `closeBlack`.
    static let closeBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "closeBlack")
    /// Image `closeIcon`.
    static let closeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "closeIcon")
    /// Image `closeLines`.
    static let closeLines = Rswift.ImageResource(bundle: R.hostingBundle, name: "closeLines")
    /// Image `combinedShapeQR`.
    static let combinedShapeQR = Rswift.ImageResource(bundle: R.hostingBundle, name: "combinedShapeQR")
    /// Image `combinedShape`.
    static let combinedShape = Rswift.ImageResource(bundle: R.hostingBundle, name: "combinedShape")
    /// Image `delete24Px`.
    static let delete24Px = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete24Px")
    /// Image `email1`.
    static let email1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "email1")
    /// Image `emailVoucher`.
    static let emailVoucher = Rswift.ImageResource(bundle: R.hostingBundle, name: "emailVoucher")
    /// Image `eth`.
    static let eth = Rswift.ImageResource(bundle: R.hostingBundle, name: "eth")
    /// Image `face24Px`.
    static let face24Px = Rswift.ImageResource(bundle: R.hostingBundle, name: "face24Px")
    /// Image `faceId-1`.
    static let faceId1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "faceId-1")
    /// Image `faceId`.
    static let faceId = Rswift.ImageResource(bundle: R.hostingBundle, name: "faceId")
    /// Image `fill1Copy`.
    static let fill1Copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "fill1Copy")
    /// Image `headings`.
    static let headings = Rswift.ImageResource(bundle: R.hostingBundle, name: "headings")
    /// Image `homeIcon`.
    static let homeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "homeIcon")
    /// Image `ic_launcher_APP`.
    static let ic_launcher_APP = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_launcher_APP")
    /// Image `iconDigiD`.
    static let iconDigiD = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconDigiD")
    /// Image `iconGrey`.
    static let iconGrey = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconGrey")
    /// Image `iconsBugreport`.
    static let iconsBugreport = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsBugreport")
    /// Image `illustration`.
    static let illustration = Rswift.ImageResource(bundle: R.hostingBundle, name: "illustration")
    /// Image `lock24Px-1`.
    static let lock24Px1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock24Px-1")
    /// Image `lock24Px`.
    static let lock24Px = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock24Px")
    /// Image `lockError`.
    static let lockError = Rswift.ImageResource(bundle: R.hostingBundle, name: "lockError")
    /// Image `lock`.
    static let lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock")
    /// Image `nightMode`.
    static let nightMode = Rswift.ImageResource(bundle: R.hostingBundle, name: "nightMode")
    /// Image `notifications`.
    static let notifications = Rswift.ImageResource(bundle: R.hostingBundle, name: "notifications")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `profileIcon`.
    static let profileIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileIcon")
    /// Image `proper`.
    static let proper = Rswift.ImageResource(bundle: R.hostingBundle, name: "proper")
    /// Image `qrCode`.
    static let qrCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrCode")
    /// Image `qrImage2`.
    static let qrImage2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrImage2")
    /// Image `qrImage`.
    static let qrImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrImage")
    /// Image `records`.
    static let records = Rswift.ImageResource(bundle: R.hostingBundle, name: "records")
    /// Image `rectangle2`.
    static let rectangle2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rectangle2")
    /// Image `rectangleRed`.
    static let rectangleRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "rectangleRed")
    /// Image `rectangle`.
    static let rectangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "rectangle")
    /// Image `roundedRight`.
    static let roundedRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "roundedRight")
    /// Image `rounded`.
    static let rounded = Rswift.ImageResource(bundle: R.hostingBundle, name: "rounded")
    /// Image `splitIcon`.
    static let splitIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "splitIcon")
    /// Image `tick`.
    static let tick = Rswift.ImageResource(bundle: R.hostingBundle, name: "tick")
    /// Image `touchId`.
    static let touchId = Rswift.ImageResource(bundle: R.hostingBundle, name: "touchId")
    /// Image `userpick`.
    static let userpick = Rswift.ImageResource(bundle: R.hostingBundle, name: "userpick")
    /// Image `wallet`.
    static let wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "5XVoucherContainerWElevation", bundle: ..., traitCollection: ...)`
    static func xVoucherContainerWElevation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xVoucherContainerWElevation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "5XVoucherSurface", bundle: ..., traitCollection: ...)`
    static func xVoucherSurface(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xVoucherSurface, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Done@1,5x 1", bundle: ..., traitCollection: ...)`
    static func done15x1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.done15x1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FlashlightOff", bundle: ..., traitCollection: ...)`
    static func flashlightOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flashlightOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FlashlightOn", bundle: ..., traitCollection: ...)`
    static func flashlightOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flashlightOn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Illustration-1", bundle: ..., traitCollection: ...)`
    static func illustration1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.illustration1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IlustrationCheckmark", bundle: ..., traitCollection: ...)`
    static func ilustrationCheckmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ilustrationCheckmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Me app", bundle: ..., traitCollection: ...)`
    static func meApp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meApp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Resting", bundle: ..., traitCollection: ...)`
    static func resting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.resting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Shadow", bundle: ..., traitCollection: ...)`
    static func shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "activeBlue", bundle: ..., traitCollection: ...)`
    static func activeBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.activeBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow", bundle: ..., traitCollection: ...)`
    static func arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backCopy", bundle: ..., traitCollection: ...)`
    static func backCopy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backCopy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backIcon", bundle: ..., traitCollection: ...)`
    static func backIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backspaceBlue", bundle: ..., traitCollection: ...)`
    static func backspaceBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backspaceBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camera", bundle: ..., traitCollection: ...)`
    static func camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "carLocation", bundle: ..., traitCollection: ...)`
    static func carLocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carLocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cellularNetwork", bundle: ..., traitCollection: ...)`
    static func cellularNetwork(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellularNetwork, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "circular", bundle: ..., traitCollection: ...)`
    static func circular(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circular, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "closeBlack", bundle: ..., traitCollection: ...)`
    static func closeBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "closeIcon", bundle: ..., traitCollection: ...)`
    static func closeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "closeLines", bundle: ..., traitCollection: ...)`
    static func closeLines(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeLines, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "combinedShape", bundle: ..., traitCollection: ...)`
    static func combinedShape(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.combinedShape, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "combinedShapeQR", bundle: ..., traitCollection: ...)`
    static func combinedShapeQR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.combinedShapeQR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete24Px", bundle: ..., traitCollection: ...)`
    static func delete24Px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete24Px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "email1", bundle: ..., traitCollection: ...)`
    static func email1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.email1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "emailVoucher", bundle: ..., traitCollection: ...)`
    static func emailVoucher(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emailVoucher, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eth", bundle: ..., traitCollection: ...)`
    static func eth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "face24Px", bundle: ..., traitCollection: ...)`
    static func face24Px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.face24Px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "faceId", bundle: ..., traitCollection: ...)`
    static func faceId(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faceId, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "faceId-1", bundle: ..., traitCollection: ...)`
    static func faceId1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faceId1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fill1Copy", bundle: ..., traitCollection: ...)`
    static func fill1Copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fill1Copy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "headings", bundle: ..., traitCollection: ...)`
    static func headings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.headings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homeIcon", bundle: ..., traitCollection: ...)`
    static func homeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_launcher_APP", bundle: ..., traitCollection: ...)`
    static func ic_launcher_APP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_launcher_APP, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconDigiD", bundle: ..., traitCollection: ...)`
    static func iconDigiD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconDigiD, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconGrey", bundle: ..., traitCollection: ...)`
    static func iconGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconGrey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsBugreport", bundle: ..., traitCollection: ...)`
    static func iconsBugreport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsBugreport, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "illustration", bundle: ..., traitCollection: ...)`
    static func illustration(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.illustration, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lock", bundle: ..., traitCollection: ...)`
    static func lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lock24Px", bundle: ..., traitCollection: ...)`
    static func lock24Px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock24Px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lock24Px-1", bundle: ..., traitCollection: ...)`
    static func lock24Px1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock24Px1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lockError", bundle: ..., traitCollection: ...)`
    static func lockError(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lockError, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nightMode", bundle: ..., traitCollection: ...)`
    static func nightMode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nightMode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notifications", bundle: ..., traitCollection: ...)`
    static func notifications(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notifications, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profileIcon", bundle: ..., traitCollection: ...)`
    static func profileIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "proper", bundle: ..., traitCollection: ...)`
    static func proper(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.proper, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrCode", bundle: ..., traitCollection: ...)`
    static func qrCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrCode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrImage", bundle: ..., traitCollection: ...)`
    static func qrImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrImage2", bundle: ..., traitCollection: ...)`
    static func qrImage2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrImage2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "records", bundle: ..., traitCollection: ...)`
    static func records(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.records, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rectangle", bundle: ..., traitCollection: ...)`
    static func rectangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rectangle2", bundle: ..., traitCollection: ...)`
    static func rectangle2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rectangleRed", bundle: ..., traitCollection: ...)`
    static func rectangleRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangleRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rounded", bundle: ..., traitCollection: ...)`
    static func rounded(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rounded, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "roundedRight", bundle: ..., traitCollection: ...)`
    static func roundedRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.roundedRight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splitIcon", bundle: ..., traitCollection: ...)`
    static func splitIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splitIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tick", bundle: ..., traitCollection: ...)`
    static func tick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "touchId", bundle: ..., traitCollection: ...)`
    static func touchId(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touchId, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "userpick", bundle: ..., traitCollection: ...)`
    static func userpick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userpick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet", bundle: ..., traitCollection: ...)`
    static func wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 11 nibs.
  struct nib {
    /// Nib `AllowedOrganizationsViewController`.
    static let allowedOrganizationsViewController = _R.nib._AllowedOrganizationsViewController()
    /// Nib `AppLocker`.
    static let appLocker = _R.nib._AppLocker()
    /// Nib `BottomQrWithPinViewController`.
    static let bottomQrWithPinViewController = _R.nib._BottomQrWithPinViewController()
    /// Nib `ConfirmPaymentPopUp`.
    static let confirmPaymentPopUp = _R.nib._ConfirmPaymentPopUp()
    /// Nib `MCrashConfirmViewController`.
    static let mCrashConfirmViewController = _R.nib._MCrashConfirmViewController()
    /// Nib `OrganizationTableViewCell`.
    static let organizationTableViewCell = _R.nib._OrganizationTableViewCell()
    /// Nib `OrganizationValidatorTableViewCell`.
    static let organizationValidatorTableViewCell = _R.nib._OrganizationValidatorTableViewCell()
    /// Nib `OrganizationValidatorViewController`.
    static let organizationValidatorViewController = _R.nib._OrganizationValidatorViewController()
    /// Nib `PullUpQRViewController`.
    static let pullUpQRViewController = _R.nib._PullUpQRViewController()
    /// Nib `SendEtherViewController`.
    static let sendEtherViewController = _R.nib._SendEtherViewController()
    /// Nib `SuccessSendingViewController`.
    static let successSendingViewController = _R.nib._SuccessSendingViewController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AllowedOrganizationsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.allowedOrganizationsViewController) instead")
    static func allowedOrganizationsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.allowedOrganizationsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AppLocker", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.appLocker) instead")
    static func appLocker(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.appLocker)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BottomQrWithPinViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bottomQrWithPinViewController) instead")
    static func bottomQrWithPinViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bottomQrWithPinViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ConfirmPaymentPopUp", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.confirmPaymentPopUp) instead")
    static func confirmPaymentPopUp(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.confirmPaymentPopUp)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MCrashConfirmViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mCrashConfirmViewController) instead")
    static func mCrashConfirmViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mCrashConfirmViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrganizationTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.organizationTableViewCell) instead")
    static func organizationTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.organizationTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrganizationValidatorTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.organizationValidatorTableViewCell) instead")
    static func organizationValidatorTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.organizationValidatorTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrganizationValidatorViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.organizationValidatorViewController) instead")
    static func organizationValidatorViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.organizationValidatorViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PullUpQRViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pullUpQRViewController) instead")
    static func pullUpQRViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pullUpQRViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SendEtherViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sendEtherViewController) instead")
    static func sendEtherViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sendEtherViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SuccessSendingViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.successSendingViewController) instead")
    static func successSendingViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.successSendingViewController)
    }
    #endif

    static func allowedOrganizationsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.allowedOrganizationsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func appLocker(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AppLocker? {
      return R.nib.appLocker.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppLocker
    }

    static func bottomQrWithPinViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.bottomQrWithPinViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func confirmPaymentPopUp(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.confirmPaymentPopUp.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func mCrashConfirmViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomCornerUIView? {
      return R.nib.mCrashConfirmViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomCornerUIView
    }

    static func organizationTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrganizationTableViewCell? {
      return R.nib.organizationTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrganizationTableViewCell
    }

    static func organizationValidatorTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrganizationValidatorTableViewCell? {
      return R.nib.organizationValidatorTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrganizationValidatorTableViewCell
    }

    static func organizationValidatorViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.organizationValidatorViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func pullUpQRViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.pullUpQRViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func sendEtherViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.sendEtherViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func successSendingViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.successSendingViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `OrganizationTableViewCell`.
    static let organizationTableViewCell: Rswift.ReuseIdentifier<OrganizationTableViewCell> = Rswift.ReuseIdentifier(identifier: "OrganizationTableViewCell")
    /// Reuse identifier `OrganizationValidatorTableViewCell`.
    static let organizationValidatorTableViewCell: Rswift.ReuseIdentifier<OrganizationValidatorTableViewCell> = Rswift.ReuseIdentifier(identifier: "OrganizationValidatorTableViewCell")
    /// Reuse identifier `valuteCell`.
    static let valuteCell: Rswift.ReuseIdentifier<ValuteTableViewCell> = Rswift.ReuseIdentifier(identifier: "valuteCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 26 localization tables.
  struct string {
    /// This `R.string.about` struct is generated, and contains static references to 7 localization keys.
    struct about {
      /// en translation:      • 	The Westerkwartier webshop;      • 	The Nijmegen webshop;      • 	The Winterswijk webshop;      • 	The Oost Gelre webshop;      • 	The Berkelland webshop;      • 	The Noordoostpolder webshop      • 	The Kerstpakket webshop;
      ///
      /// Locales: en, nl
      static let sGf5C9HHText = Rswift.StringResource(key: "SGf-5C-9HH.text", tableName: "About", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: About Me
      ///
      /// Locales: en, nl
      static let p0oGxVk0Text = Rswift.StringResource(key: "p0o-gx-Vk0.text", tableName: "About", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Forus, 2018-2020
      ///
      /// Locales: en, nl
      static let ecDI1ItvText = Rswift.StringResource(key: "EcD-I1-itv.text", tableName: "About", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Later on several shops and applications will be added.
      ///
      /// Locales: en, nl
      static let t8Z5VGrCText = Rswift.StringResource(key: "T8Z-5V-grC.text", tableName: "About", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Me
      ///
      /// Locales: en, nl
      static let deM7TARDText = Rswift.StringResource(key: "DeM-7T-ARD.text", tableName: "About", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This app is intended to store vouchers, make payments and log in to different applications.
      ///
      /// Locales: en, nl
      static let mIjASTcHText = Rswift.StringResource(key: "mIj-aS-tcH.text", tableName: "About", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This app works together with:
      ///
      /// Locales: en, nl
      static let laNJ4BvCText = Rswift.StringResource(key: "laN-j4-BvC.text", tableName: "About", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation:      • 	The Westerkwartier webshop;      • 	The Nijmegen webshop;      • 	The Winterswijk webshop;      • 	The Oost Gelre webshop;      • 	The Berkelland webshop;      • 	The Noordoostpolder webshop      • 	The Kerstpakket webshop;
      ///
      /// Locales: en, nl
      static func sGf5C9HHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SGf-5C-9HH.text", tableName: "About", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "About", preferredLanguages: preferredLanguages) else {
          return "SGf-5C-9HH.text"
        }

        return NSLocalizedString("SGf-5C-9HH.text", tableName: "About", bundle: bundle, comment: "")
      }

      /// en translation: About Me
      ///
      /// Locales: en, nl
      static func p0oGxVk0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("p0o-gx-Vk0.text", tableName: "About", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "About", preferredLanguages: preferredLanguages) else {
          return "p0o-gx-Vk0.text"
        }

        return NSLocalizedString("p0o-gx-Vk0.text", tableName: "About", bundle: bundle, comment: "")
      }

      /// en translation: Forus, 2018-2020
      ///
      /// Locales: en, nl
      static func ecDI1ItvText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EcD-I1-itv.text", tableName: "About", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "About", preferredLanguages: preferredLanguages) else {
          return "EcD-I1-itv.text"
        }

        return NSLocalizedString("EcD-I1-itv.text", tableName: "About", bundle: bundle, comment: "")
      }

      /// en translation: Later on several shops and applications will be added.
      ///
      /// Locales: en, nl
      static func t8Z5VGrCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("T8Z-5V-grC.text", tableName: "About", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "About", preferredLanguages: preferredLanguages) else {
          return "T8Z-5V-grC.text"
        }

        return NSLocalizedString("T8Z-5V-grC.text", tableName: "About", bundle: bundle, comment: "")
      }

      /// en translation: Me
      ///
      /// Locales: en, nl
      static func deM7TARDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DeM-7T-ARD.text", tableName: "About", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "About", preferredLanguages: preferredLanguages) else {
          return "DeM-7T-ARD.text"
        }

        return NSLocalizedString("DeM-7T-ARD.text", tableName: "About", bundle: bundle, comment: "")
      }

      /// en translation: This app is intended to store vouchers, make payments and log in to different applications.
      ///
      /// Locales: en, nl
      static func mIjASTcHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mIj-aS-tcH.text", tableName: "About", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "About", preferredLanguages: preferredLanguages) else {
          return "mIj-aS-tcH.text"
        }

        return NSLocalizedString("mIj-aS-tcH.text", tableName: "About", bundle: bundle, comment: "")
      }

      /// en translation: This app works together with:
      ///
      /// Locales: en, nl
      static func laNJ4BvCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("laN-j4-BvC.text", tableName: "About", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "About", preferredLanguages: preferredLanguages) else {
          return "laN-j4-BvC.text"
        }

        return NSLocalizedString("laN-j4-BvC.text", tableName: "About", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.allowedOrganizationsViewController` struct is generated, and contains static references to 1 localization keys.
    struct allowedOrganizationsViewController {
      /// en translation: Organization Account
      ///
      /// Locales: en, nl
      static let qYXMEkXText = Rswift.StringResource(key: "8qY-XM-EkX.text", tableName: "AllowedOrganizationsViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: Organization Account
      ///
      /// Locales: en, nl
      static func qYXMEkXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8qY-XM-EkX.text", tableName: "AllowedOrganizationsViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AllowedOrganizationsViewController", preferredLanguages: preferredLanguages) else {
          return "8qY-XM-EkX.text"
        }

        return NSLocalizedString("8qY-XM-EkX.text", tableName: "AllowedOrganizationsViewController", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.appLocker` struct is generated, and contains static references to 12 localization keys.
    struct appLocker {
      /// en translation: 0
      ///
      /// Locales: en, nl
      static let hQBBPFZgNormalTitle = Rswift.StringResource(key: "hQB-bP-FZg.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: 1
      ///
      /// Locales: en, nl
      static let uxb3y6MPNormalTitle = Rswift.StringResource(key: "uxb-3y-6MP.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: 2
      ///
      /// Locales: en, nl
      static let hjzbt9ebNormalTitle = Rswift.StringResource(key: "HJZ-BT-9eb.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: 3
      ///
      /// Locales: en, nl
      static let cogNdUYdNormalTitle = Rswift.StringResource(key: "cog-Nd-UYd.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: 4
      ///
      /// Locales: en, nl
      static let uJnA6MYeNormalTitle = Rswift.StringResource(key: "UJn-a6-MYe.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: 5
      ///
      /// Locales: en, nl
      static let svaSsJmvNormalTitle = Rswift.StringResource(key: "sva-ss-Jmv.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: 6
      ///
      /// Locales: en, nl
      static let uveTi7yaNormalTitle = Rswift.StringResource(key: "uve-ti-7ya.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: 7
      ///
      /// Locales: en, nl
      static let rAE1LZxNNormalTitle = Rswift.StringResource(key: "rAE-1L-zxN.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: 8
      ///
      /// Locales: en, nl
      static let abqS3WbINormalTitle = Rswift.StringResource(key: "abq-s3-wbI.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: 9
      ///
      /// Locales: en, nl
      static let cKDQEN40NormalTitle = Rswift.StringResource(key: "cKD-qE-N40.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, nl
      static let ciu9QOSgNormalTitle = Rswift.StringResource(key: "CIU-9Q-OSg.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Message
      ///
      /// Locales: en, nl
      static let biAIv5oKText = Rswift.StringResource(key: "BiA-iv-5oK.text", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: 0
      ///
      /// Locales: en, nl
      static func hQBBPFZgNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hQB-bP-FZg.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "hQB-bP-FZg.normalTitle"
        }

        return NSLocalizedString("hQB-bP-FZg.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: 1
      ///
      /// Locales: en, nl
      static func uxb3y6MPNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uxb-3y-6MP.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "uxb-3y-6MP.normalTitle"
        }

        return NSLocalizedString("uxb-3y-6MP.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: 2
      ///
      /// Locales: en, nl
      static func hjzbt9ebNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HJZ-BT-9eb.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "HJZ-BT-9eb.normalTitle"
        }

        return NSLocalizedString("HJZ-BT-9eb.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: 3
      ///
      /// Locales: en, nl
      static func cogNdUYdNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cog-Nd-UYd.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "cog-Nd-UYd.normalTitle"
        }

        return NSLocalizedString("cog-Nd-UYd.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: 4
      ///
      /// Locales: en, nl
      static func uJnA6MYeNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UJn-a6-MYe.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "UJn-a6-MYe.normalTitle"
        }

        return NSLocalizedString("UJn-a6-MYe.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: 5
      ///
      /// Locales: en, nl
      static func svaSsJmvNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sva-ss-Jmv.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "sva-ss-Jmv.normalTitle"
        }

        return NSLocalizedString("sva-ss-Jmv.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: 6
      ///
      /// Locales: en, nl
      static func uveTi7yaNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uve-ti-7ya.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "uve-ti-7ya.normalTitle"
        }

        return NSLocalizedString("uve-ti-7ya.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: 7
      ///
      /// Locales: en, nl
      static func rAE1LZxNNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rAE-1L-zxN.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "rAE-1L-zxN.normalTitle"
        }

        return NSLocalizedString("rAE-1L-zxN.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: 8
      ///
      /// Locales: en, nl
      static func abqS3WbINormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("abq-s3-wbI.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "abq-s3-wbI.normalTitle"
        }

        return NSLocalizedString("abq-s3-wbI.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: 9
      ///
      /// Locales: en, nl
      static func cKDQEN40NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cKD-qE-N40.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "cKD-qE-N40.normalTitle"
        }

        return NSLocalizedString("cKD-qE-N40.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, nl
      static func ciu9QOSgNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CIU-9Q-OSg.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "CIU-9Q-OSg.normalTitle"
        }

        return NSLocalizedString("CIU-9Q-OSg.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: Message
      ///
      /// Locales: en, nl
      static func biAIv5oKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BiA-iv-5oK.text", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "BiA-iv-5oK.text"
        }

        return NSLocalizedString("BiA-iv-5oK.text", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.bottomQrWithPinViewController` struct is generated, and contains static references to 8 localization keys.
    struct bottomQrWithPinViewController {
      /// en translation: CONNECT DEVICE
      ///
      /// Locales: en, nl
      static let mrZRGZPCText = Rswift.StringResource(key: "mrZ-rG-zPC.text", tableName: "BottomQrWithPinViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Scan this QR-Code with a device you are already logged in
      ///
      /// Locales: en, nl
      static let da1V9PIhText = Rswift.StringResource(key: "DA1-v9-PIh.text", tableName: "BottomQrWithPinViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This is your pairing code
      ///
      /// Locales: en, nl
      static let jr0D79x9Text = Rswift.StringResource(key: "Jr0-D7-9x9.text", tableName: "BottomQrWithPinViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: • 
      ///
      /// Locales: en, nl
      static let ip2RH2r5Text = Rswift.StringResource(key: "ip2-RH-2r5.text", tableName: "BottomQrWithPinViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: • 
      ///
      /// Locales: en, nl
      static let mXfTDC8TText = Rswift.StringResource(key: "MXf-TD-C8T.text", tableName: "BottomQrWithPinViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: • 
      ///
      /// Locales: en, nl
      static let nnDLKHwHText = Rswift.StringResource(key: "NnD-lK-HwH.text", tableName: "BottomQrWithPinViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: • 
      ///
      /// Locales: en, nl
      static let xHhUpOffText = Rswift.StringResource(key: "xHh-up-Off.text", tableName: "BottomQrWithPinViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: • 
      ///
      /// Locales: en, nl
      static let xp17mW8DText = Rswift.StringResource(key: "XP1-7m-w8D.text", tableName: "BottomQrWithPinViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: CONNECT DEVICE
      ///
      /// Locales: en, nl
      static func mrZRGZPCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mrZ-rG-zPC.text", tableName: "BottomQrWithPinViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BottomQrWithPinViewController", preferredLanguages: preferredLanguages) else {
          return "mrZ-rG-zPC.text"
        }

        return NSLocalizedString("mrZ-rG-zPC.text", tableName: "BottomQrWithPinViewController", bundle: bundle, comment: "")
      }

      /// en translation: Scan this QR-Code with a device you are already logged in
      ///
      /// Locales: en, nl
      static func da1V9PIhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DA1-v9-PIh.text", tableName: "BottomQrWithPinViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BottomQrWithPinViewController", preferredLanguages: preferredLanguages) else {
          return "DA1-v9-PIh.text"
        }

        return NSLocalizedString("DA1-v9-PIh.text", tableName: "BottomQrWithPinViewController", bundle: bundle, comment: "")
      }

      /// en translation: This is your pairing code
      ///
      /// Locales: en, nl
      static func jr0D79x9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Jr0-D7-9x9.text", tableName: "BottomQrWithPinViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BottomQrWithPinViewController", preferredLanguages: preferredLanguages) else {
          return "Jr0-D7-9x9.text"
        }

        return NSLocalizedString("Jr0-D7-9x9.text", tableName: "BottomQrWithPinViewController", bundle: bundle, comment: "")
      }

      /// en translation: • 
      ///
      /// Locales: en, nl
      static func ip2RH2r5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ip2-RH-2r5.text", tableName: "BottomQrWithPinViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BottomQrWithPinViewController", preferredLanguages: preferredLanguages) else {
          return "ip2-RH-2r5.text"
        }

        return NSLocalizedString("ip2-RH-2r5.text", tableName: "BottomQrWithPinViewController", bundle: bundle, comment: "")
      }

      /// en translation: • 
      ///
      /// Locales: en, nl
      static func mXfTDC8TText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MXf-TD-C8T.text", tableName: "BottomQrWithPinViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BottomQrWithPinViewController", preferredLanguages: preferredLanguages) else {
          return "MXf-TD-C8T.text"
        }

        return NSLocalizedString("MXf-TD-C8T.text", tableName: "BottomQrWithPinViewController", bundle: bundle, comment: "")
      }

      /// en translation: • 
      ///
      /// Locales: en, nl
      static func nnDLKHwHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NnD-lK-HwH.text", tableName: "BottomQrWithPinViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BottomQrWithPinViewController", preferredLanguages: preferredLanguages) else {
          return "NnD-lK-HwH.text"
        }

        return NSLocalizedString("NnD-lK-HwH.text", tableName: "BottomQrWithPinViewController", bundle: bundle, comment: "")
      }

      /// en translation: • 
      ///
      /// Locales: en, nl
      static func xHhUpOffText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xHh-up-Off.text", tableName: "BottomQrWithPinViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BottomQrWithPinViewController", preferredLanguages: preferredLanguages) else {
          return "xHh-up-Off.text"
        }

        return NSLocalizedString("xHh-up-Off.text", tableName: "BottomQrWithPinViewController", bundle: bundle, comment: "")
      }

      /// en translation: • 
      ///
      /// Locales: en, nl
      static func xp17mW8DText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XP1-7m-w8D.text", tableName: "BottomQrWithPinViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BottomQrWithPinViewController", preferredLanguages: preferredLanguages) else {
          return "XP1-7m-w8D.text"
        }

        return NSLocalizedString("XP1-7m-w8D.text", tableName: "BottomQrWithPinViewController", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.chooseTypeRecord` struct is generated, and contains static references to 6 localization keys.
    struct chooseTypeRecord {
      /// en translation: Choose Type
      ///
      /// Locales: en, nl
      static let tl7TyEwcText = Rswift.StringResource(key: "tl7-ty-Ewc.text", tableName: "ChooseTypeRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: E-mail
      ///
      /// Locales: en, nl
      static let qdMHrEehText = Rswift.StringResource(key: "QdM-Hr-eeh.text", tableName: "ChooseTypeRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: New Record
      ///
      /// Locales: en, nl
      static let aJp31KeLText = Rswift.StringResource(key: "AJp-31-keL.text", tableName: "ChooseTypeRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Next step
      ///
      /// Locales: en, nl
      static let rd6NkBSjNormalTitle = Rswift.StringResource(key: "Rd6-nk-bSj.normalTitle", tableName: "ChooseTypeRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Personal
      ///
      /// Locales: en, nl
      static let gPmBKJzaNormalTitle = Rswift.StringResource(key: "gPm-bK-jza.normalTitle", tableName: "ChooseTypeRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Select the category under which the new record type should be added.
      ///
      /// Locales: en, nl
      static let ukwWnIuwText = Rswift.StringResource(key: "UKW-Wn-Iuw.text", tableName: "ChooseTypeRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: Choose Type
      ///
      /// Locales: en, nl
      static func tl7TyEwcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tl7-ty-Ewc.text", tableName: "ChooseTypeRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ChooseTypeRecord", preferredLanguages: preferredLanguages) else {
          return "tl7-ty-Ewc.text"
        }

        return NSLocalizedString("tl7-ty-Ewc.text", tableName: "ChooseTypeRecord", bundle: bundle, comment: "")
      }

      /// en translation: E-mail
      ///
      /// Locales: en, nl
      static func qdMHrEehText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QdM-Hr-eeh.text", tableName: "ChooseTypeRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ChooseTypeRecord", preferredLanguages: preferredLanguages) else {
          return "QdM-Hr-eeh.text"
        }

        return NSLocalizedString("QdM-Hr-eeh.text", tableName: "ChooseTypeRecord", bundle: bundle, comment: "")
      }

      /// en translation: New Record
      ///
      /// Locales: en, nl
      static func aJp31KeLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AJp-31-keL.text", tableName: "ChooseTypeRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ChooseTypeRecord", preferredLanguages: preferredLanguages) else {
          return "AJp-31-keL.text"
        }

        return NSLocalizedString("AJp-31-keL.text", tableName: "ChooseTypeRecord", bundle: bundle, comment: "")
      }

      /// en translation: Next step
      ///
      /// Locales: en, nl
      static func rd6NkBSjNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rd6-nk-bSj.normalTitle", tableName: "ChooseTypeRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ChooseTypeRecord", preferredLanguages: preferredLanguages) else {
          return "Rd6-nk-bSj.normalTitle"
        }

        return NSLocalizedString("Rd6-nk-bSj.normalTitle", tableName: "ChooseTypeRecord", bundle: bundle, comment: "")
      }

      /// en translation: Personal
      ///
      /// Locales: en, nl
      static func gPmBKJzaNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gPm-bK-jza.normalTitle", tableName: "ChooseTypeRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ChooseTypeRecord", preferredLanguages: preferredLanguages) else {
          return "gPm-bK-jza.normalTitle"
        }

        return NSLocalizedString("gPm-bK-jza.normalTitle", tableName: "ChooseTypeRecord", bundle: bundle, comment: "")
      }

      /// en translation: Select the category under which the new record type should be added.
      ///
      /// Locales: en, nl
      static func ukwWnIuwText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UKW-Wn-Iuw.text", tableName: "ChooseTypeRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ChooseTypeRecord", preferredLanguages: preferredLanguages) else {
          return "UKW-Wn-Iuw.text"
        }

        return NSLocalizedString("UKW-Wn-Iuw.text", tableName: "ChooseTypeRecord", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.confirmPaymentPopUp` struct is generated, and contains static references to 5 localization keys.
    struct confirmPaymentPopUp {
      /// en translation: Are you sure you want to pay      €140?
      ///
      /// Locales: en, nl
      static let yYRZqCf0Text = Rswift.StringResource(key: "yYR-Zq-Cf0.text", tableName: "ConfirmPaymentPopUp", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: CONFIRM
      ///
      /// Locales: en, nl
      static let bujqCpNormalTitle = Rswift.StringResource(key: "69B-uJ-QCp.normalTitle", tableName: "ConfirmPaymentPopUp", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Confirm transaction
      ///
      /// Locales: en, nl
      static let dBuVIFVrText = Rswift.StringResource(key: "dBu-VI-fVr.text", tableName: "ConfirmPaymentPopUp", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: DECLINE
      ///
      /// Locales: en, nl
      static let buJFY5YsNormalTitle = Rswift.StringResource(key: "BuJ-fY-5Ys.normalTitle", tableName: "ConfirmPaymentPopUp", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Insufficient funds on the voucher.  Please, request extra payment of € 20
      ///
      /// Locales: en, nl
      static let snKYGX66Text = Rswift.StringResource(key: "SnK-yG-X66.text", tableName: "ConfirmPaymentPopUp", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: Are you sure you want to pay      €140?
      ///
      /// Locales: en, nl
      static func yYRZqCf0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yYR-Zq-Cf0.text", tableName: "ConfirmPaymentPopUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ConfirmPaymentPopUp", preferredLanguages: preferredLanguages) else {
          return "yYR-Zq-Cf0.text"
        }

        return NSLocalizedString("yYR-Zq-Cf0.text", tableName: "ConfirmPaymentPopUp", bundle: bundle, comment: "")
      }

      /// en translation: CONFIRM
      ///
      /// Locales: en, nl
      static func bujqCpNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("69B-uJ-QCp.normalTitle", tableName: "ConfirmPaymentPopUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ConfirmPaymentPopUp", preferredLanguages: preferredLanguages) else {
          return "69B-uJ-QCp.normalTitle"
        }

        return NSLocalizedString("69B-uJ-QCp.normalTitle", tableName: "ConfirmPaymentPopUp", bundle: bundle, comment: "")
      }

      /// en translation: Confirm transaction
      ///
      /// Locales: en, nl
      static func dBuVIFVrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dBu-VI-fVr.text", tableName: "ConfirmPaymentPopUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ConfirmPaymentPopUp", preferredLanguages: preferredLanguages) else {
          return "dBu-VI-fVr.text"
        }

        return NSLocalizedString("dBu-VI-fVr.text", tableName: "ConfirmPaymentPopUp", bundle: bundle, comment: "")
      }

      /// en translation: DECLINE
      ///
      /// Locales: en, nl
      static func buJFY5YsNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BuJ-fY-5Ys.normalTitle", tableName: "ConfirmPaymentPopUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ConfirmPaymentPopUp", preferredLanguages: preferredLanguages) else {
          return "BuJ-fY-5Ys.normalTitle"
        }

        return NSLocalizedString("BuJ-fY-5Ys.normalTitle", tableName: "ConfirmPaymentPopUp", bundle: bundle, comment: "")
      }

      /// en translation: Insufficient funds on the voucher.  Please, request extra payment of € 20
      ///
      /// Locales: en, nl
      static func snKYGX66Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SnK-yG-X66.text", tableName: "ConfirmPaymentPopUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ConfirmPaymentPopUp", preferredLanguages: preferredLanguages) else {
          return "SnK-yG-X66.text"
        }

        return NSLocalizedString("SnK-yG-X66.text", tableName: "ConfirmPaymentPopUp", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.emailLogin` struct is generated, and contains static references to 5 localization keys.
    struct emailLogin {
      /// en translation: CONFIRM
      ///
      /// Locales: en, nl
      static let f91eTZnNormalTitle = Rswift.StringResource(key: "9F9-1e-TZn.normalTitle", tableName: "EmailLogin", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: E-mail
      ///
      /// Locales: en, nl
      static let biEcFhuPlaceholder = Rswift.StringResource(key: "9Bi-Ec-fhu.placeholder", tableName: "EmailLogin", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Log in
      ///
      /// Locales: en, nl
      static let wxT25HVYText = Rswift.StringResource(key: "WxT-25-hVY.text", tableName: "EmailLogin", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Log in by e-mail
      ///
      /// Locales: en, nl
      static let rxRIOZjaText = Rswift.StringResource(key: "RxR-iO-Zja.text", tableName: "EmailLogin", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Please enter your e-mail address in order to receive your login details.
      ///
      /// Locales: en, nl
      static let cVyOl6XbText = Rswift.StringResource(key: "cVy-Ol-6Xb.text", tableName: "EmailLogin", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: CONFIRM
      ///
      /// Locales: en, nl
      static func f91eTZnNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9F9-1e-TZn.normalTitle", tableName: "EmailLogin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "EmailLogin", preferredLanguages: preferredLanguages) else {
          return "9F9-1e-TZn.normalTitle"
        }

        return NSLocalizedString("9F9-1e-TZn.normalTitle", tableName: "EmailLogin", bundle: bundle, comment: "")
      }

      /// en translation: E-mail
      ///
      /// Locales: en, nl
      static func biEcFhuPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9Bi-Ec-fhu.placeholder", tableName: "EmailLogin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "EmailLogin", preferredLanguages: preferredLanguages) else {
          return "9Bi-Ec-fhu.placeholder"
        }

        return NSLocalizedString("9Bi-Ec-fhu.placeholder", tableName: "EmailLogin", bundle: bundle, comment: "")
      }

      /// en translation: Log in
      ///
      /// Locales: en, nl
      static func wxT25HVYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WxT-25-hVY.text", tableName: "EmailLogin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "EmailLogin", preferredLanguages: preferredLanguages) else {
          return "WxT-25-hVY.text"
        }

        return NSLocalizedString("WxT-25-hVY.text", tableName: "EmailLogin", bundle: bundle, comment: "")
      }

      /// en translation: Log in by e-mail
      ///
      /// Locales: en, nl
      static func rxRIOZjaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("RxR-iO-Zja.text", tableName: "EmailLogin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "EmailLogin", preferredLanguages: preferredLanguages) else {
          return "RxR-iO-Zja.text"
        }

        return NSLocalizedString("RxR-iO-Zja.text", tableName: "EmailLogin", bundle: bundle, comment: "")
      }

      /// en translation: Please enter your e-mail address in order to receive your login details.
      ///
      /// Locales: en, nl
      static func cVyOl6XbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cVy-Ol-6Xb.text", tableName: "EmailLogin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "EmailLogin", preferredLanguages: preferredLanguages) else {
          return "cVy-Ol-6Xb.text"
        }

        return NSLocalizedString("cVy-Ol-6Xb.text", tableName: "EmailLogin", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.enablePersonalInformation` struct is generated, and contains static references to 4 localization keys.
    struct enablePersonalInformation {
      /// en translation: By sharing your identification number, problems can be solved faster. If needed the developers can contact you as well.
      ///
      /// Locales: en, nl
      static let bOkMYYl9Text = Rswift.StringResource(key: "bOk-mY-Yl9.text", tableName: "EnablePersonalInformation", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: NEXT
      ///
      /// Locales: en, nl
      static let aCwB0HvFNormalTitle = Rswift.StringResource(key: "aCw-B0-HvF.normalTitle", tableName: "EnablePersonalInformation", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Share identification number
      ///
      /// Locales: en, nl
      static let mgT1RAaxText = Rswift.StringResource(key: "mgT-1R-Aax.text", tableName: "EnablePersonalInformation", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Sharing information
      ///
      /// Locales: en, nl
      static let pp9OVVYlText = Rswift.StringResource(key: "Pp9-oV-vYl.text", tableName: "EnablePersonalInformation", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: By sharing your identification number, problems can be solved faster. If needed the developers can contact you as well.
      ///
      /// Locales: en, nl
      static func bOkMYYl9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bOk-mY-Yl9.text", tableName: "EnablePersonalInformation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "EnablePersonalInformation", preferredLanguages: preferredLanguages) else {
          return "bOk-mY-Yl9.text"
        }

        return NSLocalizedString("bOk-mY-Yl9.text", tableName: "EnablePersonalInformation", bundle: bundle, comment: "")
      }

      /// en translation: NEXT
      ///
      /// Locales: en, nl
      static func aCwB0HvFNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aCw-B0-HvF.normalTitle", tableName: "EnablePersonalInformation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "EnablePersonalInformation", preferredLanguages: preferredLanguages) else {
          return "aCw-B0-HvF.normalTitle"
        }

        return NSLocalizedString("aCw-B0-HvF.normalTitle", tableName: "EnablePersonalInformation", bundle: bundle, comment: "")
      }

      /// en translation: Share identification number
      ///
      /// Locales: en, nl
      static func mgT1RAaxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mgT-1R-Aax.text", tableName: "EnablePersonalInformation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "EnablePersonalInformation", preferredLanguages: preferredLanguages) else {
          return "mgT-1R-Aax.text"
        }

        return NSLocalizedString("mgT-1R-Aax.text", tableName: "EnablePersonalInformation", bundle: bundle, comment: "")
      }

      /// en translation: Sharing information
      ///
      /// Locales: en, nl
      static func pp9OVVYlText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pp9-oV-vYl.text", tableName: "EnablePersonalInformation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "EnablePersonalInformation", preferredLanguages: preferredLanguages) else {
          return "Pp9-oV-vYl.text"
        }

        return NSLocalizedString("Pp9-oV-vYl.text", tableName: "EnablePersonalInformation", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.first` struct is generated, and contains static references to 11 localization keys.
    struct first {
      /// en translation: Add custom
      ///
      /// Locales: en, nl
      static let f1JQgSpnNormalTitle = Rswift.StringResource(key: "f1J-Qg-spn.normalTitle", tableName: "First", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Choose Environment
      ///
      /// Locales: en, nl
      static let irT931NwNormalTitle = Rswift.StringResource(key: "IrT-93-1Nw.normalTitle", tableName: "First", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Demo
      ///
      /// Locales: en, nl
      static let tHv5pNg5NormalTitle = Rswift.StringResource(key: "tHv-5p-Ng5.normalTitle", tableName: "First", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Dev
      ///
      /// Locales: en, nl
      static let gfVZoSjhNormalTitle = Rswift.StringResource(key: "gfV-Zo-Sjh.normalTitle", tableName: "First", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Log in from another device
      ///
      /// Locales: en, nl
      static let aoIOjU12Text = Rswift.StringResource(key: "aoI-oj-U12.text", tableName: "First", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: PAIRING
      ///
      /// Locales: en, nl
      static let ePpCxAwGNormalTitle = Rswift.StringResource(key: "EPp-cx-awG.normalTitle", tableName: "First", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Production
      ///
      /// Locales: en, nl
      static let arwC0TbQNormalTitle = Rswift.StringResource(key: "Arw-c0-tbQ.normalTitle", tableName: "First", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: SIGN IN
      ///
      /// Locales: en, nl
      static let zoxaPbTNormalTitle = Rswift.StringResource(key: "0ZO-XA-PbT.normalTitle", tableName: "First", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Staging
      ///
      /// Locales: en, nl
      static let i0FIYf1NormalTitle = Rswift.StringResource(key: "7I0-FI-Yf1.normalTitle", tableName: "First", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Welcome to Me
      ///
      /// Locales: en, nl
      static let yynHr0CSText = Rswift.StringResource(key: "yyn-hr-0CS.text", tableName: "First", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Your email
      ///
      /// Locales: en, nl
      static let ywFT94XRPlaceholder = Rswift.StringResource(key: "YwF-T9-4XR.placeholder", tableName: "First", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: Add custom
      ///
      /// Locales: en, nl
      static func f1JQgSpnNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("f1J-Qg-spn.normalTitle", tableName: "First", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "First", preferredLanguages: preferredLanguages) else {
          return "f1J-Qg-spn.normalTitle"
        }

        return NSLocalizedString("f1J-Qg-spn.normalTitle", tableName: "First", bundle: bundle, comment: "")
      }

      /// en translation: Choose Environment
      ///
      /// Locales: en, nl
      static func irT931NwNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("IrT-93-1Nw.normalTitle", tableName: "First", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "First", preferredLanguages: preferredLanguages) else {
          return "IrT-93-1Nw.normalTitle"
        }

        return NSLocalizedString("IrT-93-1Nw.normalTitle", tableName: "First", bundle: bundle, comment: "")
      }

      /// en translation: Demo
      ///
      /// Locales: en, nl
      static func tHv5pNg5NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tHv-5p-Ng5.normalTitle", tableName: "First", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "First", preferredLanguages: preferredLanguages) else {
          return "tHv-5p-Ng5.normalTitle"
        }

        return NSLocalizedString("tHv-5p-Ng5.normalTitle", tableName: "First", bundle: bundle, comment: "")
      }

      /// en translation: Dev
      ///
      /// Locales: en, nl
      static func gfVZoSjhNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gfV-Zo-Sjh.normalTitle", tableName: "First", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "First", preferredLanguages: preferredLanguages) else {
          return "gfV-Zo-Sjh.normalTitle"
        }

        return NSLocalizedString("gfV-Zo-Sjh.normalTitle", tableName: "First", bundle: bundle, comment: "")
      }

      /// en translation: Log in from another device
      ///
      /// Locales: en, nl
      static func aoIOjU12Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aoI-oj-U12.text", tableName: "First", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "First", preferredLanguages: preferredLanguages) else {
          return "aoI-oj-U12.text"
        }

        return NSLocalizedString("aoI-oj-U12.text", tableName: "First", bundle: bundle, comment: "")
      }

      /// en translation: PAIRING
      ///
      /// Locales: en, nl
      static func ePpCxAwGNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("EPp-cx-awG.normalTitle", tableName: "First", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "First", preferredLanguages: preferredLanguages) else {
          return "EPp-cx-awG.normalTitle"
        }

        return NSLocalizedString("EPp-cx-awG.normalTitle", tableName: "First", bundle: bundle, comment: "")
      }

      /// en translation: Production
      ///
      /// Locales: en, nl
      static func arwC0TbQNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Arw-c0-tbQ.normalTitle", tableName: "First", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "First", preferredLanguages: preferredLanguages) else {
          return "Arw-c0-tbQ.normalTitle"
        }

        return NSLocalizedString("Arw-c0-tbQ.normalTitle", tableName: "First", bundle: bundle, comment: "")
      }

      /// en translation: SIGN IN
      ///
      /// Locales: en, nl
      static func zoxaPbTNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0ZO-XA-PbT.normalTitle", tableName: "First", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "First", preferredLanguages: preferredLanguages) else {
          return "0ZO-XA-PbT.normalTitle"
        }

        return NSLocalizedString("0ZO-XA-PbT.normalTitle", tableName: "First", bundle: bundle, comment: "")
      }

      /// en translation: Staging
      ///
      /// Locales: en, nl
      static func i0FIYf1NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7I0-FI-Yf1.normalTitle", tableName: "First", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "First", preferredLanguages: preferredLanguages) else {
          return "7I0-FI-Yf1.normalTitle"
        }

        return NSLocalizedString("7I0-FI-Yf1.normalTitle", tableName: "First", bundle: bundle, comment: "")
      }

      /// en translation: Welcome to Me
      ///
      /// Locales: en, nl
      static func yynHr0CSText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yyn-hr-0CS.text", tableName: "First", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "First", preferredLanguages: preferredLanguages) else {
          return "yyn-hr-0CS.text"
        }

        return NSLocalizedString("yyn-hr-0CS.text", tableName: "First", bundle: bundle, comment: "")
      }

      /// en translation: Your email
      ///
      /// Locales: en, nl
      static func ywFT94XRPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YwF-T9-4XR.placeholder", tableName: "First", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "First", preferredLanguages: preferredLanguages) else {
          return "YwF-T9-4XR.placeholder"
        }

        return NSLocalizedString("YwF-T9-4XR.placeholder", tableName: "First", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 138 localization keys.
    struct localizable {
      /// en translation: -voucher in the form of a QR-code
      ///
      /// Locales: en, nl
      static let voucherInTheFormOfAQRCode = Rswift.StringResource(key: "voucher in the form of a QR-code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: A payment of € 0.01 is too low to be paid out, choose a higher amount.
      ///
      /// Locales: en, nl
      static let aPaymentOf001IsTooLowToBePaidOutChooseAHigherAmount = Rswift.StringResource(key: "A payment of € 0.01 is too low to be paid out, choose a higher amount.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: A record has been validated!
      ///
      /// Locales: en, nl
      static let aRecordHasBeenValidated = Rswift.StringResource(key: "A record has been validated!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: About Me
      ///
      /// Locales: en, nl
      static let aboutMe = Rswift.StringResource(key: "About Me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: en, nl
      static let address = Rswift.StringResource(key: "address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Amount of children
      ///
      /// Locales: en, nl
      static let children_nth = Rswift.StringResource(key: "children_nth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Are you sure you want to confirm this transaction.
      ///
      /// Locales: en, nl
      static let areYouSureYouWantToConfirmThisTransaction = Rswift.StringResource(key: "Are you sure you want to confirm this transaction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Are you sure you want to log out?
      ///
      /// Locales: en, nl
      static let areYouSureYouWantToLogOut = Rswift.StringResource(key: "Are you sure you want to log out?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: BSN
      ///
      /// Locales: en, nl
      static let bsn = Rswift.StringResource(key: "bsn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Before we get started, please confirm your email address.
      ///
      /// Locales: en, nl
      static let beforeWeGetStartedPleaseConfirmYourEmailAddress = Rswift.StringResource(key: "Before we get started, please confirm your email address.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Business
      ///
      /// Locales: en, nl
      static let business = Rswift.StringResource(key: "Business", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Camera permission request was denied.
      ///
      /// Locales: en, nl
      static let cameraPermissionRequestWasDenied = Rswift.StringResource(key: "Camera permission request was denied.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, nl
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Certificates
      ///
      /// Locales: en, nl
      static let certificates = Rswift.StringResource(key: "Certificates", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Change passcode
      ///
      /// Locales: en, nl
      static let changePasscode = Rswift.StringResource(key: "Change passcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Children
      ///
      /// Locales: en, nl
      static let children = Rswift.StringResource(key: "children", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Click on the link you received on %@ to continue
      ///
      /// Locales: en, nl
      static let clickOnTheLinkYouReceivedOnToContinue = Rswift.StringResource(key: "Click on the link you received on %@ to continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Codes don't match. Please try again
      ///
      /// Locales: en, nl
      static let codesDonTMatchPleaseTryAgain = Rswift.StringResource(key: "Codes don't match. Please try again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, nl
      static let confirm = Rswift.StringResource(key: "Confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Confirm the code
      ///
      /// Locales: en, nl
      static let confirmTheCode = Rswift.StringResource(key: "Confirm the code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Confirm the login code by entering it again.
      ///
      /// Locales: en, nl
      static let confirmTheLoginCodeByEnteringItAgain = Rswift.StringResource(key: "Confirm the login code by entering it again.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Confirm to go to your email app to send a message to the provider
      ///
      /// Locales: en, nl
      static let confirmToGoToYourEmailAppToSendAMessageToTheProvider = Rswift.StringResource(key: "Confirm to go to your email app to send a message to the provider", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Confirm transaction
      ///
      /// Locales: en, nl
      static let confirmTransaction = Rswift.StringResource(key: "Confirm transaction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Copied to clipboard
      ///
      /// Locales: en, nl
      static let copiedToClipboard = Rswift.StringResource(key: "Copied to clipboard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Copy address
      ///
      /// Locales: en, nl
      static let copyAddress = Rswift.StringResource(key: "Copy address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Create passcode
      ///
      /// Locales: en, nl
      static let createPasscode = Rswift.StringResource(key: "Create passcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Currently maintenance is being done.
      ///
      /// Locales: en, nl
      static let currentlyMaintenanceIsBeingDone = Rswift.StringResource(key: "Currently maintenance is being done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Date of birth
      ///
      /// Locales: en, nl
      static let birth_date = Rswift.StringResource(key: "birth_date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Do you want to login instead?
      ///
      /// Locales: en, nl
      static let doYouWantToLoginInstead = Rswift.StringResource(key: "Do you want to login instead?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: E-mail to me
      ///
      /// Locales: en, nl
      static let eMailToMe = Rswift.StringResource(key: "E-mail to me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Eligible for Kindpakket 2018
      ///
      /// Locales: en, nl
      static let kindpakket_2018_eligible = Rswift.StringResource(key: "kindpakket_2018_eligible", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Eligible for Kindpakket 2019
      ///
      /// Locales: en, nl
      static let kindpakket_2019_eligible = Rswift.StringResource(key: "kindpakket_2019_eligible", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Eligible for Meedoenregeling 2018
      ///
      /// Locales: en, nl
      static let meedoenregeling_2018_eligible = Rswift.StringResource(key: "meedoenregeling_2018_eligible", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Email is empty
      ///
      /// Locales: en, nl
      static let emailIsEmpty = Rswift.StringResource(key: "Email is empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Enter a new login code
      ///
      /// Locales: en, nl
      static let enterANewLoginCode = Rswift.StringResource(key: "Enter a new login code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Enter login code
      ///
      /// Locales: en, nl
      static let enterLoginCode = Rswift.StringResource(key: "Enter login code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Enter your login code
      ///
      /// Locales: en, nl
      static let enterYourLoginCode = Rswift.StringResource(key: "Enter your login code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Enter your login code to use Face ID
      ///
      /// Locales: en, nl
      static let enterYourLoginCodeToUseFaceID = Rswift.StringResource(key: "Enter your login code to use Face ID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Enter your old code
      ///
      /// Locales: en, nl
      static let enterYourOldCode = Rswift.StringResource(key: "Enter your old code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: en, nl
      static let error = Rswift.StringResource(key: "error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Error!
      ///
      /// Locales: en, nl
      static let error_exclamation = Rswift.StringResource(key: "error_exclamation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Expired
      ///
      /// Locales: en, nl
      static let expired = Rswift.StringResource(key: "Expired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Expired session
      ///
      /// Locales: en, nl
      static let expiredSession = Rswift.StringResource(key: "Expired session", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Family Name
      ///
      /// Locales: en, nl
      static let family_name = Rswift.StringResource(key: "family_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Field is empty
      ///
      /// Locales: en, nl
      static let fieldIsEmpty = Rswift.StringResource(key: "Field is empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Field is requierd
      ///
      /// Locales: en, nl
      static let fieldIsRequierd = Rswift.StringResource(key: "Field is requierd", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Gender
      ///
      /// Locales: en, nl
      static let gender = Rswift.StringResource(key: "gender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Given name
      ///
      /// Locales: en, nl
      static let given_name = Rswift.StringResource(key: "given_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: How does it work?
      ///
      /// Locales: en, nl
      static let howDoesItWork = Rswift.StringResource(key: "How does it work?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: If you already have a Me identity and logged into the web-shop, then go to the web-shop and click on 'Authorize device' and enter the code that is visible on this screen.
      ///
      /// Locales: en, nl
      static let ifYouAlreadyHaveAMeIdentityAndLoggedIntoTheWebShopThenGoToTheWebShopAndClickOnAuthorizeDeviceAndEnterTheCodeThatIsVisibleOnThisScreen = Rswift.StringResource(key: "If you already have a Me identity and logged into the web-shop, then go to the web-shop and click on 'Authorize device' and enter the code that is visible on this screen.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Insufficient funds on the voucher
      ///
      /// Locales: en, nl
      static let insufficientFundsOnTheVoucher = Rswift.StringResource(key: "Insufficient funds on the voucher", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Insufficient funds on the voucher. Please, request extra payment of 
      ///
      /// Locales: en, nl
      static let insufficientFundsOnTheVoucherPleaseRequestExtraPaymentOf = Rswift.StringResource(key: "Insufficient funds on the voucher. Please, request extra payment of", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Insufficient funds on the voucher. Please, request extra payment of €%.02f
      ///
      /// Locales: en, nl
      static let insufficientFundsOnTheVoucherPleaseRequestExtraPaymentOf02f = Rswift.StringResource(key: "Insufficient funds on the voucher. Please, request extra payment of €%.02f", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Invalid Email address
      ///
      /// Locales: en, nl
      static let invalidEmailAddress = Rswift.StringResource(key: "Invalid Email address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Klantnummer
      ///
      /// Locales: en, nl
      static let klantnummer = Rswift.StringResource(key: "klantnummer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Let the shopkeeper scan it to make a payment from your voucher.
      ///
      /// Locales: en, nl
      static let letTheShopkeeperScanItToMakeAPaymentFromYourVoucher = Rswift.StringResource(key: "Let the shopkeeper scan it to make a payment from your voucher.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Let the shopkeeper scan it to make a validtion to your record %@.
      ///
      /// Locales: en, nl
      static let letTheShopkeeperScanItToMakeAValidtionToYourRecord = Rswift.StringResource(key: "Let the shopkeeper scan it to make a validtion to your record %@.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Loading...
      ///
      /// Locales: en, nl
      static let loading = Rswift.StringResource(key: "Loading...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Log Out
      ///
      /// Locales: en
      static let logOut = Rswift.StringResource(key: "Log Out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Login code
      ///
      /// Locales: en, nl
      static let loginCode = Rswift.StringResource(key: "Login code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Mail services are not available.
      ///
      /// Locales: en, nl
      static let mailServicesAreNotAvailable = Rswift.StringResource(key: "Mail services are not available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Medical
      ///
      /// Locales: en, nl
      static let medical = Rswift.StringResource(key: "Medical", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: My currencies
      ///
      /// Locales: en, nl
      static let myCurrencies = Rswift.StringResource(key: "My currencies", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: My feedback about the Me app
      ///
      /// Locales: en, nl
      static let myFeedbackAboutTheMeApp = Rswift.StringResource(key: "My feedback about the Me app", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: NO
      ///
      /// Locales: en, nl
      static let nO = Rswift.StringResource(key: "NO", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Net worth
      ///
      /// Locales: en, nl
      static let net_worth = Rswift.StringResource(key: "net_worth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: No Internet Conecction
      ///
      /// Locales: en, nl
      static let noInternetConecction = Rswift.StringResource(key: "No Internet Conecction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: No phone number
      ///
      /// Locales: en, nl
      static let noPhoneNumber = Rswift.StringResource(key: "No phone number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, nl
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Others
      ///
      /// Locales: en, nl
      static let others = Rswift.StringResource(key: "Others", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Paid
      ///
      /// Locales: en, nl
      static let paid = Rswift.StringResource(key: "Paid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Parent
      ///
      /// Locales: en, nl
      static let parent = Rswift.StringResource(key: "parent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Payment succeeded! The processing can take up to 3 business days.
      ///
      /// Locales: en, nl
      static let paymentSucceeded = Rswift.StringResource(key: "Payment succeeded", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Personal
      ///
      /// Locales: en, nl
      static let personal = Rswift.StringResource(key: "Personal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Please confirm the transaction of %@.
      ///
      /// Locales: en, nl
      static let pleaseConfirmTheTransactionOf = Rswift.StringResource(key: "Please confirm the transaction of %@", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Please enter the amount
      ///
      /// Locales: en, nl
      static let pleaseEnterTheAmount = Rswift.StringResource(key: "Please enter the amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Please try to send email again.
      ///
      /// Locales: en, nl
      static let pleaseTryToSendEmailAgain = Rswift.StringResource(key: "Please try to send email again.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Press settings to give an access or cancel to close this window.
      ///
      /// Locales: en, nl
      static let pressSettingsToGiveAnAccessOrCancelToCloseThisWindow = Rswift.StringResource(key: "Press settings to give an access or cancel to close this window.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Primary e-mail
      ///
      /// Locales: en, nl
      static let primary_email = Rswift.StringResource(key: "primary_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Product voucher
      ///
      /// Locales: en, nl
      static let productVoucher = Rswift.StringResource(key: "Product voucher", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Profile
      ///
      /// Locales: en, nl
      static let profile = Rswift.StringResource(key: "Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Property
      ///
      /// Locales: en, nl
      static let property = Rswift.StringResource(key: "Property", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: QR-code was recognized
      ///
      /// Locales: en, nl
      static let scanningSuccessfully = Rswift.StringResource(key: "Scanning successfully!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Question from Me user
      ///
      /// Locales: en, nl
      static let questionFromMeUser = Rswift.StringResource(key: "Question from Me user", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: REQUEST
      ///
      /// Locales: en, nl
      static let requesT = Rswift.StringResource(key: "REQUEST", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Records
      ///
      /// Locales: en, nl
      static let records = Rswift.StringResource(key: "Records", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Relationships
      ///
      /// Locales: en, nl
      static let relationships = Rswift.StringResource(key: "Relationships", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Salary
      ///
      /// Locales: en, nl
      static let base_salary = Rswift.StringResource(key: "base_salary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Search currency
      ///
      /// Locales: en, nl
      static let searchCurrency = Rswift.StringResource(key: "Search currency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Secundary e-mail
      ///
      /// Locales: en, nl
      static let email = Rswift.StringResource(key: "email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Send an e-mail to the provider
      ///
      /// Locales: en, nl
      static let sendAnEMailToTheProvider = Rswift.StringResource(key: "Send an e-mail to the provider", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Send the voucher to your email?
      ///
      /// Locales: en, nl
      static let sendTheVoucherToYourEmail = Rswift.StringResource(key: "Send the voucher to your email?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Set up the login code
      ///
      /// Locales: en, nl
      static let setUpTheLoginCode = Rswift.StringResource(key: "Set up the login code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, nl
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Something went wrong, please try again…
      ///
      /// Locales: en, nl
      static let somethingWentWrongPleaseTryAgain = Rswift.StringResource(key: "Something went wrong, please try again…", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Sorry not enough funds on voucher
      ///
      /// Locales: en, nl
      static let voucherNotHaveEnoughFunds = Rswift.StringResource(key: "Voucher not have enough funds", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Sorry you do not meet the criteria for this voucher
      ///
      /// Locales: en, nl
      static let sorryYouDoNotMeetTheCriteriaForThisVoucher = Rswift.StringResource(key: "Sorry you do not meet the criteria for this voucher", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Spouse
      ///
      /// Locales: en, nl
      static let spouse = Rswift.StringResource(key: "spouse", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Success
      ///
      /// Locales: en, nl
      static let success = Rswift.StringResource(key: "success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Success!
      ///
      /// Locales: en, nl
      static let success_exclamation = Rswift.StringResource(key: "success_exclamation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Tax ID
      ///
      /// Locales: en, nl
      static let tax_id = Rswift.StringResource(key: "tax_id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Telephonenumber
      ///
      /// Locales: en, nl
      static let telephone = Rswift.StringResource(key: "telephone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Test organisation
      ///
      /// Locales: en, nl
      static let test_organization = Rswift.StringResource(key: "test_organization", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Test transaction
      ///
      /// Locales: en, nl
      static let test_transaction = Rswift.StringResource(key: "test_transaction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: The scanner is not supported on this device
      ///
      /// Locales: en, nl
      static let theScannerIsNotSupportedOnThisDevice = Rswift.StringResource(key: "The scanner is not supported on this device", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: The voucher is empty! No transactions can be done.
      ///
      /// Locales: en, nl
      static let theVoucherIsEmptyNoTransactionsCanBeDone = Rswift.StringResource(key: "The voucher is empty! No transactions can be done.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This app is not authorized to use Back Camera
      ///
      /// Locales: en, nl
      static let thisAppIsNotAuthorizedToUseBackCamera = Rswift.StringResource(key: "This app is not authorized to use Back Camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This device in not authorize
      ///
      /// Locales: en, nl
      static let thisDeviceInNotAuthorize = Rswift.StringResource(key: "This device in not authorize", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This email does not exist
      ///
      /// Locales: en, nl
      static let thisEmailDoesNotExist = Rswift.StringResource(key: "This email does not exist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This email is already used
      ///
      /// Locales: en, nl
      static let thisEmailIsAlreadyUsed = Rswift.StringResource(key: "This email is already used", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This is your
      ///
      /// Locales: en, nl
      static let thisIsYour = Rswift.StringResource(key: "This is your", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This is your Voucher’s QR-code.
      ///
      /// Locales: en, nl
      static let thisIsYourVoucherSQRCode = Rswift.StringResource(key: "This is your Voucher’s QR-code.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This is your personal QR code.
      ///
      /// Locales: en, nl
      static let thisIsYourPersonalQRCode = Rswift.StringResource(key: "This is your personal QR code.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This is your vouchers QR-code.
      ///
      /// Locales: en, nl
      static let thisIsYourVouchersQRCode = Rswift.StringResource(key: "This is your vouchers QR-code.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This product voucher is used!
      ///
      /// Locales: en, nl
      static let thisProductVoucherIsUsed = Rswift.StringResource(key: "This product voucher is used!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This voucher expires on 
      ///
      /// Locales: en, nl
      static let thisVoucherExpiresOn = Rswift.StringResource(key: "This voucher expires on ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Transaction
      ///
      /// Locales: en, nl
      static let transaction = Rswift.StringResource(key: "Transaction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Turn off login code
      ///
      /// Locales: en, nl
      static let turnOffLoginCode = Rswift.StringResource(key: "Turn off login code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Turn on Face ID
      ///
      /// Locales: en, nl
      static let turnOnFaceID = Rswift.StringResource(key: "Turn on Face ID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Turn on Touch ID
      ///
      /// Locales: en, nl
      static let turnOnTouchID = Rswift.StringResource(key: "Turn on Touch ID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Unknown QR-code!
      ///
      /// Locales: en, nl
      static let unknownQRCode = Rswift.StringResource(key: "Unknown QR-code!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Use Touch ID
      ///
      /// Locales: en, nl
      static let useTouchID = Rswift.StringResource(key: "Use Touch ID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Use Touch ID to log in?
      ///
      /// Locales: en, nl
      static let useTouchIDToLogIn = Rswift.StringResource(key: "Use Touch ID to log in?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Used
      ///
      /// Locales: en, nl
      static let used = Rswift.StringResource(key: "Used", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Validate
      ///
      /// Locales: en, nl
      static let validate = Rswift.StringResource(key: "Validate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Validation approved.
      ///
      /// Locales: en, nl
      static let validation_approved = Rswift.StringResource(key: "validation_approved", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Validations
      ///
      /// Locales: en, nl
      static let validations = Rswift.StringResource(key: "Validations", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Vouchers
      ///
      /// Locales: en, nl
      static let vouchers = Rswift.StringResource(key: "Vouchers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Warning
      ///
      /// Locales: en, nl
      static let warning = Rswift.StringResource(key: "Warning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Welcome to Me, 
      ///
      /// Locales: en, nl
      static let welcomeToMe = Rswift.StringResource(key: "Welcome to Me, ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: With the Me you can create an identity, receive and use your vouchers.
      ///
      /// Locales: en, nl
      static let withTheMeYouCanCreateAnIdentityReceiveAndUseYourVouchersForMoreInformationPleaseVisitOurWebsiteHttpsZuidhornForusIo = Rswift.StringResource(key: "With the Me you can create an identity, receive and use your vouchers. For more information please visit our website — https://zuidhorn.forus.io", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Would you like to send us your feedback by e-mail?
      ///
      /// Locales: en, nl
      static let wouldYouLikeToSendUsYourFeedbackByEMail = Rswift.StringResource(key: "Would you like to send us your feedback by e-mail?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Wrong passcode, please try again
      ///
      /// Locales: en, nl
      static let wrongPasscodePleaseTryAgain = Rswift.StringResource(key: "Wrong passcode, please try again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: YES
      ///
      /// Locales: en, nl
      static let yeS = Rswift.StringResource(key: "YES", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: You can't scan this voucher. You are not accepted as a provider for the fund that hands out these vouchers.
      ///
      /// Locales: en, nl
      static let youCanTScanThisVoucherYouAreNotAcceptedAsAProviderForTheFundThatHandsOutTheseVouchers = Rswift.StringResource(key: "You can't scan this voucher. You are not accepted as a provider for the fund that hands out these vouchers.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: You sure you wan't to login this device?
      ///
      /// Locales: en, nl
      static let youSureYouWanTToLoginThisDevice = Rswift.StringResource(key: "You sure you wan't to login this device?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Your e-mail address is already used, do you instead want to login using this e-mail address?
      ///
      /// Locales: en, nl
      static let yourEMailAddressIsAlreadyUsedDoYouInsteadWantToLoginUsingThisEMailAddress = Rswift.StringResource(key: "Your e-mail address is already used, do you instead want to login using this e-mail address?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Your session has expired. You are being logged out.
      ///
      /// Locales: en, nl
      static let yourSessionHasExpiredYouAreBeingLoggedOut = Rswift.StringResource(key: "Your session has expired. You are being logged out.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: -voucher in the form of a QR-code
      ///
      /// Locales: en, nl
      static func voucherInTheFormOfAQRCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("voucher in the form of a QR-code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "voucher in the form of a QR-code"
        }

        return NSLocalizedString("voucher in the form of a QR-code", bundle: bundle, comment: "")
      }

      /// en translation: A payment of € 0.01 is too low to be paid out, choose a higher amount.
      ///
      /// Locales: en, nl
      static func aPaymentOf001IsTooLowToBePaidOutChooseAHigherAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("A payment of € 0.01 is too low to be paid out, choose a higher amount.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "A payment of € 0.01 is too low to be paid out, choose a higher amount."
        }

        return NSLocalizedString("A payment of € 0.01 is too low to be paid out, choose a higher amount.", bundle: bundle, comment: "")
      }

      /// en translation: A record has been validated!
      ///
      /// Locales: en, nl
      static func aRecordHasBeenValidated(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("A record has been validated!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "A record has been validated!"
        }

        return NSLocalizedString("A record has been validated!", bundle: bundle, comment: "")
      }

      /// en translation: About Me
      ///
      /// Locales: en, nl
      static func aboutMe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("About Me", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "About Me"
        }

        return NSLocalizedString("About Me", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: en, nl
      static func address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "address"
        }

        return NSLocalizedString("address", bundle: bundle, comment: "")
      }

      /// en translation: Amount of children
      ///
      /// Locales: en, nl
      static func children_nth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("children_nth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "children_nth"
        }

        return NSLocalizedString("children_nth", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to confirm this transaction.
      ///
      /// Locales: en, nl
      static func areYouSureYouWantToConfirmThisTransaction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure you want to confirm this transaction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure you want to confirm this transaction"
        }

        return NSLocalizedString("Are you sure you want to confirm this transaction", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to log out?
      ///
      /// Locales: en, nl
      static func areYouSureYouWantToLogOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure you want to log out?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure you want to log out?"
        }

        return NSLocalizedString("Are you sure you want to log out?", bundle: bundle, comment: "")
      }

      /// en translation: BSN
      ///
      /// Locales: en, nl
      static func bsn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bsn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bsn"
        }

        return NSLocalizedString("bsn", bundle: bundle, comment: "")
      }

      /// en translation: Before we get started, please confirm your email address.
      ///
      /// Locales: en, nl
      static func beforeWeGetStartedPleaseConfirmYourEmailAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Before we get started, please confirm your email address.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Before we get started, please confirm your email address."
        }

        return NSLocalizedString("Before we get started, please confirm your email address.", bundle: bundle, comment: "")
      }

      /// en translation: Business
      ///
      /// Locales: en, nl
      static func business(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Business", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Business"
        }

        return NSLocalizedString("Business", bundle: bundle, comment: "")
      }

      /// en translation: Camera permission request was denied.
      ///
      /// Locales: en, nl
      static func cameraPermissionRequestWasDenied(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Camera permission request was denied.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Camera permission request was denied."
        }

        return NSLocalizedString("Camera permission request was denied.", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, nl
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", bundle: bundle, comment: "")
      }

      /// en translation: Certificates
      ///
      /// Locales: en, nl
      static func certificates(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Certificates", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Certificates"
        }

        return NSLocalizedString("Certificates", bundle: bundle, comment: "")
      }

      /// en translation: Change passcode
      ///
      /// Locales: en, nl
      static func changePasscode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change passcode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change passcode"
        }

        return NSLocalizedString("Change passcode", bundle: bundle, comment: "")
      }

      /// en translation: Children
      ///
      /// Locales: en, nl
      static func children(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("children", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "children"
        }

        return NSLocalizedString("children", bundle: bundle, comment: "")
      }

      /// en translation: Click on the link you received on %@ to continue
      ///
      /// Locales: en, nl
      static func clickOnTheLinkYouReceivedOnToContinue(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Click on the link you received on %@ to continue", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Click on the link you received on %@ to continue"
        }

        let format = NSLocalizedString("Click on the link you received on %@ to continue", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Codes don't match. Please try again
      ///
      /// Locales: en, nl
      static func codesDonTMatchPleaseTryAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Codes don't match. Please try again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Codes don't match. Please try again"
        }

        return NSLocalizedString("Codes don't match. Please try again", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, nl
      static func confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirm"
        }

        return NSLocalizedString("Confirm", bundle: bundle, comment: "")
      }

      /// en translation: Confirm the code
      ///
      /// Locales: en, nl
      static func confirmTheCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirm the code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirm the code"
        }

        return NSLocalizedString("Confirm the code", bundle: bundle, comment: "")
      }

      /// en translation: Confirm the login code by entering it again.
      ///
      /// Locales: en, nl
      static func confirmTheLoginCodeByEnteringItAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirm the login code by entering it again.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirm the login code by entering it again."
        }

        return NSLocalizedString("Confirm the login code by entering it again.", bundle: bundle, comment: "")
      }

      /// en translation: Confirm to go to your email app to send a message to the provider
      ///
      /// Locales: en, nl
      static func confirmToGoToYourEmailAppToSendAMessageToTheProvider(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirm to go to your email app to send a message to the provider", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirm to go to your email app to send a message to the provider"
        }

        return NSLocalizedString("Confirm to go to your email app to send a message to the provider", bundle: bundle, comment: "")
      }

      /// en translation: Confirm transaction
      ///
      /// Locales: en, nl
      static func confirmTransaction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirm transaction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirm transaction"
        }

        return NSLocalizedString("Confirm transaction", bundle: bundle, comment: "")
      }

      /// en translation: Copied to clipboard
      ///
      /// Locales: en, nl
      static func copiedToClipboard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Copied to clipboard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Copied to clipboard"
        }

        return NSLocalizedString("Copied to clipboard", bundle: bundle, comment: "")
      }

      /// en translation: Copy address
      ///
      /// Locales: en, nl
      static func copyAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Copy address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Copy address"
        }

        return NSLocalizedString("Copy address", bundle: bundle, comment: "")
      }

      /// en translation: Create passcode
      ///
      /// Locales: en, nl
      static func createPasscode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Create passcode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Create passcode"
        }

        return NSLocalizedString("Create passcode", bundle: bundle, comment: "")
      }

      /// en translation: Currently maintenance is being done.
      ///
      /// Locales: en, nl
      static func currentlyMaintenanceIsBeingDone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Currently maintenance is being done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Currently maintenance is being done"
        }

        return NSLocalizedString("Currently maintenance is being done", bundle: bundle, comment: "")
      }

      /// en translation: Date of birth
      ///
      /// Locales: en, nl
      static func birth_date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("birth_date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "birth_date"
        }

        return NSLocalizedString("birth_date", bundle: bundle, comment: "")
      }

      /// en translation: Do you want to login instead?
      ///
      /// Locales: en, nl
      static func doYouWantToLoginInstead(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Do you want to login instead?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Do you want to login instead?"
        }

        return NSLocalizedString("Do you want to login instead?", bundle: bundle, comment: "")
      }

      /// en translation: E-mail to me
      ///
      /// Locales: en, nl
      static func eMailToMe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("E-mail to me", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "E-mail to me"
        }

        return NSLocalizedString("E-mail to me", bundle: bundle, comment: "")
      }

      /// en translation: Eligible for Kindpakket 2018
      ///
      /// Locales: en, nl
      static func kindpakket_2018_eligible(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kindpakket_2018_eligible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "kindpakket_2018_eligible"
        }

        return NSLocalizedString("kindpakket_2018_eligible", bundle: bundle, comment: "")
      }

      /// en translation: Eligible for Kindpakket 2019
      ///
      /// Locales: en, nl
      static func kindpakket_2019_eligible(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kindpakket_2019_eligible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "kindpakket_2019_eligible"
        }

        return NSLocalizedString("kindpakket_2019_eligible", bundle: bundle, comment: "")
      }

      /// en translation: Eligible for Meedoenregeling 2018
      ///
      /// Locales: en, nl
      static func meedoenregeling_2018_eligible(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("meedoenregeling_2018_eligible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "meedoenregeling_2018_eligible"
        }

        return NSLocalizedString("meedoenregeling_2018_eligible", bundle: bundle, comment: "")
      }

      /// en translation: Email is empty
      ///
      /// Locales: en, nl
      static func emailIsEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email is empty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email is empty"
        }

        return NSLocalizedString("Email is empty", bundle: bundle, comment: "")
      }

      /// en translation: Enter a new login code
      ///
      /// Locales: en, nl
      static func enterANewLoginCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter a new login code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter a new login code"
        }

        return NSLocalizedString("Enter a new login code", bundle: bundle, comment: "")
      }

      /// en translation: Enter login code
      ///
      /// Locales: en, nl
      static func enterLoginCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter login code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter login code"
        }

        return NSLocalizedString("Enter login code", bundle: bundle, comment: "")
      }

      /// en translation: Enter your login code
      ///
      /// Locales: en, nl
      static func enterYourLoginCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter your login code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter your login code"
        }

        return NSLocalizedString("Enter your login code", bundle: bundle, comment: "")
      }

      /// en translation: Enter your login code to use Face ID
      ///
      /// Locales: en, nl
      static func enterYourLoginCodeToUseFaceID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter your login code to use Face ID", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter your login code to use Face ID"
        }

        return NSLocalizedString("Enter your login code to use Face ID", bundle: bundle, comment: "")
      }

      /// en translation: Enter your old code
      ///
      /// Locales: en, nl
      static func enterYourOldCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter your old code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter your old code"
        }

        return NSLocalizedString("Enter your old code", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: en, nl
      static func error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error"
        }

        return NSLocalizedString("error", bundle: bundle, comment: "")
      }

      /// en translation: Error!
      ///
      /// Locales: en, nl
      static func error_exclamation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_exclamation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_exclamation"
        }

        return NSLocalizedString("error_exclamation", bundle: bundle, comment: "")
      }

      /// en translation: Expired
      ///
      /// Locales: en, nl
      static func expired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Expired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Expired"
        }

        return NSLocalizedString("Expired", bundle: bundle, comment: "")
      }

      /// en translation: Expired session
      ///
      /// Locales: en, nl
      static func expiredSession(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Expired session", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Expired session"
        }

        return NSLocalizedString("Expired session", bundle: bundle, comment: "")
      }

      /// en translation: Family Name
      ///
      /// Locales: en, nl
      static func family_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("family_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "family_name"
        }

        return NSLocalizedString("family_name", bundle: bundle, comment: "")
      }

      /// en translation: Field is empty
      ///
      /// Locales: en, nl
      static func fieldIsEmpty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Field is empty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Field is empty"
        }

        return NSLocalizedString("Field is empty", bundle: bundle, comment: "")
      }

      /// en translation: Field is requierd
      ///
      /// Locales: en, nl
      static func fieldIsRequierd(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Field is requierd", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Field is requierd"
        }

        return NSLocalizedString("Field is requierd", bundle: bundle, comment: "")
      }

      /// en translation: Gender
      ///
      /// Locales: en, nl
      static func gender(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gender", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "gender"
        }

        return NSLocalizedString("gender", bundle: bundle, comment: "")
      }

      /// en translation: Given name
      ///
      /// Locales: en, nl
      static func given_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("given_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "given_name"
        }

        return NSLocalizedString("given_name", bundle: bundle, comment: "")
      }

      /// en translation: How does it work?
      ///
      /// Locales: en, nl
      static func howDoesItWork(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("How does it work?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "How does it work?"
        }

        return NSLocalizedString("How does it work?", bundle: bundle, comment: "")
      }

      /// en translation: If you already have a Me identity and logged into the web-shop, then go to the web-shop and click on 'Authorize device' and enter the code that is visible on this screen.
      ///
      /// Locales: en, nl
      static func ifYouAlreadyHaveAMeIdentityAndLoggedIntoTheWebShopThenGoToTheWebShopAndClickOnAuthorizeDeviceAndEnterTheCodeThatIsVisibleOnThisScreen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("If you already have a Me identity and logged into the web-shop, then go to the web-shop and click on 'Authorize device' and enter the code that is visible on this screen.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "If you already have a Me identity and logged into the web-shop, then go to the web-shop and click on 'Authorize device' and enter the code that is visible on this screen."
        }

        return NSLocalizedString("If you already have a Me identity and logged into the web-shop, then go to the web-shop and click on 'Authorize device' and enter the code that is visible on this screen.", bundle: bundle, comment: "")
      }

      /// en translation: Insufficient funds on the voucher
      ///
      /// Locales: en, nl
      static func insufficientFundsOnTheVoucher(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Insufficient funds on the voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Insufficient funds on the voucher"
        }

        return NSLocalizedString("Insufficient funds on the voucher", bundle: bundle, comment: "")
      }

      /// en translation: Insufficient funds on the voucher. Please, request extra payment of 
      ///
      /// Locales: en, nl
      static func insufficientFundsOnTheVoucherPleaseRequestExtraPaymentOf(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Insufficient funds on the voucher. Please, request extra payment of", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Insufficient funds on the voucher. Please, request extra payment of"
        }

        let format = NSLocalizedString("Insufficient funds on the voucher. Please, request extra payment of", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Insufficient funds on the voucher. Please, request extra payment of €%.02f
      ///
      /// Locales: en, nl
      static func insufficientFundsOnTheVoucherPleaseRequestExtraPaymentOf02f(_ value1: Double, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Insufficient funds on the voucher. Please, request extra payment of €%.02f", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Insufficient funds on the voucher. Please, request extra payment of €%.02f"
        }

        let format = NSLocalizedString("Insufficient funds on the voucher. Please, request extra payment of €%.02f", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Invalid Email address
      ///
      /// Locales: en, nl
      static func invalidEmailAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Invalid Email address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Invalid Email address"
        }

        return NSLocalizedString("Invalid Email address", bundle: bundle, comment: "")
      }

      /// en translation: Klantnummer
      ///
      /// Locales: en, nl
      static func klantnummer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("klantnummer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "klantnummer"
        }

        return NSLocalizedString("klantnummer", bundle: bundle, comment: "")
      }

      /// en translation: Let the shopkeeper scan it to make a payment from your voucher.
      ///
      /// Locales: en, nl
      static func letTheShopkeeperScanItToMakeAPaymentFromYourVoucher(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Let the shopkeeper scan it to make a payment from your voucher.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Let the shopkeeper scan it to make a payment from your voucher."
        }

        return NSLocalizedString("Let the shopkeeper scan it to make a payment from your voucher.", bundle: bundle, comment: "")
      }

      /// en translation: Let the shopkeeper scan it to make a validtion to your record %@.
      ///
      /// Locales: en, nl
      static func letTheShopkeeperScanItToMakeAValidtionToYourRecord(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Let the shopkeeper scan it to make a validtion to your record %@.", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Let the shopkeeper scan it to make a validtion to your record %@."
        }

        let format = NSLocalizedString("Let the shopkeeper scan it to make a validtion to your record %@.", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Loading...
      ///
      /// Locales: en, nl
      static func loading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Loading...", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Loading..."
        }

        return NSLocalizedString("Loading...", bundle: bundle, comment: "")
      }

      /// en translation: Log Out
      ///
      /// Locales: en
      static func logOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Log Out", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Log Out"
        }

        return NSLocalizedString("Log Out", bundle: bundle, comment: "")
      }

      /// en translation: Login code
      ///
      /// Locales: en, nl
      static func loginCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login code"
        }

        return NSLocalizedString("Login code", bundle: bundle, comment: "")
      }

      /// en translation: Mail services are not available.
      ///
      /// Locales: en, nl
      static func mailServicesAreNotAvailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mail services are not available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mail services are not available"
        }

        return NSLocalizedString("Mail services are not available", bundle: bundle, comment: "")
      }

      /// en translation: Medical
      ///
      /// Locales: en, nl
      static func medical(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Medical", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Medical"
        }

        return NSLocalizedString("Medical", bundle: bundle, comment: "")
      }

      /// en translation: My currencies
      ///
      /// Locales: en, nl
      static func myCurrencies(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My currencies", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My currencies"
        }

        return NSLocalizedString("My currencies", bundle: bundle, comment: "")
      }

      /// en translation: My feedback about the Me app
      ///
      /// Locales: en, nl
      static func myFeedbackAboutTheMeApp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My feedback about the Me app", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My feedback about the Me app"
        }

        return NSLocalizedString("My feedback about the Me app", bundle: bundle, comment: "")
      }

      /// en translation: NO
      ///
      /// Locales: en, nl
      static func nO(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NO", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NO"
        }

        return NSLocalizedString("NO", bundle: bundle, comment: "")
      }

      /// en translation: Net worth
      ///
      /// Locales: en, nl
      static func net_worth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("net_worth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "net_worth"
        }

        return NSLocalizedString("net_worth", bundle: bundle, comment: "")
      }

      /// en translation: No Internet Conecction
      ///
      /// Locales: en, nl
      static func noInternetConecction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Internet Conecction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Internet Conecction"
        }

        return NSLocalizedString("No Internet Conecction", bundle: bundle, comment: "")
      }

      /// en translation: No phone number
      ///
      /// Locales: en, nl
      static func noPhoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No phone number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No phone number"
        }

        return NSLocalizedString("No phone number", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, nl
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ok"
        }

        return NSLocalizedString("ok", bundle: bundle, comment: "")
      }

      /// en translation: Others
      ///
      /// Locales: en, nl
      static func others(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Others", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Others"
        }

        return NSLocalizedString("Others", bundle: bundle, comment: "")
      }

      /// en translation: Paid
      ///
      /// Locales: en, nl
      static func paid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Paid", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Paid"
        }

        return NSLocalizedString("Paid", bundle: bundle, comment: "")
      }

      /// en translation: Parent
      ///
      /// Locales: en, nl
      static func parent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("parent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "parent"
        }

        return NSLocalizedString("parent", bundle: bundle, comment: "")
      }

      /// en translation: Payment succeeded! The processing can take up to 3 business days.
      ///
      /// Locales: en, nl
      static func paymentSucceeded(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Payment succeeded", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Payment succeeded"
        }

        return NSLocalizedString("Payment succeeded", bundle: bundle, comment: "")
      }

      /// en translation: Personal
      ///
      /// Locales: en, nl
      static func personal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Personal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Personal"
        }

        return NSLocalizedString("Personal", bundle: bundle, comment: "")
      }

      /// en translation: Please confirm the transaction of %@.
      ///
      /// Locales: en, nl
      static func pleaseConfirmTheTransactionOf(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Please confirm the transaction of %@", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please confirm the transaction of %@"
        }

        let format = NSLocalizedString("Please confirm the transaction of %@", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Please enter the amount
      ///
      /// Locales: en, nl
      static func pleaseEnterTheAmount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the amount"
        }

        return NSLocalizedString("Please enter the amount", bundle: bundle, comment: "")
      }

      /// en translation: Please try to send email again.
      ///
      /// Locales: en, nl
      static func pleaseTryToSendEmailAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please try to send email again.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please try to send email again."
        }

        return NSLocalizedString("Please try to send email again.", bundle: bundle, comment: "")
      }

      /// en translation: Press settings to give an access or cancel to close this window.
      ///
      /// Locales: en, nl
      static func pressSettingsToGiveAnAccessOrCancelToCloseThisWindow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Press settings to give an access or cancel to close this window.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Press settings to give an access or cancel to close this window."
        }

        return NSLocalizedString("Press settings to give an access or cancel to close this window.", bundle: bundle, comment: "")
      }

      /// en translation: Primary e-mail
      ///
      /// Locales: en, nl
      static func primary_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("primary_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "primary_email"
        }

        return NSLocalizedString("primary_email", bundle: bundle, comment: "")
      }

      /// en translation: Product voucher
      ///
      /// Locales: en, nl
      static func productVoucher(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Product voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Product voucher"
        }

        return NSLocalizedString("Product voucher", bundle: bundle, comment: "")
      }

      /// en translation: Profile
      ///
      /// Locales: en, nl
      static func profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile"
        }

        return NSLocalizedString("Profile", bundle: bundle, comment: "")
      }

      /// en translation: Property
      ///
      /// Locales: en, nl
      static func property(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Property", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Property"
        }

        return NSLocalizedString("Property", bundle: bundle, comment: "")
      }

      /// en translation: QR-code was recognized
      ///
      /// Locales: en, nl
      static func scanningSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Scanning successfully!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Scanning successfully!"
        }

        return NSLocalizedString("Scanning successfully!", bundle: bundle, comment: "")
      }

      /// en translation: Question from Me user
      ///
      /// Locales: en, nl
      static func questionFromMeUser(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Question from Me user", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Question from Me user"
        }

        return NSLocalizedString("Question from Me user", bundle: bundle, comment: "")
      }

      /// en translation: REQUEST
      ///
      /// Locales: en, nl
      static func requesT(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("REQUEST", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "REQUEST"
        }

        return NSLocalizedString("REQUEST", bundle: bundle, comment: "")
      }

      /// en translation: Records
      ///
      /// Locales: en, nl
      static func records(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Records", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Records"
        }

        return NSLocalizedString("Records", bundle: bundle, comment: "")
      }

      /// en translation: Relationships
      ///
      /// Locales: en, nl
      static func relationships(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Relationships", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Relationships"
        }

        return NSLocalizedString("Relationships", bundle: bundle, comment: "")
      }

      /// en translation: Salary
      ///
      /// Locales: en, nl
      static func base_salary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("base_salary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "base_salary"
        }

        return NSLocalizedString("base_salary", bundle: bundle, comment: "")
      }

      /// en translation: Search currency
      ///
      /// Locales: en, nl
      static func searchCurrency(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search currency", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search currency"
        }

        return NSLocalizedString("Search currency", bundle: bundle, comment: "")
      }

      /// en translation: Secundary e-mail
      ///
      /// Locales: en, nl
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email"
        }

        return NSLocalizedString("email", bundle: bundle, comment: "")
      }

      /// en translation: Send an e-mail to the provider
      ///
      /// Locales: en, nl
      static func sendAnEMailToTheProvider(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Send an e-mail to the provider", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Send an e-mail to the provider"
        }

        return NSLocalizedString("Send an e-mail to the provider", bundle: bundle, comment: "")
      }

      /// en translation: Send the voucher to your email?
      ///
      /// Locales: en, nl
      static func sendTheVoucherToYourEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Send the voucher to your email?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Send the voucher to your email?"
        }

        return NSLocalizedString("Send the voucher to your email?", bundle: bundle, comment: "")
      }

      /// en translation: Set up the login code
      ///
      /// Locales: en, nl
      static func setUpTheLoginCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Set up the login code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Set up the login code"
        }

        return NSLocalizedString("Set up the login code", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, nl
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings"
        }

        return NSLocalizedString("Settings", bundle: bundle, comment: "")
      }

      /// en translation: Something went wrong, please try again…
      ///
      /// Locales: en, nl
      static func somethingWentWrongPleaseTryAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Something went wrong, please try again…", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Something went wrong, please try again…"
        }

        return NSLocalizedString("Something went wrong, please try again…", bundle: bundle, comment: "")
      }

      /// en translation: Sorry not enough funds on voucher
      ///
      /// Locales: en, nl
      static func voucherNotHaveEnoughFunds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Voucher not have enough funds", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Voucher not have enough funds"
        }

        return NSLocalizedString("Voucher not have enough funds", bundle: bundle, comment: "")
      }

      /// en translation: Sorry you do not meet the criteria for this voucher
      ///
      /// Locales: en, nl
      static func sorryYouDoNotMeetTheCriteriaForThisVoucher(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sorry you do not meet the criteria for this voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sorry you do not meet the criteria for this voucher"
        }

        return NSLocalizedString("Sorry you do not meet the criteria for this voucher", bundle: bundle, comment: "")
      }

      /// en translation: Spouse
      ///
      /// Locales: en, nl
      static func spouse(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spouse", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "spouse"
        }

        return NSLocalizedString("spouse", bundle: bundle, comment: "")
      }

      /// en translation: Success
      ///
      /// Locales: en, nl
      static func success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("success", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "success"
        }

        return NSLocalizedString("success", bundle: bundle, comment: "")
      }

      /// en translation: Success!
      ///
      /// Locales: en, nl
      static func success_exclamation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("success_exclamation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "success_exclamation"
        }

        return NSLocalizedString("success_exclamation", bundle: bundle, comment: "")
      }

      /// en translation: Tax ID
      ///
      /// Locales: en, nl
      static func tax_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tax_id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tax_id"
        }

        return NSLocalizedString("tax_id", bundle: bundle, comment: "")
      }

      /// en translation: Telephonenumber
      ///
      /// Locales: en, nl
      static func telephone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("telephone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "telephone"
        }

        return NSLocalizedString("telephone", bundle: bundle, comment: "")
      }

      /// en translation: Test organisation
      ///
      /// Locales: en, nl
      static func test_organization(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("test_organization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "test_organization"
        }

        return NSLocalizedString("test_organization", bundle: bundle, comment: "")
      }

      /// en translation: Test transaction
      ///
      /// Locales: en, nl
      static func test_transaction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("test_transaction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "test_transaction"
        }

        return NSLocalizedString("test_transaction", bundle: bundle, comment: "")
      }

      /// en translation: The scanner is not supported on this device
      ///
      /// Locales: en, nl
      static func theScannerIsNotSupportedOnThisDevice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("The scanner is not supported on this device", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "The scanner is not supported on this device"
        }

        return NSLocalizedString("The scanner is not supported on this device", bundle: bundle, comment: "")
      }

      /// en translation: The voucher is empty! No transactions can be done.
      ///
      /// Locales: en, nl
      static func theVoucherIsEmptyNoTransactionsCanBeDone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("The voucher is empty! No transactions can be done.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "The voucher is empty! No transactions can be done."
        }

        return NSLocalizedString("The voucher is empty! No transactions can be done.", bundle: bundle, comment: "")
      }

      /// en translation: This app is not authorized to use Back Camera
      ///
      /// Locales: en, nl
      static func thisAppIsNotAuthorizedToUseBackCamera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This app is not authorized to use Back Camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This app is not authorized to use Back Camera"
        }

        return NSLocalizedString("This app is not authorized to use Back Camera", bundle: bundle, comment: "")
      }

      /// en translation: This device in not authorize
      ///
      /// Locales: en, nl
      static func thisDeviceInNotAuthorize(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This device in not authorize", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This device in not authorize"
        }

        return NSLocalizedString("This device in not authorize", bundle: bundle, comment: "")
      }

      /// en translation: This email does not exist
      ///
      /// Locales: en, nl
      static func thisEmailDoesNotExist(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This email does not exist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This email does not exist"
        }

        return NSLocalizedString("This email does not exist", bundle: bundle, comment: "")
      }

      /// en translation: This email is already used
      ///
      /// Locales: en, nl
      static func thisEmailIsAlreadyUsed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This email is already used", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This email is already used"
        }

        return NSLocalizedString("This email is already used", bundle: bundle, comment: "")
      }

      /// en translation: This is your
      ///
      /// Locales: en, nl
      static func thisIsYour(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This is your", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This is your"
        }

        return NSLocalizedString("This is your", bundle: bundle, comment: "")
      }

      /// en translation: This is your Voucher’s QR-code.
      ///
      /// Locales: en, nl
      static func thisIsYourVoucherSQRCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This is your Voucher’s QR-code.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This is your Voucher’s QR-code."
        }

        return NSLocalizedString("This is your Voucher’s QR-code.", bundle: bundle, comment: "")
      }

      /// en translation: This is your personal QR code.
      ///
      /// Locales: en, nl
      static func thisIsYourPersonalQRCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This is your personal QR code.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This is your personal QR code."
        }

        return NSLocalizedString("This is your personal QR code.", bundle: bundle, comment: "")
      }

      /// en translation: This is your vouchers QR-code.
      ///
      /// Locales: en, nl
      static func thisIsYourVouchersQRCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This is your vouchers QR-code.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This is your vouchers QR-code."
        }

        return NSLocalizedString("This is your vouchers QR-code.", bundle: bundle, comment: "")
      }

      /// en translation: This product voucher is used!
      ///
      /// Locales: en, nl
      static func thisProductVoucherIsUsed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This product voucher is used!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This product voucher is used!"
        }

        return NSLocalizedString("This product voucher is used!", bundle: bundle, comment: "")
      }

      /// en translation: This voucher expires on 
      ///
      /// Locales: en, nl
      static func thisVoucherExpiresOn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This voucher expires on ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This voucher expires on "
        }

        return NSLocalizedString("This voucher expires on ", bundle: bundle, comment: "")
      }

      /// en translation: Transaction
      ///
      /// Locales: en, nl
      static func transaction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Transaction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Transaction"
        }

        return NSLocalizedString("Transaction", bundle: bundle, comment: "")
      }

      /// en translation: Turn off login code
      ///
      /// Locales: en, nl
      static func turnOffLoginCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Turn off login code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Turn off login code"
        }

        return NSLocalizedString("Turn off login code", bundle: bundle, comment: "")
      }

      /// en translation: Turn on Face ID
      ///
      /// Locales: en, nl
      static func turnOnFaceID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Turn on Face ID", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Turn on Face ID"
        }

        return NSLocalizedString("Turn on Face ID", bundle: bundle, comment: "")
      }

      /// en translation: Turn on Touch ID
      ///
      /// Locales: en, nl
      static func turnOnTouchID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Turn on Touch ID", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Turn on Touch ID"
        }

        return NSLocalizedString("Turn on Touch ID", bundle: bundle, comment: "")
      }

      /// en translation: Unknown QR-code!
      ///
      /// Locales: en, nl
      static func unknownQRCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unknown QR-code!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Unknown QR-code!"
        }

        return NSLocalizedString("Unknown QR-code!", bundle: bundle, comment: "")
      }

      /// en translation: Use Touch ID
      ///
      /// Locales: en, nl
      static func useTouchID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Use Touch ID", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Use Touch ID"
        }

        return NSLocalizedString("Use Touch ID", bundle: bundle, comment: "")
      }

      /// en translation: Use Touch ID to log in?
      ///
      /// Locales: en, nl
      static func useTouchIDToLogIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Use Touch ID to log in?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Use Touch ID to log in?"
        }

        return NSLocalizedString("Use Touch ID to log in?", bundle: bundle, comment: "")
      }

      /// en translation: Used
      ///
      /// Locales: en, nl
      static func used(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Used", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Used"
        }

        return NSLocalizedString("Used", bundle: bundle, comment: "")
      }

      /// en translation: Validate
      ///
      /// Locales: en, nl
      static func validate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Validate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Validate"
        }

        return NSLocalizedString("Validate", bundle: bundle, comment: "")
      }

      /// en translation: Validation approved.
      ///
      /// Locales: en, nl
      static func validation_approved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validation_approved", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validation_approved"
        }

        return NSLocalizedString("validation_approved", bundle: bundle, comment: "")
      }

      /// en translation: Validations
      ///
      /// Locales: en, nl
      static func validations(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Validations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Validations"
        }

        return NSLocalizedString("Validations", bundle: bundle, comment: "")
      }

      /// en translation: Vouchers
      ///
      /// Locales: en, nl
      static func vouchers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Vouchers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Vouchers"
        }

        return NSLocalizedString("Vouchers", bundle: bundle, comment: "")
      }

      /// en translation: Warning
      ///
      /// Locales: en, nl
      static func warning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Warning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Warning"
        }

        return NSLocalizedString("Warning", bundle: bundle, comment: "")
      }

      /// en translation: Welcome to Me, 
      ///
      /// Locales: en, nl
      static func welcomeToMe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Welcome to Me, ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Welcome to Me, "
        }

        return NSLocalizedString("Welcome to Me, ", bundle: bundle, comment: "")
      }

      /// en translation: With the Me you can create an identity, receive and use your vouchers.
      ///
      /// Locales: en, nl
      static func withTheMeYouCanCreateAnIdentityReceiveAndUseYourVouchersForMoreInformationPleaseVisitOurWebsiteHttpsZuidhornForusIo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("With the Me you can create an identity, receive and use your vouchers. For more information please visit our website — https://zuidhorn.forus.io", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "With the Me you can create an identity, receive and use your vouchers. For more information please visit our website — https://zuidhorn.forus.io"
        }

        return NSLocalizedString("With the Me you can create an identity, receive and use your vouchers. For more information please visit our website — https://zuidhorn.forus.io", bundle: bundle, comment: "")
      }

      /// en translation: Would you like to send us your feedback by e-mail?
      ///
      /// Locales: en, nl
      static func wouldYouLikeToSendUsYourFeedbackByEMail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Would you like to send us your feedback by e-mail?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Would you like to send us your feedback by e-mail?"
        }

        return NSLocalizedString("Would you like to send us your feedback by e-mail?", bundle: bundle, comment: "")
      }

      /// en translation: Wrong passcode, please try again
      ///
      /// Locales: en, nl
      static func wrongPasscodePleaseTryAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wrong passcode, please try again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wrong passcode, please try again"
        }

        return NSLocalizedString("Wrong passcode, please try again", bundle: bundle, comment: "")
      }

      /// en translation: YES
      ///
      /// Locales: en, nl
      static func yeS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YES", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "YES"
        }

        return NSLocalizedString("YES", bundle: bundle, comment: "")
      }

      /// en translation: You can't scan this voucher. You are not accepted as a provider for the fund that hands out these vouchers.
      ///
      /// Locales: en, nl
      static func youCanTScanThisVoucherYouAreNotAcceptedAsAProviderForTheFundThatHandsOutTheseVouchers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You can't scan this voucher. You are not accepted as a provider for the fund that hands out these vouchers.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You can't scan this voucher. You are not accepted as a provider for the fund that hands out these vouchers."
        }

        return NSLocalizedString("You can't scan this voucher. You are not accepted as a provider for the fund that hands out these vouchers.", bundle: bundle, comment: "")
      }

      /// en translation: You sure you wan't to login this device?
      ///
      /// Locales: en, nl
      static func youSureYouWanTToLoginThisDevice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You sure you wan't to login this device?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You sure you wan't to login this device?"
        }

        return NSLocalizedString("You sure you wan't to login this device?", bundle: bundle, comment: "")
      }

      /// en translation: Your e-mail address is already used, do you instead want to login using this e-mail address?
      ///
      /// Locales: en, nl
      static func yourEMailAddressIsAlreadyUsedDoYouInsteadWantToLoginUsingThisEMailAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your e-mail address is already used, do you instead want to login using this e-mail address?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your e-mail address is already used, do you instead want to login using this e-mail address?"
        }

        return NSLocalizedString("Your e-mail address is already used, do you instead want to login using this e-mail address?", bundle: bundle, comment: "")
      }

      /// en translation: Your session has expired. You are being logged out.
      ///
      /// Locales: en, nl
      static func yourSessionHasExpiredYouAreBeingLoggedOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your session has expired. You are being logged out.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your session has expired. You are being logged out."
        }

        return NSLocalizedString("Your session has expired. You are being logged out.", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.loginQRAndCodeViewController` struct is generated, and contains static references to 13 localization keys.
    struct loginQRAndCodeViewController {
      /// en translation: ADD ANOTHER DEVICE
      ///
      /// Locales: en, nl
      static let dcaVc6V9NormalTitle = Rswift.StringResource(key: "DCA-Vc-6V9.normalTitle", tableName: "LoginQRAndCodeViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Authorization code.
      ///
      /// Locales: en, nl
      static let nOlFgXzGText = Rswift.StringResource(key: "nOl-fg-xzG.text", tableName: "LoginQRAndCodeViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: LOG IN BY E-MAIL
      ///
      /// Locales: en, nl
      static let waPs2DbNormalTitle = Rswift.StringResource(key: "8Wa-ps-2Db.normalTitle", tableName: "LoginQRAndCodeViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Log in
      ///
      /// Locales: en, nl
      static let t4Jt651Text = Rswift.StringResource(key: "0T4-Jt-651.text", tableName: "LoginQRAndCodeViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Log in to the webshop, click on your profile, then authorize device and enter this code.
      ///
      /// Locales: en, nl
      static let feTyMqbText = Rswift.StringResource(key: "3FE-Ty-mqb.text", tableName: "LoginQRAndCodeViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Me
      ///
      /// Locales: en, nl
      static let xytDH3coText = Rswift.StringResource(key: "Xyt-DH-3co.text", tableName: "LoginQRAndCodeViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: QR-CODE
      ///
      /// Locales: en, nl
      static let wLz4HL5IText = Rswift.StringResource(key: "wLz-4H-L5I.text", tableName: "LoginQRAndCodeViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Scan this QR-Code with a device you have already logged into.
      ///
      /// Locales: en, nl
      static let cqbST7HSText = Rswift.StringResource(key: "cqb-ST-7HS.text", tableName: "LoginQRAndCodeViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: • 
      ///
      /// Locales: en, nl
      static let fVpMwKdPText = Rswift.StringResource(key: "fVp-mw-kdP.text", tableName: "LoginQRAndCodeViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: • 
      ///
      /// Locales: en, nl
      static let qqiEhAdxText = Rswift.StringResource(key: "qqi-eh-adx.text", tableName: "LoginQRAndCodeViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: • 
      ///
      /// Locales: en, nl
      static let sTDAl3dfText = Rswift.StringResource(key: "sTD-Al-3df.text", tableName: "LoginQRAndCodeViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: • 
      ///
      /// Locales: en, nl
      static let sy8YgYeKText = Rswift.StringResource(key: "sy8-Yg-yeK.text", tableName: "LoginQRAndCodeViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: • 
      ///
      /// Locales: en, nl
      static let vdhDoXjnText = Rswift.StringResource(key: "VDH-do-xjn.text", tableName: "LoginQRAndCodeViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: ADD ANOTHER DEVICE
      ///
      /// Locales: en, nl
      static func dcaVc6V9NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DCA-Vc-6V9.normalTitle", tableName: "LoginQRAndCodeViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LoginQRAndCodeViewController", preferredLanguages: preferredLanguages) else {
          return "DCA-Vc-6V9.normalTitle"
        }

        return NSLocalizedString("DCA-Vc-6V9.normalTitle", tableName: "LoginQRAndCodeViewController", bundle: bundle, comment: "")
      }

      /// en translation: Authorization code.
      ///
      /// Locales: en, nl
      static func nOlFgXzGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nOl-fg-xzG.text", tableName: "LoginQRAndCodeViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LoginQRAndCodeViewController", preferredLanguages: preferredLanguages) else {
          return "nOl-fg-xzG.text"
        }

        return NSLocalizedString("nOl-fg-xzG.text", tableName: "LoginQRAndCodeViewController", bundle: bundle, comment: "")
      }

      /// en translation: LOG IN BY E-MAIL
      ///
      /// Locales: en, nl
      static func waPs2DbNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8Wa-ps-2Db.normalTitle", tableName: "LoginQRAndCodeViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LoginQRAndCodeViewController", preferredLanguages: preferredLanguages) else {
          return "8Wa-ps-2Db.normalTitle"
        }

        return NSLocalizedString("8Wa-ps-2Db.normalTitle", tableName: "LoginQRAndCodeViewController", bundle: bundle, comment: "")
      }

      /// en translation: Log in
      ///
      /// Locales: en, nl
      static func t4Jt651Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0T4-Jt-651.text", tableName: "LoginQRAndCodeViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LoginQRAndCodeViewController", preferredLanguages: preferredLanguages) else {
          return "0T4-Jt-651.text"
        }

        return NSLocalizedString("0T4-Jt-651.text", tableName: "LoginQRAndCodeViewController", bundle: bundle, comment: "")
      }

      /// en translation: Log in to the webshop, click on your profile, then authorize device and enter this code.
      ///
      /// Locales: en, nl
      static func feTyMqbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3FE-Ty-mqb.text", tableName: "LoginQRAndCodeViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LoginQRAndCodeViewController", preferredLanguages: preferredLanguages) else {
          return "3FE-Ty-mqb.text"
        }

        return NSLocalizedString("3FE-Ty-mqb.text", tableName: "LoginQRAndCodeViewController", bundle: bundle, comment: "")
      }

      /// en translation: Me
      ///
      /// Locales: en, nl
      static func xytDH3coText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Xyt-DH-3co.text", tableName: "LoginQRAndCodeViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LoginQRAndCodeViewController", preferredLanguages: preferredLanguages) else {
          return "Xyt-DH-3co.text"
        }

        return NSLocalizedString("Xyt-DH-3co.text", tableName: "LoginQRAndCodeViewController", bundle: bundle, comment: "")
      }

      /// en translation: QR-CODE
      ///
      /// Locales: en, nl
      static func wLz4HL5IText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wLz-4H-L5I.text", tableName: "LoginQRAndCodeViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LoginQRAndCodeViewController", preferredLanguages: preferredLanguages) else {
          return "wLz-4H-L5I.text"
        }

        return NSLocalizedString("wLz-4H-L5I.text", tableName: "LoginQRAndCodeViewController", bundle: bundle, comment: "")
      }

      /// en translation: Scan this QR-Code with a device you have already logged into.
      ///
      /// Locales: en, nl
      static func cqbST7HSText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cqb-ST-7HS.text", tableName: "LoginQRAndCodeViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LoginQRAndCodeViewController", preferredLanguages: preferredLanguages) else {
          return "cqb-ST-7HS.text"
        }

        return NSLocalizedString("cqb-ST-7HS.text", tableName: "LoginQRAndCodeViewController", bundle: bundle, comment: "")
      }

      /// en translation: • 
      ///
      /// Locales: en, nl
      static func fVpMwKdPText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fVp-mw-kdP.text", tableName: "LoginQRAndCodeViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LoginQRAndCodeViewController", preferredLanguages: preferredLanguages) else {
          return "fVp-mw-kdP.text"
        }

        return NSLocalizedString("fVp-mw-kdP.text", tableName: "LoginQRAndCodeViewController", bundle: bundle, comment: "")
      }

      /// en translation: • 
      ///
      /// Locales: en, nl
      static func qqiEhAdxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qqi-eh-adx.text", tableName: "LoginQRAndCodeViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LoginQRAndCodeViewController", preferredLanguages: preferredLanguages) else {
          return "qqi-eh-adx.text"
        }

        return NSLocalizedString("qqi-eh-adx.text", tableName: "LoginQRAndCodeViewController", bundle: bundle, comment: "")
      }

      /// en translation: • 
      ///
      /// Locales: en, nl
      static func sTDAl3dfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sTD-Al-3df.text", tableName: "LoginQRAndCodeViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LoginQRAndCodeViewController", preferredLanguages: preferredLanguages) else {
          return "sTD-Al-3df.text"
        }

        return NSLocalizedString("sTD-Al-3df.text", tableName: "LoginQRAndCodeViewController", bundle: bundle, comment: "")
      }

      /// en translation: • 
      ///
      /// Locales: en, nl
      static func sy8YgYeKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sy8-Yg-yeK.text", tableName: "LoginQRAndCodeViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LoginQRAndCodeViewController", preferredLanguages: preferredLanguages) else {
          return "sy8-Yg-yeK.text"
        }

        return NSLocalizedString("sy8-Yg-yeK.text", tableName: "LoginQRAndCodeViewController", bundle: bundle, comment: "")
      }

      /// en translation: • 
      ///
      /// Locales: en, nl
      static func vdhDoXjnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("VDH-do-xjn.text", tableName: "LoginQRAndCodeViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LoginQRAndCodeViewController", preferredLanguages: preferredLanguages) else {
          return "VDH-do-xjn.text"
        }

        return NSLocalizedString("VDH-do-xjn.text", tableName: "LoginQRAndCodeViewController", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.mCrashConfirmViewController` struct is generated, and contains static references to 4 localization keys.
    struct mCrashConfirmViewController {
      /// en translation: CANCEL
      ///
      /// Locales: en, nl
      static let ykIIFA72NormalTitle = Rswift.StringResource(key: "YkI-iF-A72.normalTitle", tableName: "MCrashConfirmViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: CONFIRM
      ///
      /// Locales: en, nl
      static let wuQY9OwWNormalTitle = Rswift.StringResource(key: "wuQ-y9-OwW.normalTitle", tableName: "MCrashConfirmViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Send crash reports
      ///
      /// Locales: en, nl
      static let gNBMvYw2Text = Rswift.StringResource(key: "gNB-Mv-yw2.text", tableName: "MCrashConfirmViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: We want our app to give you best user experience. If crash happens, let us know your device id, so our support can contact you directly and solve the problem.
      ///
      /// Locales: en, nl
      static let wos4IFQlText = Rswift.StringResource(key: "wos-4I-fQl.text", tableName: "MCrashConfirmViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: CANCEL
      ///
      /// Locales: en, nl
      static func ykIIFA72NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YkI-iF-A72.normalTitle", tableName: "MCrashConfirmViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MCrashConfirmViewController", preferredLanguages: preferredLanguages) else {
          return "YkI-iF-A72.normalTitle"
        }

        return NSLocalizedString("YkI-iF-A72.normalTitle", tableName: "MCrashConfirmViewController", bundle: bundle, comment: "")
      }

      /// en translation: CONFIRM
      ///
      /// Locales: en, nl
      static func wuQY9OwWNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wuQ-y9-OwW.normalTitle", tableName: "MCrashConfirmViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MCrashConfirmViewController", preferredLanguages: preferredLanguages) else {
          return "wuQ-y9-OwW.normalTitle"
        }

        return NSLocalizedString("wuQ-y9-OwW.normalTitle", tableName: "MCrashConfirmViewController", bundle: bundle, comment: "")
      }

      /// en translation: Send crash reports
      ///
      /// Locales: en, nl
      static func gNBMvYw2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gNB-Mv-yw2.text", tableName: "MCrashConfirmViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MCrashConfirmViewController", preferredLanguages: preferredLanguages) else {
          return "gNB-Mv-yw2.text"
        }

        return NSLocalizedString("gNB-Mv-yw2.text", tableName: "MCrashConfirmViewController", bundle: bundle, comment: "")
      }

      /// en translation: We want our app to give you best user experience. If crash happens, let us know your device id, so our support can contact you directly and solve the problem.
      ///
      /// Locales: en, nl
      static func wos4IFQlText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wos-4I-fQl.text", tableName: "MCrashConfirmViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "MCrashConfirmViewController", preferredLanguages: preferredLanguages) else {
          return "wos-4I-fQl.text"
        }

        return NSLocalizedString("wos-4I-fQl.text", tableName: "MCrashConfirmViewController", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 16 localization keys.
    struct main {
      /// en translation: 18 tagen geldig
      ///
      /// Locales: nl, en
      static let zdlu61tpText = Rswift.StringResource(key: "ZDL-U6-1tp.text", tableName: "Main", bundle: R.hostingBundle, locales: ["nl", "en"], comment: nil)
      /// en translation: 3
      ///
      /// Locales: nl, en
      static let o4bRbFmZText = Rswift.StringResource(key: "o4b-Rb-FmZ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["nl", "en"], comment: nil)
      /// en translation: 300 €
      ///
      /// Locales: nl, en
      static let bD1K90dmText = Rswift.StringResource(key: "bD1-k9-0dm.text", tableName: "Main", bundle: R.hostingBundle, locales: ["nl", "en"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: nl, en
      static let eqNRwNg8NormalTitle = Rswift.StringResource(key: "eqN-rw-ng8.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["nl", "en"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: nl, en
      static let rpKZwROmText = Rswift.StringResource(key: "rpK-Zw-ROm.text", tableName: "Main", bundle: R.hostingBundle, locales: ["nl", "en"], comment: nil)
      /// en translation: Jamal
      ///
      /// Locales: nl, en
      static let fUR2FuIText = Rswift.StringResource(key: "5fU-r2-fuI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["nl", "en"], comment: nil)
      /// en translation: Kindpakket
      ///
      /// Locales: nl, en
      static let hah5rKDNText = Rswift.StringResource(key: "hah-5r-kDN.text", tableName: "Main", bundle: R.hostingBundle, locales: ["nl", "en"], comment: nil)
      /// en translation: NEW RECORDS
      ///
      /// Locales: nl, en
      static let fxbBVR86NormalTitle = Rswift.StringResource(key: "fxb-bV-R86.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["nl", "en"], comment: nil)
      /// en translation: Personal
      ///
      /// Locales: nl, en
      static let uLp89Zk0Text = Rswift.StringResource(key: "uLp-89-Zk0.text", tableName: "Main", bundle: R.hostingBundle, locales: ["nl", "en"], comment: nil)
      /// en translation: Profile
      ///
      /// Locales: nl, en
      static let fxgVjEeOTitle = Rswift.StringResource(key: "Fxg-Vj-eeO.title", tableName: "Main", bundle: R.hostingBundle, locales: ["nl", "en"], comment: nil)
      /// en translation: QR
      ///
      /// Locales: nl, en
      static let scFCsIUbTitle = Rswift.StringResource(key: "ScF-cs-iUb.title", tableName: "Main", bundle: R.hostingBundle, locales: ["nl", "en"], comment: nil)
      /// en translation: Used
      ///
      /// Locales: nl, en
      static let hupYQNKcText = Rswift.StringResource(key: "Hup-YQ-NKc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["nl", "en"], comment: nil)
      /// en translation: Vouchers
      ///
      /// Locales: nl, en
      static let jOrQwUNrText = Rswift.StringResource(key: "JOr-Qw-UNr.text", tableName: "Main", bundle: R.hostingBundle, locales: ["nl", "en"], comment: nil)
      /// en translation: Vouchers
      ///
      /// Locales: nl, en
      static let onyRhYQcTitle = Rswift.StringResource(key: "ony-rh-yQc.title", tableName: "Main", bundle: R.hostingBundle, locales: ["nl", "en"], comment: nil)
      /// en translation: You have no vouchers yet
      ///
      /// Locales: nl, en
      static let r3kMSEBGText = Rswift.StringResource(key: "r3k-mS-eBG.text", tableName: "Main", bundle: R.hostingBundle, locales: ["nl", "en"], comment: nil)
      /// en translation: validate
      ///
      /// Locales: nl, en
      static let mcNUtAJtText = Rswift.StringResource(key: "McN-ut-AJt.text", tableName: "Main", bundle: R.hostingBundle, locales: ["nl", "en"], comment: nil)

      /// en translation: 18 tagen geldig
      ///
      /// Locales: nl, en
      static func zdlu61tpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZDL-U6-1tp.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ZDL-U6-1tp.text"
        }

        return NSLocalizedString("ZDL-U6-1tp.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 3
      ///
      /// Locales: nl, en
      static func o4bRbFmZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("o4b-Rb-FmZ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "o4b-Rb-FmZ.text"
        }

        return NSLocalizedString("o4b-Rb-FmZ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: 300 €
      ///
      /// Locales: nl, en
      static func bD1K90dmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bD1-k9-0dm.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "bD1-k9-0dm.text"
        }

        return NSLocalizedString("bD1-k9-0dm.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: nl, en
      static func eqNRwNg8NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eqN-rw-ng8.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "eqN-rw-ng8.normalTitle"
        }

        return NSLocalizedString("eqN-rw-ng8.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: nl, en
      static func rpKZwROmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rpK-Zw-ROm.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "rpK-Zw-ROm.text"
        }

        return NSLocalizedString("rpK-Zw-ROm.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Jamal
      ///
      /// Locales: nl, en
      static func fUR2FuIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5fU-r2-fuI.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "5fU-r2-fuI.text"
        }

        return NSLocalizedString("5fU-r2-fuI.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Kindpakket
      ///
      /// Locales: nl, en
      static func hah5rKDNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hah-5r-kDN.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "hah-5r-kDN.text"
        }

        return NSLocalizedString("hah-5r-kDN.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: NEW RECORDS
      ///
      /// Locales: nl, en
      static func fxbBVR86NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fxb-bV-R86.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "fxb-bV-R86.normalTitle"
        }

        return NSLocalizedString("fxb-bV-R86.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Personal
      ///
      /// Locales: nl, en
      static func uLp89Zk0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uLp-89-Zk0.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "uLp-89-Zk0.text"
        }

        return NSLocalizedString("uLp-89-Zk0.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Profile
      ///
      /// Locales: nl, en
      static func fxgVjEeOTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Fxg-Vj-eeO.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Fxg-Vj-eeO.title"
        }

        return NSLocalizedString("Fxg-Vj-eeO.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: QR
      ///
      /// Locales: nl, en
      static func scFCsIUbTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ScF-cs-iUb.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ScF-cs-iUb.title"
        }

        return NSLocalizedString("ScF-cs-iUb.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Used
      ///
      /// Locales: nl, en
      static func hupYQNKcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hup-YQ-NKc.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Hup-YQ-NKc.text"
        }

        return NSLocalizedString("Hup-YQ-NKc.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Vouchers
      ///
      /// Locales: nl, en
      static func jOrQwUNrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("JOr-Qw-UNr.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "JOr-Qw-UNr.text"
        }

        return NSLocalizedString("JOr-Qw-UNr.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Vouchers
      ///
      /// Locales: nl, en
      static func onyRhYQcTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ony-rh-yQc.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ony-rh-yQc.title"
        }

        return NSLocalizedString("ony-rh-yQc.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: You have no vouchers yet
      ///
      /// Locales: nl, en
      static func r3kMSEBGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("r3k-mS-eBG.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "r3k-mS-eBG.text"
        }

        return NSLocalizedString("r3k-mS-eBG.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: validate
      ///
      /// Locales: nl, en
      static func mcNUtAJtText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("McN-ut-AJt.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "McN-ut-AJt.text"
        }

        return NSLocalizedString("McN-ut-AJt.text", tableName: "Main", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.organizationTableViewCell` struct is generated, and contains static references to 1 localization keys.
    struct organizationTableViewCell {
      /// en translation: Belga Fietsen Groningen Megastore
      ///
      /// Locales: en, nl
      static let yugasZgZText = Rswift.StringResource(key: "YUG-aS-ZgZ.text", tableName: "OrganizationTableViewCell", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: Belga Fietsen Groningen Megastore
      ///
      /// Locales: en, nl
      static func yugasZgZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YUG-aS-ZgZ.text", tableName: "OrganizationTableViewCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrganizationTableViewCell", preferredLanguages: preferredLanguages) else {
          return "YUG-aS-ZgZ.text"
        }

        return NSLocalizedString("YUG-aS-ZgZ.text", tableName: "OrganizationTableViewCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.organizationValidatorViewController` struct is generated, and contains static references to 1 localization keys.
    struct organizationValidatorViewController {
      /// en translation: Choose a validator
      ///
      /// Locales: en, nl
      static let axgVL5dNText = Rswift.StringResource(key: "axg-vL-5dN.text", tableName: "OrganizationValidatorViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: Choose a validator
      ///
      /// Locales: en, nl
      static func axgVL5dNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("axg-vL-5dN.text", tableName: "OrganizationValidatorViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrganizationValidatorViewController", preferredLanguages: preferredLanguages) else {
          return "axg-vL-5dN.text"
        }

        return NSLocalizedString("axg-vL-5dN.text", tableName: "OrganizationValidatorViewController", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.payment` struct is generated, and contains static references to 8 localization keys.
    struct payment {
      /// en translation: DenyK
      ///
      /// Locales: en, nl
      static let sBInTb1Text = Rswift.StringResource(key: "7sB-in-Tb1.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Enter the price here.
      ///
      /// Locales: en, nl
      static let s9mQTRjOPlaceholder = Rswift.StringResource(key: "S9m-QT-RjO.placeholder", tableName: "Payment", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Kindpakket
      ///
      /// Locales: en, nl
      static let uPPYSF4lText = Rswift.StringResource(key: "uPP-YS-f4l.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: NOT 2 DAGEN GELDIG VALID
      ///
      /// Locales: en, nl
      static let kgfIKRAIText = Rswift.StringResource(key: "kgf-iK-RAI.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Note
      ///
      /// Locales: en, nl
      static let tcrOrO4PPlaceholder = Rswift.StringResource(key: "TCR-Or-O4P.placeholder", tableName: "Payment", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Product categories
      ///
      /// Locales: en, nl
      static let zrf29OzlText = Rswift.StringResource(key: "Zrf-29-ozl.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: REQUEST PAYMENT
      ///
      /// Locales: en, nl
      static let riyOmVArNormalTitle = Rswift.StringResource(key: "riy-om-vAr.normalTitle", tableName: "Payment", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Redeem Voucher
      ///
      /// Locales: en, nl
      static let eGEDuSxeText = Rswift.StringResource(key: "eGE-du-sxe.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: DenyK
      ///
      /// Locales: en, nl
      static func sBInTb1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7sB-in-Tb1.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "7sB-in-Tb1.text"
        }

        return NSLocalizedString("7sB-in-Tb1.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Enter the price here.
      ///
      /// Locales: en, nl
      static func s9mQTRjOPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("S9m-QT-RjO.placeholder", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "S9m-QT-RjO.placeholder"
        }

        return NSLocalizedString("S9m-QT-RjO.placeholder", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Kindpakket
      ///
      /// Locales: en, nl
      static func uPPYSF4lText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uPP-YS-f4l.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "uPP-YS-f4l.text"
        }

        return NSLocalizedString("uPP-YS-f4l.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: NOT 2 DAGEN GELDIG VALID
      ///
      /// Locales: en, nl
      static func kgfIKRAIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kgf-iK-RAI.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "kgf-iK-RAI.text"
        }

        return NSLocalizedString("kgf-iK-RAI.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Note
      ///
      /// Locales: en, nl
      static func tcrOrO4PPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TCR-Or-O4P.placeholder", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "TCR-Or-O4P.placeholder"
        }

        return NSLocalizedString("TCR-Or-O4P.placeholder", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Product categories
      ///
      /// Locales: en, nl
      static func zrf29OzlText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Zrf-29-ozl.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "Zrf-29-ozl.text"
        }

        return NSLocalizedString("Zrf-29-ozl.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: REQUEST PAYMENT
      ///
      /// Locales: en, nl
      static func riyOmVArNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("riy-om-vAr.normalTitle", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "riy-om-vAr.normalTitle"
        }

        return NSLocalizedString("riy-om-vAr.normalTitle", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Redeem Voucher
      ///
      /// Locales: en, nl
      static func eGEDuSxeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eGE-du-sxe.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "eGE-du-sxe.text"
        }

        return NSLocalizedString("eGE-du-sxe.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.productReservation` struct is generated, and contains static references to 5 localization keys.
    struct productReservation {
      /// en translation: 300 €
      ///
      /// Locales: en, nl
      static let wfvDJZtwText = Rswift.StringResource(key: "wfv-DJ-Ztw.text", tableName: "ProductReservation", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: COMPLETE AN AMOUNT
      ///
      /// Locales: en, nl
      static let uzMMeHi0NormalTitle = Rswift.StringResource(key: "uzM-Me-hi0.normalTitle", tableName: "ProductReservation", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Choose Reservation
      ///
      /// Locales: en, nl
      static let j1CHn7j5Text = Rswift.StringResource(key: "j1C-Hn-7j5.text", tableName: "ProductReservation", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Kindpakket
      ///
      /// Locales: en, nl
      static let e2mHCZoQText = Rswift.StringResource(key: "e2m-hC-zoQ.text", tableName: "ProductReservation", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: The offers below are reserved by the customer
      ///
      /// Locales: en, nl
      static let tzMGHUFText = Rswift.StringResource(key: "8tz-MG-HUF.text", tableName: "ProductReservation", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: 300 €
      ///
      /// Locales: en, nl
      static func wfvDJZtwText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wfv-DJ-Ztw.text", tableName: "ProductReservation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductReservation", preferredLanguages: preferredLanguages) else {
          return "wfv-DJ-Ztw.text"
        }

        return NSLocalizedString("wfv-DJ-Ztw.text", tableName: "ProductReservation", bundle: bundle, comment: "")
      }

      /// en translation: COMPLETE AN AMOUNT
      ///
      /// Locales: en, nl
      static func uzMMeHi0NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uzM-Me-hi0.normalTitle", tableName: "ProductReservation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductReservation", preferredLanguages: preferredLanguages) else {
          return "uzM-Me-hi0.normalTitle"
        }

        return NSLocalizedString("uzM-Me-hi0.normalTitle", tableName: "ProductReservation", bundle: bundle, comment: "")
      }

      /// en translation: Choose Reservation
      ///
      /// Locales: en, nl
      static func j1CHn7j5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("j1C-Hn-7j5.text", tableName: "ProductReservation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductReservation", preferredLanguages: preferredLanguages) else {
          return "j1C-Hn-7j5.text"
        }

        return NSLocalizedString("j1C-Hn-7j5.text", tableName: "ProductReservation", bundle: bundle, comment: "")
      }

      /// en translation: Kindpakket
      ///
      /// Locales: en, nl
      static func e2mHCZoQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("e2m-hC-zoQ.text", tableName: "ProductReservation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductReservation", preferredLanguages: preferredLanguages) else {
          return "e2m-hC-zoQ.text"
        }

        return NSLocalizedString("e2m-hC-zoQ.text", tableName: "ProductReservation", bundle: bundle, comment: "")
      }

      /// en translation: The offers below are reserved by the customer
      ///
      /// Locales: en, nl
      static func tzMGHUFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8tz-MG-HUF.text", tableName: "ProductReservation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductReservation", preferredLanguages: preferredLanguages) else {
          return "8tz-MG-HUF.text"
        }

        return NSLocalizedString("8tz-MG-HUF.text", tableName: "ProductReservation", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.productVoucher` struct is generated, and contains static references to 19 localization keys.
    struct productVoucher {
      /// en translation: 0615261612
      ///
      /// Locales: en, nl
      static let yYDZYNULText = Rswift.StringResource(key: "yYD-ZY-nUL.text", tableName: "ProductVoucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: en, nl
      static let cx4BkLqqText = Rswift.StringResource(key: "CX4-Bk-Lqq.text", tableName: "ProductVoucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: E-mail to me
      ///
      /// Locales: en, nl
      static let d75QdXatNormalTitle = Rswift.StringResource(key: "d75-Qd-xat.normalTitle", tableName: "ProductVoucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Fiets
      ///
      /// Locales: en, nl
      static let yliHNEQCText = Rswift.StringResource(key: "yli-HN-EQC.text", tableName: "ProductVoucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Item 2
      ///
      /// Locales: en, nl
      static let fo7WTZdNTitle = Rswift.StringResource(key: "FO7-wT-ZdN.title", tableName: "ProductVoucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, nl
      static let mUcCqOJnText = Rswift.StringResource(key: "MUc-Cq-oJn.text", tableName: "ProductVoucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, nl
      static let nGITPRgsText = Rswift.StringResource(key: "nGI-TP-rgs.text", tableName: "ProductVoucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Let the shopkeeper scan it to make a payment from your voucher.
      ///
      /// Locales: en, nl
      static let bdF7YYAyText = Rswift.StringResource(key: "BdF-7Y-yAy.text", tableName: "ProductVoucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: NOT 2 DAGEN GELDIG VALID
      ///
      /// Locales: en, nl
      static let wt9ZpQNMText = Rswift.StringResource(key: "wt9-Zp-qNM.text", tableName: "ProductVoucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Product Voucher
      ///
      /// Locales: en, nl
      static let zHTdEhDText = Rswift.StringResource(key: "5zH-Td-ehD.text", tableName: "ProductVoucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Provider
      ///
      /// Locales: en, nl
      static let ccsp94ZDText = Rswift.StringResource(key: "CCS-P9-4ZD.text", tableName: "ProductVoucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: QR-CODE
      ///
      /// Locales: en, nl
      static let qalq02UQText = Rswift.StringResource(key: "QAL-Q0-2UQ.text", tableName: "ProductVoucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Rocket Minds
      ///
      /// Locales: en, nl
      static let ttkvd7c6Text = Rswift.StringResource(key: "TTK-vD-7c6.text", tableName: "ProductVoucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Telephone
      ///
      /// Locales: en, nl
      static let cbrBP6r1Text = Rswift.StringResource(key: "Cbr-bP-6r1.text", tableName: "ProductVoucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This is your Voucher’s QR-code.
      ///
      /// Locales: en, nl
      static let tYQAjZEkText = Rswift.StringResource(key: "tYQ-aj-zEk.text", tableName: "ProductVoucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Ulgersmaweg 35, 9731BK, Groningen
      ///
      /// Locales: en, nl
      static let chhRuSntText = Rswift.StringResource(key: "CHH-ru-snt.text", tableName: "ProductVoucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Voucher Info
      ///
      /// Locales: en, nl
      static let bduEBOGBNormalTitle = Rswift.StringResource(key: "bdu-eB-oGB.normalTitle", tableName: "ProductVoucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: info@rminds.nl
      ///
      /// Locales: en, nl
      static let xfbSuVwfNormalTitle = Rswift.StringResource(key: "xfb-su-vwf.normalTitle", tableName: "ProductVoucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: € 300
      ///
      /// Locales: en, nl
      static let mYn29HhDText = Rswift.StringResource(key: "MYn-29-HhD.text", tableName: "ProductVoucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: 0615261612
      ///
      /// Locales: en, nl
      static func yYDZYNULText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yYD-ZY-nUL.text", tableName: "ProductVoucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductVoucher", preferredLanguages: preferredLanguages) else {
          return "yYD-ZY-nUL.text"
        }

        return NSLocalizedString("yYD-ZY-nUL.text", tableName: "ProductVoucher", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: en, nl
      static func cx4BkLqqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CX4-Bk-Lqq.text", tableName: "ProductVoucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductVoucher", preferredLanguages: preferredLanguages) else {
          return "CX4-Bk-Lqq.text"
        }

        return NSLocalizedString("CX4-Bk-Lqq.text", tableName: "ProductVoucher", bundle: bundle, comment: "")
      }

      /// en translation: E-mail to me
      ///
      /// Locales: en, nl
      static func d75QdXatNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("d75-Qd-xat.normalTitle", tableName: "ProductVoucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductVoucher", preferredLanguages: preferredLanguages) else {
          return "d75-Qd-xat.normalTitle"
        }

        return NSLocalizedString("d75-Qd-xat.normalTitle", tableName: "ProductVoucher", bundle: bundle, comment: "")
      }

      /// en translation: Fiets
      ///
      /// Locales: en, nl
      static func yliHNEQCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yli-HN-EQC.text", tableName: "ProductVoucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductVoucher", preferredLanguages: preferredLanguages) else {
          return "yli-HN-EQC.text"
        }

        return NSLocalizedString("yli-HN-EQC.text", tableName: "ProductVoucher", bundle: bundle, comment: "")
      }

      /// en translation: Item 2
      ///
      /// Locales: en, nl
      static func fo7WTZdNTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FO7-wT-ZdN.title", tableName: "ProductVoucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductVoucher", preferredLanguages: preferredLanguages) else {
          return "FO7-wT-ZdN.title"
        }

        return NSLocalizedString("FO7-wT-ZdN.title", tableName: "ProductVoucher", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, nl
      static func mUcCqOJnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MUc-Cq-oJn.text", tableName: "ProductVoucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductVoucher", preferredLanguages: preferredLanguages) else {
          return "MUc-Cq-oJn.text"
        }

        return NSLocalizedString("MUc-Cq-oJn.text", tableName: "ProductVoucher", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, nl
      static func nGITPRgsText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nGI-TP-rgs.text", tableName: "ProductVoucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductVoucher", preferredLanguages: preferredLanguages) else {
          return "nGI-TP-rgs.text"
        }

        return NSLocalizedString("nGI-TP-rgs.text", tableName: "ProductVoucher", bundle: bundle, comment: "")
      }

      /// en translation: Let the shopkeeper scan it to make a payment from your voucher.
      ///
      /// Locales: en, nl
      static func bdF7YYAyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BdF-7Y-yAy.text", tableName: "ProductVoucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductVoucher", preferredLanguages: preferredLanguages) else {
          return "BdF-7Y-yAy.text"
        }

        return NSLocalizedString("BdF-7Y-yAy.text", tableName: "ProductVoucher", bundle: bundle, comment: "")
      }

      /// en translation: NOT 2 DAGEN GELDIG VALID
      ///
      /// Locales: en, nl
      static func wt9ZpQNMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wt9-Zp-qNM.text", tableName: "ProductVoucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductVoucher", preferredLanguages: preferredLanguages) else {
          return "wt9-Zp-qNM.text"
        }

        return NSLocalizedString("wt9-Zp-qNM.text", tableName: "ProductVoucher", bundle: bundle, comment: "")
      }

      /// en translation: Product Voucher
      ///
      /// Locales: en, nl
      static func zHTdEhDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5zH-Td-ehD.text", tableName: "ProductVoucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductVoucher", preferredLanguages: preferredLanguages) else {
          return "5zH-Td-ehD.text"
        }

        return NSLocalizedString("5zH-Td-ehD.text", tableName: "ProductVoucher", bundle: bundle, comment: "")
      }

      /// en translation: Provider
      ///
      /// Locales: en, nl
      static func ccsp94ZDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CCS-P9-4ZD.text", tableName: "ProductVoucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductVoucher", preferredLanguages: preferredLanguages) else {
          return "CCS-P9-4ZD.text"
        }

        return NSLocalizedString("CCS-P9-4ZD.text", tableName: "ProductVoucher", bundle: bundle, comment: "")
      }

      /// en translation: QR-CODE
      ///
      /// Locales: en, nl
      static func qalq02UQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QAL-Q0-2UQ.text", tableName: "ProductVoucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductVoucher", preferredLanguages: preferredLanguages) else {
          return "QAL-Q0-2UQ.text"
        }

        return NSLocalizedString("QAL-Q0-2UQ.text", tableName: "ProductVoucher", bundle: bundle, comment: "")
      }

      /// en translation: Rocket Minds
      ///
      /// Locales: en, nl
      static func ttkvd7c6Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TTK-vD-7c6.text", tableName: "ProductVoucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductVoucher", preferredLanguages: preferredLanguages) else {
          return "TTK-vD-7c6.text"
        }

        return NSLocalizedString("TTK-vD-7c6.text", tableName: "ProductVoucher", bundle: bundle, comment: "")
      }

      /// en translation: Telephone
      ///
      /// Locales: en, nl
      static func cbrBP6r1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cbr-bP-6r1.text", tableName: "ProductVoucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductVoucher", preferredLanguages: preferredLanguages) else {
          return "Cbr-bP-6r1.text"
        }

        return NSLocalizedString("Cbr-bP-6r1.text", tableName: "ProductVoucher", bundle: bundle, comment: "")
      }

      /// en translation: This is your Voucher’s QR-code.
      ///
      /// Locales: en, nl
      static func tYQAjZEkText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tYQ-aj-zEk.text", tableName: "ProductVoucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductVoucher", preferredLanguages: preferredLanguages) else {
          return "tYQ-aj-zEk.text"
        }

        return NSLocalizedString("tYQ-aj-zEk.text", tableName: "ProductVoucher", bundle: bundle, comment: "")
      }

      /// en translation: Ulgersmaweg 35, 9731BK, Groningen
      ///
      /// Locales: en, nl
      static func chhRuSntText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CHH-ru-snt.text", tableName: "ProductVoucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductVoucher", preferredLanguages: preferredLanguages) else {
          return "CHH-ru-snt.text"
        }

        return NSLocalizedString("CHH-ru-snt.text", tableName: "ProductVoucher", bundle: bundle, comment: "")
      }

      /// en translation: Voucher Info
      ///
      /// Locales: en, nl
      static func bduEBOGBNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bdu-eB-oGB.normalTitle", tableName: "ProductVoucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductVoucher", preferredLanguages: preferredLanguages) else {
          return "bdu-eB-oGB.normalTitle"
        }

        return NSLocalizedString("bdu-eB-oGB.normalTitle", tableName: "ProductVoucher", bundle: bundle, comment: "")
      }

      /// en translation: info@rminds.nl
      ///
      /// Locales: en, nl
      static func xfbSuVwfNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xfb-su-vwf.normalTitle", tableName: "ProductVoucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductVoucher", preferredLanguages: preferredLanguages) else {
          return "xfb-su-vwf.normalTitle"
        }

        return NSLocalizedString("xfb-su-vwf.normalTitle", tableName: "ProductVoucher", bundle: bundle, comment: "")
      }

      /// en translation: € 300
      ///
      /// Locales: en, nl
      static func mYn29HhDText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MYn-29-HhD.text", tableName: "ProductVoucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ProductVoucher", preferredLanguages: preferredLanguages) else {
          return "MYn-29-HhD.text"
        }

        return NSLocalizedString("MYn-29-HhD.text", tableName: "ProductVoucher", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.profile` struct is generated, and contains static references to 18 localization keys.
    struct profile {
      /// en translation: 1.0.4
      ///
      /// Locales: en, nl
      static let fMYOVsBText = Rswift.StringResource(key: "6fM-yO-VsB.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: About Me
      ///
      /// Locales: en, nl
      static let rtBmZ42NormalTitle = Rswift.StringResource(key: "0RT-Bm-Z42.normalTitle", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: App version
      ///
      /// Locales: en, nl
      static let szPVkGG7Text = Rswift.StringResource(key: "szP-vk-gG7.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Change 4-digit passcode
      ///
      /// Locales: en, nl
      static let abLEwQz7Text = Rswift.StringResource(key: "AbL-ew-Qz7.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: en, nl
      static let hu1SrB6hNormalTitle = Rswift.StringResource(key: "hu1-sr-b6h.normalTitle", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Contact Support
      ///
      /// Locales: en, nl
      static let g7d5ZMNyText = Rswift.StringResource(key: "G7d-5Z-MNy.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: en, nl
      static let sqgEG8rANormalTitle = Rswift.StringResource(key: "Sqg-eG-8rA.normalTitle", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: LOG OUT
      ///
      /// Locales: en, nl
      static let lClJE4RlNormalTitle = Rswift.StringResource(key: "LCl-JE-4Rl.normalTitle", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Let someone scan your personal QR code to send your currency, property or vouchers.
      ///
      /// Locales: en, nl
      static let mxWQZ33fText = Rswift.StringResource(key: "MxW-qZ-33f.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Press for crash the app
      ///
      /// Locales: en, nl
      static let uyUTZKOJNormalTitle = Rswift.StringResource(key: "uyU-tZ-kOJ.normalTitle", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Send crash reports
      ///
      /// Locales: en, nl
      static let pA8VOWKTText = Rswift.StringResource(key: "pA8-VO-WKT.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Start from scanner
      ///
      /// Locales: en, nl
      static let aiDMk0LQText = Rswift.StringResource(key: "AiD-mk-0LQ.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This is your personal QR code
      ///
      /// Locales: en, nl
      static let nfrIkUtFText = Rswift.StringResource(key: "NFR-Ik-UtF.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Turn off passcode
      ///
      /// Locales: en, nl
      static let bq2SXGJZText = Rswift.StringResource(key: "Bq2-SX-GJZ.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Use Face ID for login
      ///
      /// Locales: en, nl
      static let scnSYTGfText = Rswift.StringResource(key: "scn-SY-tGf.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Uw Profiel
      ///
      /// Locales: en, nl
      static let ncj5FIHrText = Rswift.StringResource(key: "Ncj-5F-IHr.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: feedback@forus.io
      ///
      /// Locales: en, nl
      static let cN1ZL4KNormalTitle = Rswift.StringResource(key: "5cN-1Z-L4K.normalTitle", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: mail@mail.com
      ///
      /// Locales: en, nl
      static let rkqEJVPaText = Rswift.StringResource(key: "Rkq-EJ-VPa.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: 1.0.4
      ///
      /// Locales: en, nl
      static func fMYOVsBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6fM-yO-VsB.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "6fM-yO-VsB.text"
        }

        return NSLocalizedString("6fM-yO-VsB.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: About Me
      ///
      /// Locales: en, nl
      static func rtBmZ42NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0RT-Bm-Z42.normalTitle", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "0RT-Bm-Z42.normalTitle"
        }

        return NSLocalizedString("0RT-Bm-Z42.normalTitle", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: App version
      ///
      /// Locales: en, nl
      static func szPVkGG7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("szP-vk-gG7.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "szP-vk-gG7.text"
        }

        return NSLocalizedString("szP-vk-gG7.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Change 4-digit passcode
      ///
      /// Locales: en, nl
      static func abLEwQz7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AbL-ew-Qz7.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "AbL-ew-Qz7.text"
        }

        return NSLocalizedString("AbL-ew-Qz7.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: en, nl
      static func hu1SrB6hNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hu1-sr-b6h.normalTitle", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "hu1-sr-b6h.normalTitle"
        }

        return NSLocalizedString("hu1-sr-b6h.normalTitle", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Contact Support
      ///
      /// Locales: en, nl
      static func g7d5ZMNyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("G7d-5Z-MNy.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "G7d-5Z-MNy.text"
        }

        return NSLocalizedString("G7d-5Z-MNy.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: en, nl
      static func sqgEG8rANormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sqg-eG-8rA.normalTitle", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "Sqg-eG-8rA.normalTitle"
        }

        return NSLocalizedString("Sqg-eG-8rA.normalTitle", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: LOG OUT
      ///
      /// Locales: en, nl
      static func lClJE4RlNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LCl-JE-4Rl.normalTitle", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "LCl-JE-4Rl.normalTitle"
        }

        return NSLocalizedString("LCl-JE-4Rl.normalTitle", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Let someone scan your personal QR code to send your currency, property or vouchers.
      ///
      /// Locales: en, nl
      static func mxWQZ33fText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MxW-qZ-33f.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "MxW-qZ-33f.text"
        }

        return NSLocalizedString("MxW-qZ-33f.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Press for crash the app
      ///
      /// Locales: en, nl
      static func uyUTZKOJNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uyU-tZ-kOJ.normalTitle", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "uyU-tZ-kOJ.normalTitle"
        }

        return NSLocalizedString("uyU-tZ-kOJ.normalTitle", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Send crash reports
      ///
      /// Locales: en, nl
      static func pA8VOWKTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pA8-VO-WKT.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "pA8-VO-WKT.text"
        }

        return NSLocalizedString("pA8-VO-WKT.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Start from scanner
      ///
      /// Locales: en, nl
      static func aiDMk0LQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AiD-mk-0LQ.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "AiD-mk-0LQ.text"
        }

        return NSLocalizedString("AiD-mk-0LQ.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: This is your personal QR code
      ///
      /// Locales: en, nl
      static func nfrIkUtFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NFR-Ik-UtF.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "NFR-Ik-UtF.text"
        }

        return NSLocalizedString("NFR-Ik-UtF.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Turn off passcode
      ///
      /// Locales: en, nl
      static func bq2SXGJZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bq2-SX-GJZ.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "Bq2-SX-GJZ.text"
        }

        return NSLocalizedString("Bq2-SX-GJZ.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Use Face ID for login
      ///
      /// Locales: en, nl
      static func scnSYTGfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scn-SY-tGf.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "scn-SY-tGf.text"
        }

        return NSLocalizedString("scn-SY-tGf.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Uw Profiel
      ///
      /// Locales: en, nl
      static func ncj5FIHrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ncj-5F-IHr.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "Ncj-5F-IHr.text"
        }

        return NSLocalizedString("Ncj-5F-IHr.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: feedback@forus.io
      ///
      /// Locales: en, nl
      static func cN1ZL4KNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5cN-1Z-L4K.normalTitle", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "5cN-1Z-L4K.normalTitle"
        }

        return NSLocalizedString("5cN-1Z-L4K.normalTitle", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: mail@mail.com
      ///
      /// Locales: en, nl
      static func rkqEJVPaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rkq-EJ-VPa.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "Rkq-EJ-VPa.text"
        }

        return NSLocalizedString("Rkq-EJ-VPa.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.recordDetail` struct is generated, and contains static references to 12 localization keys.
    struct recordDetail {
      /// en translation: Delete record
      ///
      /// Locales: en, nl
      static let owVNuEITNormalTitle = Rswift.StringResource(key: "owV-nu-EIT.normalTitle", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: en, nl
      static let fAdC31pqText = Rswift.StringResource(key: "fAd-C3-1pq.text", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Jamal
      ///
      /// Locales: en, nl
      static let gd30SRSMText = Rswift.StringResource(key: "GD3-0S-rSM.text", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, nl
      static let nZhDxKQ4Text = Rswift.StringResource(key: "NZh-dx-KQ4.text", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Let the shopkeeper scan it to make a validtion to your record.
      ///
      /// Locales: en, nl
      static let cb7BvI2dText = Rswift.StringResource(key: "Cb7-Bv-I2d.text", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: QR-CODE
      ///
      /// Locales: en, nl
      static let aVIF3Q7EText = Rswift.StringResource(key: "aVI-f3-Q7E.text", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Record detail
      ///
      /// Locales: en, nl
      static let nZaJqIY1Text = Rswift.StringResource(key: "nZa-Jq-IY1.text", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Show QR-Code
      ///
      /// Locales: en, nl
      static let xXmPGIzENormalTitle = Rswift.StringResource(key: "XXm-PG-izE.normalTitle", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This is your personal QR code
      ///
      /// Locales: en, nl
      static let j0BXOPUText = Rswift.StringResource(key: "3j0-bX-OPU.text", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This record has no validations yet
      ///
      /// Locales: en, nl
      static let tMmMnV3XText = Rswift.StringResource(key: "TMm-Mn-V3X.text", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Validations
      ///
      /// Locales: en, nl
      static let eLcRsIT8Text = Rswift.StringResource(key: "eLc-rs-IT8.text", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: validations
      ///
      /// Locales: en, nl
      static let eQwAsESGText = Rswift.StringResource(key: "eQw-as-eSG.text", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: Delete record
      ///
      /// Locales: en, nl
      static func owVNuEITNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("owV-nu-EIT.normalTitle", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "owV-nu-EIT.normalTitle"
        }

        return NSLocalizedString("owV-nu-EIT.normalTitle", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: en, nl
      static func fAdC31pqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fAd-C3-1pq.text", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "fAd-C3-1pq.text"
        }

        return NSLocalizedString("fAd-C3-1pq.text", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: Jamal
      ///
      /// Locales: en, nl
      static func gd30SRSMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GD3-0S-rSM.text", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "GD3-0S-rSM.text"
        }

        return NSLocalizedString("GD3-0S-rSM.text", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, nl
      static func nZhDxKQ4Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NZh-dx-KQ4.text", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "NZh-dx-KQ4.text"
        }

        return NSLocalizedString("NZh-dx-KQ4.text", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: Let the shopkeeper scan it to make a validtion to your record.
      ///
      /// Locales: en, nl
      static func cb7BvI2dText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cb7-Bv-I2d.text", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "Cb7-Bv-I2d.text"
        }

        return NSLocalizedString("Cb7-Bv-I2d.text", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: QR-CODE
      ///
      /// Locales: en, nl
      static func aVIF3Q7EText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aVI-f3-Q7E.text", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "aVI-f3-Q7E.text"
        }

        return NSLocalizedString("aVI-f3-Q7E.text", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: Record detail
      ///
      /// Locales: en, nl
      static func nZaJqIY1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nZa-Jq-IY1.text", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "nZa-Jq-IY1.text"
        }

        return NSLocalizedString("nZa-Jq-IY1.text", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: Show QR-Code
      ///
      /// Locales: en, nl
      static func xXmPGIzENormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XXm-PG-izE.normalTitle", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "XXm-PG-izE.normalTitle"
        }

        return NSLocalizedString("XXm-PG-izE.normalTitle", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: This is your personal QR code
      ///
      /// Locales: en, nl
      static func j0BXOPUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3j0-bX-OPU.text", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "3j0-bX-OPU.text"
        }

        return NSLocalizedString("3j0-bX-OPU.text", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: This record has no validations yet
      ///
      /// Locales: en, nl
      static func tMmMnV3XText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TMm-Mn-V3X.text", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "TMm-Mn-V3X.text"
        }

        return NSLocalizedString("TMm-Mn-V3X.text", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: Validations
      ///
      /// Locales: en, nl
      static func eLcRsIT8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eLc-rs-IT8.text", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "eLc-rs-IT8.text"
        }

        return NSLocalizedString("eLc-rs-IT8.text", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: validations
      ///
      /// Locales: en, nl
      static func eQwAsESGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eQw-as-eSG.text", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "eQw-as-eSG.text"
        }

        return NSLocalizedString("eQw-as-eSG.text", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.recordValidators` struct is generated, and contains static references to 10 localization keys.
    struct recordValidators {
      /// en translation: Choose the category under.
      ///
      /// Locales: en, nl
      static let xkUhUInText = Rswift.StringResource(key: "9Xk-uh-uIn.text", tableName: "RecordValidators", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Choose validator
      ///
      /// Locales: en, nl
      static let tTqNPAvEText = Rswift.StringResource(key: "TTq-NP-AvE.text", tableName: "RecordValidators", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Given Name
      ///
      /// Locales: en, nl
      static let y1JAA6CiText = Rswift.StringResource(key: "y1J-AA-6Ci.text", tableName: "RecordValidators", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Jamal
      ///
      /// Locales: en, nl
      static let e4sJtG1ENormalTitle = Rswift.StringResource(key: "e4s-Jt-G1E.normalTitle", tableName: "RecordValidators", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, nl
      static let spf3BE5Text = Rswift.StringResource(key: "5SP-f3-BE5.text", tableName: "RecordValidators", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, nl
      static let uwAHRRf8Text = Rswift.StringResource(key: "UwA-hR-Rf8.text", tableName: "RecordValidators", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: New records
      ///
      /// Locales: en, nl
      static let xiYUg2dgText = Rswift.StringResource(key: "XiY-ug-2dg.text", tableName: "RecordValidators", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This record has no validations yet
      ///
      /// Locales: en, nl
      static let gLjO5OVgText = Rswift.StringResource(key: "gLj-o5-OVg.text", tableName: "RecordValidators", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: VALIDATE LATER
      ///
      /// Locales: en, nl
      static let bpxIbVVTNormalTitle = Rswift.StringResource(key: "bpx-Ib-VVT.normalTitle", tableName: "RecordValidators", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Voornaam
      ///
      /// Locales: en, nl
      static let wEh0jF0hNormalTitle = Rswift.StringResource(key: "WEh-0j-F0h.normalTitle", tableName: "RecordValidators", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: Choose the category under.
      ///
      /// Locales: en, nl
      static func xkUhUInText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9Xk-uh-uIn.text", tableName: "RecordValidators", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordValidators", preferredLanguages: preferredLanguages) else {
          return "9Xk-uh-uIn.text"
        }

        return NSLocalizedString("9Xk-uh-uIn.text", tableName: "RecordValidators", bundle: bundle, comment: "")
      }

      /// en translation: Choose validator
      ///
      /// Locales: en, nl
      static func tTqNPAvEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TTq-NP-AvE.text", tableName: "RecordValidators", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordValidators", preferredLanguages: preferredLanguages) else {
          return "TTq-NP-AvE.text"
        }

        return NSLocalizedString("TTq-NP-AvE.text", tableName: "RecordValidators", bundle: bundle, comment: "")
      }

      /// en translation: Given Name
      ///
      /// Locales: en, nl
      static func y1JAA6CiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("y1J-AA-6Ci.text", tableName: "RecordValidators", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordValidators", preferredLanguages: preferredLanguages) else {
          return "y1J-AA-6Ci.text"
        }

        return NSLocalizedString("y1J-AA-6Ci.text", tableName: "RecordValidators", bundle: bundle, comment: "")
      }

      /// en translation: Jamal
      ///
      /// Locales: en, nl
      static func e4sJtG1ENormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("e4s-Jt-G1E.normalTitle", tableName: "RecordValidators", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordValidators", preferredLanguages: preferredLanguages) else {
          return "e4s-Jt-G1E.normalTitle"
        }

        return NSLocalizedString("e4s-Jt-G1E.normalTitle", tableName: "RecordValidators", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, nl
      static func spf3BE5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5SP-f3-BE5.text", tableName: "RecordValidators", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordValidators", preferredLanguages: preferredLanguages) else {
          return "5SP-f3-BE5.text"
        }

        return NSLocalizedString("5SP-f3-BE5.text", tableName: "RecordValidators", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, nl
      static func uwAHRRf8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UwA-hR-Rf8.text", tableName: "RecordValidators", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordValidators", preferredLanguages: preferredLanguages) else {
          return "UwA-hR-Rf8.text"
        }

        return NSLocalizedString("UwA-hR-Rf8.text", tableName: "RecordValidators", bundle: bundle, comment: "")
      }

      /// en translation: New records
      ///
      /// Locales: en, nl
      static func xiYUg2dgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XiY-ug-2dg.text", tableName: "RecordValidators", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordValidators", preferredLanguages: preferredLanguages) else {
          return "XiY-ug-2dg.text"
        }

        return NSLocalizedString("XiY-ug-2dg.text", tableName: "RecordValidators", bundle: bundle, comment: "")
      }

      /// en translation: This record has no validations yet
      ///
      /// Locales: en, nl
      static func gLjO5OVgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gLj-o5-OVg.text", tableName: "RecordValidators", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordValidators", preferredLanguages: preferredLanguages) else {
          return "gLj-o5-OVg.text"
        }

        return NSLocalizedString("gLj-o5-OVg.text", tableName: "RecordValidators", bundle: bundle, comment: "")
      }

      /// en translation: VALIDATE LATER
      ///
      /// Locales: en, nl
      static func bpxIbVVTNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bpx-Ib-VVT.normalTitle", tableName: "RecordValidators", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordValidators", preferredLanguages: preferredLanguages) else {
          return "bpx-Ib-VVT.normalTitle"
        }

        return NSLocalizedString("bpx-Ib-VVT.normalTitle", tableName: "RecordValidators", bundle: bundle, comment: "")
      }

      /// en translation: Voornaam
      ///
      /// Locales: en, nl
      static func wEh0jF0hNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WEh-0j-F0h.normalTitle", tableName: "RecordValidators", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordValidators", preferredLanguages: preferredLanguages) else {
          return "WEh-0j-F0h.normalTitle"
        }

        return NSLocalizedString("WEh-0j-F0h.normalTitle", tableName: "RecordValidators", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.successEmail` struct is generated, and contains static references to 3 localization keys.
    struct successEmail {
      /// en translation: E-mail has been sent to you.
      ///
      /// Locales: en, nl
      static let zQCJPEMeText = Rswift.StringResource(key: "zQC-jP-eMe.text", tableName: "SuccessEmail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: OPEN MAIL APP
      ///
      /// Locales: en, nl
      static let opfSAEdoNormalTitle = Rswift.StringResource(key: "Opf-SA-edo.normalTitle", tableName: "SuccessEmail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: PAIRING
      ///
      /// Locales: en, nl
      static let pqBSUG6iNormalTitle = Rswift.StringResource(key: "pqB-sU-g6i.normalTitle", tableName: "SuccessEmail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: E-mail has been sent to you.
      ///
      /// Locales: en, nl
      static func zQCJPEMeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zQC-jP-eMe.text", tableName: "SuccessEmail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SuccessEmail", preferredLanguages: preferredLanguages) else {
          return "zQC-jP-eMe.text"
        }

        return NSLocalizedString("zQC-jP-eMe.text", tableName: "SuccessEmail", bundle: bundle, comment: "")
      }

      /// en translation: OPEN MAIL APP
      ///
      /// Locales: en, nl
      static func opfSAEdoNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Opf-SA-edo.normalTitle", tableName: "SuccessEmail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SuccessEmail", preferredLanguages: preferredLanguages) else {
          return "Opf-SA-edo.normalTitle"
        }

        return NSLocalizedString("Opf-SA-edo.normalTitle", tableName: "SuccessEmail", bundle: bundle, comment: "")
      }

      /// en translation: PAIRING
      ///
      /// Locales: en, nl
      static func pqBSUG6iNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pqB-sU-g6i.normalTitle", tableName: "SuccessEmail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SuccessEmail", preferredLanguages: preferredLanguages) else {
          return "pqB-sU-g6i.normalTitle"
        }

        return NSLocalizedString("pqB-sU-g6i.normalTitle", tableName: "SuccessEmail", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.successRegister` struct is generated, and contains static references to 2 localization keys.
    struct successRegister {
      /// en translation: NEXT
      ///
      /// Locales: en, nl
      static let dBnEcKcUNormalTitle = Rswift.StringResource(key: "DBn-Ec-KcU.normalTitle", tableName: "SuccessRegister", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Successfully  logged in!
      ///
      /// Locales: en, nl
      static let xpePkSDUText = Rswift.StringResource(key: "Xpe-pk-sDU.text", tableName: "SuccessRegister", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: NEXT
      ///
      /// Locales: en, nl
      static func dBnEcKcUNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DBn-Ec-KcU.normalTitle", tableName: "SuccessRegister", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SuccessRegister", preferredLanguages: preferredLanguages) else {
          return "DBn-Ec-KcU.normalTitle"
        }

        return NSLocalizedString("DBn-Ec-KcU.normalTitle", tableName: "SuccessRegister", bundle: bundle, comment: "")
      }

      /// en translation: Successfully  logged in!
      ///
      /// Locales: en, nl
      static func xpePkSDUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Xpe-pk-sDU.text", tableName: "SuccessRegister", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SuccessRegister", preferredLanguages: preferredLanguages) else {
          return "Xpe-pk-sDU.text"
        }

        return NSLocalizedString("Xpe-pk-sDU.text", tableName: "SuccessRegister", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.successSendingViewController` struct is generated, and contains static references to 3 localization keys.
    struct successSendingViewController {
      /// en translation: OK
      ///
      /// Locales: en, nl
      static let kvOHI2dNormalTitle = Rswift.StringResource(key: "0kv-OH-i2d.normalTitle", tableName: "SuccessSendingViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Success!
      ///
      /// Locales: en, nl
      static let euX3zECaText = Rswift.StringResource(key: "euX-3z-eCa.text", tableName: "SuccessSendingViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: The voucher has been sent to email.
      ///
      /// Locales: en, nl
      static let qnGE6zQText = Rswift.StringResource(key: "6qn-GE-6zQ.text", tableName: "SuccessSendingViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: OK
      ///
      /// Locales: en, nl
      static func kvOHI2dNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0kv-OH-i2d.normalTitle", tableName: "SuccessSendingViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SuccessSendingViewController", preferredLanguages: preferredLanguages) else {
          return "0kv-OH-i2d.normalTitle"
        }

        return NSLocalizedString("0kv-OH-i2d.normalTitle", tableName: "SuccessSendingViewController", bundle: bundle, comment: "")
      }

      /// en translation: Success!
      ///
      /// Locales: en, nl
      static func euX3zECaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("euX-3z-eCa.text", tableName: "SuccessSendingViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SuccessSendingViewController", preferredLanguages: preferredLanguages) else {
          return "euX-3z-eCa.text"
        }

        return NSLocalizedString("euX-3z-eCa.text", tableName: "SuccessSendingViewController", bundle: bundle, comment: "")
      }

      /// en translation: The voucher has been sent to email.
      ///
      /// Locales: en, nl
      static func qnGE6zQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6qn-GE-6zQ.text", tableName: "SuccessSendingViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SuccessSendingViewController", preferredLanguages: preferredLanguages) else {
          return "6qn-GE-6zQ.text"
        }

        return NSLocalizedString("6qn-GE-6zQ.text", tableName: "SuccessSendingViewController", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.textRecord` struct is generated, and contains static references to 7 localization keys.
    struct textRecord {
      /// en translation: Create the text or value for the current record
      ///
      /// Locales: en, nl
      static let sahCvY6yText = Rswift.StringResource(key: "sah-Cv-Y6y.text", tableName: "TextRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Enter the value
      ///
      /// Locales: en, nl
      static let loZCXWQ0Text = Rswift.StringResource(key: "LoZ-cX-WQ0.text", tableName: "TextRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Given Name
      ///
      /// Locales: en, nl
      static let k5ZTbErDNormalTitle = Rswift.StringResource(key: "K5Z-tb-ErD.normalTitle", tableName: "TextRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: New Record
      ///
      /// Locales: en, nl
      static let ckKUMWBText = Rswift.StringResource(key: "2ck-KU-mWB.text", tableName: "TextRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Personal
      ///
      /// Locales: en, nl
      static let up1wBOcNormalTitle = Rswift.StringResource(key: "5Up-1w-BOc.normalTitle", tableName: "TextRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: SUBMIT
      ///
      /// Locales: en, nl
      static let h8KWtMAVNormalTitle = Rswift.StringResource(key: "H8K-Wt-MAV.normalTitle", tableName: "TextRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Text
      ///
      /// Locales: en, nl
      static let bOlHBLCpText = Rswift.StringResource(key: "bOl-hB-lCp.text", tableName: "TextRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: Create the text or value for the current record
      ///
      /// Locales: en, nl
      static func sahCvY6yText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sah-Cv-Y6y.text", tableName: "TextRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TextRecord", preferredLanguages: preferredLanguages) else {
          return "sah-Cv-Y6y.text"
        }

        return NSLocalizedString("sah-Cv-Y6y.text", tableName: "TextRecord", bundle: bundle, comment: "")
      }

      /// en translation: Enter the value
      ///
      /// Locales: en, nl
      static func loZCXWQ0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LoZ-cX-WQ0.text", tableName: "TextRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TextRecord", preferredLanguages: preferredLanguages) else {
          return "LoZ-cX-WQ0.text"
        }

        return NSLocalizedString("LoZ-cX-WQ0.text", tableName: "TextRecord", bundle: bundle, comment: "")
      }

      /// en translation: Given Name
      ///
      /// Locales: en, nl
      static func k5ZTbErDNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("K5Z-tb-ErD.normalTitle", tableName: "TextRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TextRecord", preferredLanguages: preferredLanguages) else {
          return "K5Z-tb-ErD.normalTitle"
        }

        return NSLocalizedString("K5Z-tb-ErD.normalTitle", tableName: "TextRecord", bundle: bundle, comment: "")
      }

      /// en translation: New Record
      ///
      /// Locales: en, nl
      static func ckKUMWBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2ck-KU-mWB.text", tableName: "TextRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TextRecord", preferredLanguages: preferredLanguages) else {
          return "2ck-KU-mWB.text"
        }

        return NSLocalizedString("2ck-KU-mWB.text", tableName: "TextRecord", bundle: bundle, comment: "")
      }

      /// en translation: Personal
      ///
      /// Locales: en, nl
      static func up1wBOcNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5Up-1w-BOc.normalTitle", tableName: "TextRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TextRecord", preferredLanguages: preferredLanguages) else {
          return "5Up-1w-BOc.normalTitle"
        }

        return NSLocalizedString("5Up-1w-BOc.normalTitle", tableName: "TextRecord", bundle: bundle, comment: "")
      }

      /// en translation: SUBMIT
      ///
      /// Locales: en, nl
      static func h8KWtMAVNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("H8K-Wt-MAV.normalTitle", tableName: "TextRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TextRecord", preferredLanguages: preferredLanguages) else {
          return "H8K-Wt-MAV.normalTitle"
        }

        return NSLocalizedString("H8K-Wt-MAV.normalTitle", tableName: "TextRecord", bundle: bundle, comment: "")
      }

      /// en translation: Text
      ///
      /// Locales: en, nl
      static func bOlHBLCpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bOl-hB-lCp.text", tableName: "TextRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TextRecord", preferredLanguages: preferredLanguages) else {
          return "bOl-hB-lCp.text"
        }

        return NSLocalizedString("bOl-hB-lCp.text", tableName: "TextRecord", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.voucher` struct is generated, and contains static references to 20 localization keys.
    struct voucher {
      /// en translation: -2,76
      ///
      /// Locales: en, nl
      static let xmp1yDWXText = Rswift.StringResource(key: "Xmp-1y-dWX.text", tableName: "Voucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: 19 Mei, 14:08
      ///
      /// Locales: en, nl
      static let qGCRdVKiText = Rswift.StringResource(key: "qGC-Rd-vKi.text", tableName: "Voucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: 19 Mei, 14:08
      ///
      /// Locales: en, nl
      static let upHBBosText = Rswift.StringResource(key: "0Up-HB-Bos.text", tableName: "Voucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Activated
      ///
      /// Locales: en, nl
      static let cc7YHA8BText = Rswift.StringResource(key: "cc7-yH-a8B.text", tableName: "Voucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: E-mail to me
      ///
      /// Locales: en, nl
      static let mWIN4PEONormalTitle = Rswift.StringResource(key: "mWI-n4-pEO.normalTitle", tableName: "Voucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Er zijn nog geen transacties
      ///
      /// Locales: en, nl
      static let jnDO4FnText = Rswift.StringResource(key: "8jn-dO-4Fn.text", tableName: "Voucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: History
      ///
      /// Locales: en, nl
      static let s5YUiYruText = Rswift.StringResource(key: "S5Y-Ui-yru.text", tableName: "Voucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Item 2
      ///
      /// Locales: en, nl
      static let yc3WbYF5Title = Rswift.StringResource(key: "yc3-wb-YF5.title", tableName: "Voucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Kindpakket
      ///
      /// Locales: en, nl
      static let sdwCxCzaText = Rswift.StringResource(key: "Sdw-Cx-cza.text", tableName: "Voucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, nl
      static let ladBGS6NText = Rswift.StringResource(key: "Lad-bG-s6N.text", tableName: "Voucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, nl
      static let oJuTDyText = Rswift.StringResource(key: "05o-Ju-tDy.text", tableName: "Voucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Let the shopkeeper scan it to make a payment from your voucher.
      ///
      /// Locales: en, nl
      static let p7eXQMR9Text = Rswift.StringResource(key: "P7e-xQ-MR9.text", tableName: "Voucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: NOT 2 DAGEN GELDIG VALID
      ///
      /// Locales: en, nl
      static let w5t6WUeqText = Rswift.StringResource(key: "w5t-6W-ueq.text", tableName: "Voucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: QR-CODE
      ///
      /// Locales: en, nl
      static let sGxRgQ1LText = Rswift.StringResource(key: "sGx-Rg-q1L.text", tableName: "Voucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Rijwielhandel Kuis
      ///
      /// Locales: en, nl
      static let c89OHFyYText = Rswift.StringResource(key: "c89-oH-FyY.text", tableName: "Voucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This is your Voucher’s QR-code.
      ///
      /// Locales: en, nl
      static let xIxDD8s5Text = Rswift.StringResource(key: "xIx-dD-8s5.text", tableName: "Voucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Transaction
      ///
      /// Locales: en, nl
      static let pbV1UZtCText = Rswift.StringResource(key: "PbV-1U-ztC.text", tableName: "Voucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Voucher
      ///
      /// Locales: en, nl
      static let vIm8eAeUText = Rswift.StringResource(key: "vIm-8e-AeU.text", tableName: "Voucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Voucher Info
      ///
      /// Locales: en, nl
      static let kQA2yC8qNormalTitle = Rswift.StringResource(key: "kQA-2y-C8q.normalTitle", tableName: "Voucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: € 122,50
      ///
      /// Locales: en, nl
      static let ziozslcbText = Rswift.StringResource(key: "ZIO-zS-LCB.text", tableName: "Voucher", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: -2,76
      ///
      /// Locales: en, nl
      static func xmp1yDWXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Xmp-1y-dWX.text", tableName: "Voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Voucher", preferredLanguages: preferredLanguages) else {
          return "Xmp-1y-dWX.text"
        }

        return NSLocalizedString("Xmp-1y-dWX.text", tableName: "Voucher", bundle: bundle, comment: "")
      }

      /// en translation: 19 Mei, 14:08
      ///
      /// Locales: en, nl
      static func qGCRdVKiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("qGC-Rd-vKi.text", tableName: "Voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Voucher", preferredLanguages: preferredLanguages) else {
          return "qGC-Rd-vKi.text"
        }

        return NSLocalizedString("qGC-Rd-vKi.text", tableName: "Voucher", bundle: bundle, comment: "")
      }

      /// en translation: 19 Mei, 14:08
      ///
      /// Locales: en, nl
      static func upHBBosText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0Up-HB-Bos.text", tableName: "Voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Voucher", preferredLanguages: preferredLanguages) else {
          return "0Up-HB-Bos.text"
        }

        return NSLocalizedString("0Up-HB-Bos.text", tableName: "Voucher", bundle: bundle, comment: "")
      }

      /// en translation: Activated
      ///
      /// Locales: en, nl
      static func cc7YHA8BText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cc7-yH-a8B.text", tableName: "Voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Voucher", preferredLanguages: preferredLanguages) else {
          return "cc7-yH-a8B.text"
        }

        return NSLocalizedString("cc7-yH-a8B.text", tableName: "Voucher", bundle: bundle, comment: "")
      }

      /// en translation: E-mail to me
      ///
      /// Locales: en, nl
      static func mWIN4PEONormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mWI-n4-pEO.normalTitle", tableName: "Voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Voucher", preferredLanguages: preferredLanguages) else {
          return "mWI-n4-pEO.normalTitle"
        }

        return NSLocalizedString("mWI-n4-pEO.normalTitle", tableName: "Voucher", bundle: bundle, comment: "")
      }

      /// en translation: Er zijn nog geen transacties
      ///
      /// Locales: en, nl
      static func jnDO4FnText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8jn-dO-4Fn.text", tableName: "Voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Voucher", preferredLanguages: preferredLanguages) else {
          return "8jn-dO-4Fn.text"
        }

        return NSLocalizedString("8jn-dO-4Fn.text", tableName: "Voucher", bundle: bundle, comment: "")
      }

      /// en translation: History
      ///
      /// Locales: en, nl
      static func s5YUiYruText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("S5Y-Ui-yru.text", tableName: "Voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Voucher", preferredLanguages: preferredLanguages) else {
          return "S5Y-Ui-yru.text"
        }

        return NSLocalizedString("S5Y-Ui-yru.text", tableName: "Voucher", bundle: bundle, comment: "")
      }

      /// en translation: Item 2
      ///
      /// Locales: en, nl
      static func yc3WbYF5Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yc3-wb-YF5.title", tableName: "Voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Voucher", preferredLanguages: preferredLanguages) else {
          return "yc3-wb-YF5.title"
        }

        return NSLocalizedString("yc3-wb-YF5.title", tableName: "Voucher", bundle: bundle, comment: "")
      }

      /// en translation: Kindpakket
      ///
      /// Locales: en, nl
      static func sdwCxCzaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sdw-Cx-cza.text", tableName: "Voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Voucher", preferredLanguages: preferredLanguages) else {
          return "Sdw-Cx-cza.text"
        }

        return NSLocalizedString("Sdw-Cx-cza.text", tableName: "Voucher", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, nl
      static func ladBGS6NText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Lad-bG-s6N.text", tableName: "Voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Voucher", preferredLanguages: preferredLanguages) else {
          return "Lad-bG-s6N.text"
        }

        return NSLocalizedString("Lad-bG-s6N.text", tableName: "Voucher", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, nl
      static func oJuTDyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("05o-Ju-tDy.text", tableName: "Voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Voucher", preferredLanguages: preferredLanguages) else {
          return "05o-Ju-tDy.text"
        }

        return NSLocalizedString("05o-Ju-tDy.text", tableName: "Voucher", bundle: bundle, comment: "")
      }

      /// en translation: Let the shopkeeper scan it to make a payment from your voucher.
      ///
      /// Locales: en, nl
      static func p7eXQMR9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("P7e-xQ-MR9.text", tableName: "Voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Voucher", preferredLanguages: preferredLanguages) else {
          return "P7e-xQ-MR9.text"
        }

        return NSLocalizedString("P7e-xQ-MR9.text", tableName: "Voucher", bundle: bundle, comment: "")
      }

      /// en translation: NOT 2 DAGEN GELDIG VALID
      ///
      /// Locales: en, nl
      static func w5t6WUeqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("w5t-6W-ueq.text", tableName: "Voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Voucher", preferredLanguages: preferredLanguages) else {
          return "w5t-6W-ueq.text"
        }

        return NSLocalizedString("w5t-6W-ueq.text", tableName: "Voucher", bundle: bundle, comment: "")
      }

      /// en translation: QR-CODE
      ///
      /// Locales: en, nl
      static func sGxRgQ1LText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sGx-Rg-q1L.text", tableName: "Voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Voucher", preferredLanguages: preferredLanguages) else {
          return "sGx-Rg-q1L.text"
        }

        return NSLocalizedString("sGx-Rg-q1L.text", tableName: "Voucher", bundle: bundle, comment: "")
      }

      /// en translation: Rijwielhandel Kuis
      ///
      /// Locales: en, nl
      static func c89OHFyYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("c89-oH-FyY.text", tableName: "Voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Voucher", preferredLanguages: preferredLanguages) else {
          return "c89-oH-FyY.text"
        }

        return NSLocalizedString("c89-oH-FyY.text", tableName: "Voucher", bundle: bundle, comment: "")
      }

      /// en translation: This is your Voucher’s QR-code.
      ///
      /// Locales: en, nl
      static func xIxDD8s5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xIx-dD-8s5.text", tableName: "Voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Voucher", preferredLanguages: preferredLanguages) else {
          return "xIx-dD-8s5.text"
        }

        return NSLocalizedString("xIx-dD-8s5.text", tableName: "Voucher", bundle: bundle, comment: "")
      }

      /// en translation: Transaction
      ///
      /// Locales: en, nl
      static func pbV1UZtCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PbV-1U-ztC.text", tableName: "Voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Voucher", preferredLanguages: preferredLanguages) else {
          return "PbV-1U-ztC.text"
        }

        return NSLocalizedString("PbV-1U-ztC.text", tableName: "Voucher", bundle: bundle, comment: "")
      }

      /// en translation: Voucher
      ///
      /// Locales: en, nl
      static func vIm8eAeUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vIm-8e-AeU.text", tableName: "Voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Voucher", preferredLanguages: preferredLanguages) else {
          return "vIm-8e-AeU.text"
        }

        return NSLocalizedString("vIm-8e-AeU.text", tableName: "Voucher", bundle: bundle, comment: "")
      }

      /// en translation: Voucher Info
      ///
      /// Locales: en, nl
      static func kQA2yC8qNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kQA-2y-C8q.normalTitle", tableName: "Voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Voucher", preferredLanguages: preferredLanguages) else {
          return "kQA-2y-C8q.normalTitle"
        }

        return NSLocalizedString("kQA-2y-C8q.normalTitle", tableName: "Voucher", bundle: bundle, comment: "")
      }

      /// en translation: € 122,50
      ///
      /// Locales: en, nl
      static func ziozslcbText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ZIO-zS-LCB.text", tableName: "Voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Voucher", preferredLanguages: preferredLanguages) else {
          return "ZIO-zS-LCB.text"
        }

        return NSLocalizedString("ZIO-zS-LCB.text", tableName: "Voucher", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AppLocker.validate()
      try _BottomQrWithPinViewController.validate()
      try _OrganizationTableViewCell.validate()
      try _OrganizationValidatorTableViewCell.validate()
      try _OrganizationValidatorViewController.validate()
      try _PullUpQRViewController.validate()
      try _SendEtherViewController.validate()
      try _SuccessSendingViewController.validate()
    }

    struct _AllowedOrganizationsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AllowedOrganizationsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _AppLocker: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AppLocker"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AppLocker? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppLocker
      }

      static func validate() throws {
        if UIKit.UIImage(named: "backspaceBlue.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backspaceBlue.png' is used in nib 'AppLocker', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _BottomQrWithPinViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BottomQrWithPinViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "closeBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeBlack' is used in nib 'BottomQrWithPinViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageView:Vdb-YF-cMS:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:Vdb-YF-cMS:image' is used in nib 'BottomQrWithPinViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrImage2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrImage2' is used in nib 'BottomQrWithPinViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ConfirmPaymentPopUp: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ConfirmPaymentPopUp"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MCrashConfirmViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MCrashConfirmViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomCornerUIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomCornerUIView
      }

      fileprivate init() {}
    }

    struct _OrganizationTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OrganizationTableViewCell

      let bundle = R.hostingBundle
      let identifier = "OrganizationTableViewCell"
      let name = "OrganizationTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrganizationTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrganizationTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Resting", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Resting' is used in nib 'OrganizationTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OrganizationValidatorTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OrganizationValidatorTableViewCell

      let bundle = R.hostingBundle
      let identifier = "OrganizationValidatorTableViewCell"
      let name = "OrganizationValidatorTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrganizationValidatorTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrganizationValidatorTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "fill1Copy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fill1Copy' is used in nib 'OrganizationValidatorTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OrganizationValidatorViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrganizationValidatorViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "closeIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeIcon' is used in nib 'OrganizationValidatorViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PullUpQRViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PullUpQRViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "closeIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeIcon' is used in nib 'PullUpQRViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageView:uGu-yz-Ntp:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:uGu-yz-Ntp:image' is used in nib 'PullUpQRViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrImage2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrImage2' is used in nib 'PullUpQRViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SendEtherViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SendEtherViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'camera' is used in nib 'SendEtherViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SuccessSendingViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SuccessSendingViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "tick", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tick' is used in nib 'SuccessSendingViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try about.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try chooseTypeRecord.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try emailLogin.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try enablePersonalInformation.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try first.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try loginQRAndCodeViewController.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try payment.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try productReservation.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try productVoucher.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profile.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try recordDetail.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try recordValidators.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try successEmail.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try successRegister.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try textRecord.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try voucher.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct about: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "About"

      static func validate() throws {
        if UIKit.UIImage(named: "closeLines", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeLines' is used in storyboard 'About', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fill1Copy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fill1Copy' is used in storyboard 'About', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct chooseTypeRecord: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ChooseTypeRecord"
      let types = StoryboardViewControllerResource<MChooseTypeRecordViewController>(identifier: "types")
      let walk = StoryboardViewControllerResource<BWWalkthrough.BWWalkthroughViewController>(identifier: "walk")

      func types(_: Void = ()) -> MChooseTypeRecordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: types)
      }

      func walk(_: Void = ()) -> BWWalkthrough.BWWalkthroughViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walk)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "rounded", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rounded' is used in storyboard 'ChooseTypeRecord', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.chooseTypeRecord().types() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'types' could not be loaded from storyboard 'ChooseTypeRecord' as 'MChooseTypeRecordViewController'.") }
        if _R.storyboard.chooseTypeRecord().walk() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walk' could not be loaded from storyboard 'ChooseTypeRecord' as 'BWWalkthrough.BWWalkthroughViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct emailLogin: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MEmailLoginViewController

      let bundle = R.hostingBundle
      let name = "EmailLogin"

      static func validate() throws {
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'EmailLogin', but couldn't be loaded.") }
        if UIKit.UIImage(named: "proper", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'proper' is used in storyboard 'EmailLogin', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct enablePersonalInformation: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = EnablePersonalInformationViewController

      let bundle = R.hostingBundle
      let name = "EnablePersonalInformation"

      static func validate() throws {
        if UIKit.UIImage(named: "Me app", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Me app' is used in storyboard 'EnablePersonalInformation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'EnablePersonalInformation', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct first: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HiddenNavBarNavigationController

      let bundle = R.hostingBundle
      let first = StoryboardViewControllerResource<HiddenNavBarNavigationController>(identifier: "first")
      let firstPage = StoryboardViewControllerResource<MAFirstPageViewController>(identifier: "firstPage")
      let name = "First"

      func first(_: Void = ()) -> HiddenNavBarNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: first)
      }

      func firstPage(_: Void = ()) -> MAFirstPageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: firstPage)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "fill1Copy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fill1Copy' is used in storyboard 'First', but couldn't be loaded.") }
        if UIKit.UIImage(named: "proper", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'proper' is used in storyboard 'First', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.first().first() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'first' could not be loaded from storyboard 'First' as 'HiddenNavBarNavigationController'.") }
        if _R.storyboard.first().firstPage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'firstPage' could not be loaded from storyboard 'First' as 'MAFirstPageViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct loginQRAndCodeViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CommonPullUpViewController

      let bottom = StoryboardViewControllerResource<CommonBottomViewController>(identifier: "bottom")
      let bundle = R.hostingBundle
      let common = StoryboardViewControllerResource<CommonPullUpViewController>(identifier: "common")
      let content = StoryboardViewControllerResource<MLoginQRAndCodeViewController>(identifier: "content")
      let name = "LoginQRAndCodeViewController"

      func bottom(_: Void = ()) -> CommonBottomViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bottom)
      }

      func common(_: Void = ()) -> CommonPullUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: common)
      }

      func content(_: Void = ()) -> MLoginQRAndCodeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: content)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'LoginQRAndCodeViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "closeIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeIcon' is used in storyboard 'LoginQRAndCodeViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrCode", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrCode' is used in storyboard 'LoginQRAndCodeViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrImage2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrImage2' is used in storyboard 'LoginQRAndCodeViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.loginQRAndCodeViewController().bottom() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bottom' could not be loaded from storyboard 'LoginQRAndCodeViewController' as 'CommonBottomViewController'.") }
        if _R.storyboard.loginQRAndCodeViewController().common() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'common' could not be loaded from storyboard 'LoginQRAndCodeViewController' as 'CommonPullUpViewController'.") }
        if _R.storyboard.loginQRAndCodeViewController().content() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'content' could not be loaded from storyboard 'LoginQRAndCodeViewController' as 'MLoginQRAndCodeViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController

      let bundle = R.hostingBundle
      let name = "Main"
      let personal = StoryboardViewControllerResource<MRecordsViewController>(identifier: "personal")
      let qrCodeReader = StoryboardViewControllerResource<MQRViewController>(identifier: "qrCodeReader")
      let record = StoryboardViewControllerResource<HiddenNavBarNavigationController>(identifier: "record")
      let tabBar = StoryboardViewControllerResource<UIKit.UITabBarController>(identifier: "tabBar")

      func personal(_: Void = ()) -> MRecordsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: personal)
      }

      func qrCodeReader(_: Void = ()) -> MQRViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qrCodeReader)
      }

      func record(_: Void = ()) -> HiddenNavBarNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: record)
      }

      func tabBar(_: Void = ()) -> UIKit.UITabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabBar)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Resting", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Resting' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "activeBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'activeBlue' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "eth", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'eth' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconGrey' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "rectangle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rectangle' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "rectangleRed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rectangleRed' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wallet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wallet' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "systemGreenColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'systemGreenColor' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().personal() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'personal' could not be loaded from storyboard 'Main' as 'MRecordsViewController'.") }
        if _R.storyboard.main().qrCodeReader() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qrCodeReader' could not be loaded from storyboard 'Main' as 'MQRViewController'.") }
        if _R.storyboard.main().record() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'record' could not be loaded from storyboard 'Main' as 'HiddenNavBarNavigationController'.") }
        if _R.storyboard.main().tabBar() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabBar' could not be loaded from storyboard 'Main' as 'UIKit.UITabBarController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct payment: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MPaymentViewController

      let bundle = R.hostingBundle
      let content = StoryboardViewControllerResource<MPaymentViewController>(identifier: "content")
      let name = "Payment"

      func content(_: Void = ()) -> MPaymentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: content)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "5XVoucherSurface", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '5XVoucherSurface' is used in storyboard 'Payment', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'Payment', but couldn't be loaded.") }
        if UIKit.UIImage(named: "face24Px", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'face24Px' is used in storyboard 'Payment', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrV", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrV' is used in storyboard 'Payment', but couldn't be loaded.") }
        if UIKit.UIImage(named: "roundedRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'roundedRight' is used in storyboard 'Payment', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.payment().content() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'content' could not be loaded from storyboard 'Payment' as 'MPaymentViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct productReservation: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MProductReservationViewController

      let bundle = R.hostingBundle
      let name = "ProductReservation"

      static func validate() throws {
        if UIKit.UIImage(named: "5XVoucherSurface", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '5XVoucherSurface' is used in storyboard 'ProductReservation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Resting", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Resting' is used in storyboard 'ProductReservation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'ProductReservation', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct productVoucher: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CommonPullUpViewController

      let bottom = StoryboardViewControllerResource<CommonBottomViewController>(identifier: "bottom")
      let bundle = R.hostingBundle
      let content = StoryboardViewControllerResource<MProductVoucherViewController>(identifier: "content")
      let general = StoryboardViewControllerResource<CommonPullUpViewController>(identifier: "general")
      let name = "ProductVoucher"

      func bottom(_: Void = ()) -> CommonBottomViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bottom)
      }

      func content(_: Void = ()) -> MProductVoucherViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: content)
      }

      func general(_: Void = ()) -> CommonPullUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: general)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "5XVoucherSurface", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '5XVoucherSurface' is used in storyboard 'ProductVoucher', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'ProductVoucher', but couldn't be loaded.") }
        if UIKit.UIImage(named: "circular", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'circular' is used in storyboard 'ProductVoucher', but couldn't be loaded.") }
        if UIKit.UIImage(named: "closeIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeIcon' is used in storyboard 'ProductVoucher', but couldn't be loaded.") }
        if UIKit.UIImage(named: "email1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'email1' is used in storyboard 'ProductVoucher', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrCode", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrCode' is used in storyboard 'ProductVoucher', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrImage2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrImage2' is used in storyboard 'ProductVoucher', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrV", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrV' is used in storyboard 'ProductVoucher', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.productVoucher().bottom() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bottom' could not be loaded from storyboard 'ProductVoucher' as 'CommonBottomViewController'.") }
        if _R.storyboard.productVoucher().content() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'content' could not be loaded from storyboard 'ProductVoucher' as 'MProductVoucherViewController'.") }
        if _R.storyboard.productVoucher().general() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'general' could not be loaded from storyboard 'ProductVoucher' as 'CommonPullUpViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profile: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MProfileViewController

      let bottom = StoryboardViewControllerResource<CommonBottomViewController>(identifier: "bottom")
      let bundle = R.hostingBundle
      let content = StoryboardViewControllerResource<MProfileViewController>(identifier: "content")
      let general = StoryboardViewControllerResource<CommonPullUpViewController>(identifier: "general")
      let name = "Profile"

      func bottom(_: Void = ()) -> CommonBottomViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bottom)
      }

      func content(_: Void = ()) -> MProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: content)
      }

      func general(_: Void = ()) -> CommonPullUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: general)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "closeIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeIcon' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "faceId-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'faceId-1' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_launcher_APP", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_launcher_APP' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lock24Px-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lock24Px-1' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrCode", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrCode' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrImage' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrImage2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrImage2' is used in storyboard 'Profile', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.profile().bottom() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bottom' could not be loaded from storyboard 'Profile' as 'CommonBottomViewController'.") }
        if _R.storyboard.profile().content() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'content' could not be loaded from storyboard 'Profile' as 'MProfileViewController'.") }
        if _R.storyboard.profile().general() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'general' could not be loaded from storyboard 'Profile' as 'CommonPullUpViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct recordDetail: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CommonPullUpViewController

      let bottom = StoryboardViewControllerResource<CommonBottomViewController>(identifier: "bottom")
      let bundle = R.hostingBundle
      let content = StoryboardViewControllerResource<MRecordDetailViewController>(identifier: "content")
      let general = StoryboardViewControllerResource<CommonPullUpViewController>(identifier: "general")
      let name = "RecordDetail"

      func bottom(_: Void = ()) -> CommonBottomViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bottom)
      }

      func content(_: Void = ()) -> MRecordDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: content)
      }

      func general(_: Void = ()) -> CommonPullUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: general)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'RecordDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "closeIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeIcon' is used in storyboard 'RecordDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "delete24Px", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete24Px' is used in storyboard 'RecordDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_launcher_APP", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_launcher_APP' is used in storyboard 'RecordDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrCode", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrCode' is used in storyboard 'RecordDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrImage2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrImage2' is used in storyboard 'RecordDetail', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.recordDetail().bottom() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bottom' could not be loaded from storyboard 'RecordDetail' as 'CommonBottomViewController'.") }
        if _R.storyboard.recordDetail().content() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'content' could not be loaded from storyboard 'RecordDetail' as 'MRecordDetailViewController'.") }
        if _R.storyboard.recordDetail().general() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'general' could not be loaded from storyboard 'RecordDetail' as 'CommonPullUpViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct recordValidators: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MRecordValidatorsViewController

      let bundle = R.hostingBundle
      let name = "RecordValidators"
      let validators = StoryboardViewControllerResource<MRecordValidatorsViewController>(identifier: "validators")

      func validators(_: Void = ()) -> MRecordValidatorsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: validators)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'RecordValidators', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_launcher_APP", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_launcher_APP' is used in storyboard 'RecordValidators', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconPersonal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconPersonal' is used in storyboard 'RecordValidators', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.recordValidators().validators() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'validators' could not be loaded from storyboard 'RecordValidators' as 'MRecordValidatorsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct successEmail: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MSuccessEmailViewController

      let bundle = R.hostingBundle
      let name = "SuccessEmail"

      static func validate() throws {
        if UIKit.UIImage(named: "1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '1' is used in storyboard 'SuccessEmail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Shadow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Shadow' is used in storyboard 'SuccessEmail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'SuccessEmail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "illustration", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'illustration' is used in storyboard 'SuccessEmail', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct successRegister: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HiddenNavBarNavigationController

      let bundle = R.hostingBundle
      let name = "SuccessRegister"

      static func validate() throws {
        if UIKit.UIImage(named: "Done@1,5x 1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Done@1,5x 1' is used in storyboard 'SuccessRegister', but couldn't be loaded.") }
        if UIKit.UIImage(named: "IlustrationCheckmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'IlustrationCheckmark' is used in storyboard 'SuccessRegister', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct textRecord: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TextRecord"
      let text = StoryboardViewControllerResource<MTextRecordViewController>(identifier: "text")

      func text(_: Void = ()) -> MTextRecordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: text)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "closeIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeIcon' is used in storyboard 'TextRecord', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.textRecord().text() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'text' could not be loaded from storyboard 'TextRecord' as 'MTextRecordViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct voucher: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CommonPullUpViewController

      let bottom = StoryboardViewControllerResource<CommonBottomViewController>(identifier: "bottom")
      let bundle = R.hostingBundle
      let content = StoryboardViewControllerResource<MVoucherViewController>(identifier: "content")
      let general = StoryboardViewControllerResource<CommonPullUpViewController>(identifier: "general")
      let name = "Voucher"

      func bottom(_: Void = ()) -> CommonBottomViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: bottom)
      }

      func content(_: Void = ()) -> MVoucherViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: content)
      }

      func general(_: Void = ()) -> CommonPullUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: general)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "5XVoucherSurface", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '5XVoucherSurface' is used in storyboard 'Voucher', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Resting", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Resting' is used in storyboard 'Voucher', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'Voucher', but couldn't be loaded.") }
        if UIKit.UIImage(named: "closeIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeIcon' is used in storyboard 'Voucher', but couldn't be loaded.") }
        if UIKit.UIImage(named: "email1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'email1' is used in storyboard 'Voucher', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrCode", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrCode' is used in storyboard 'Voucher', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrImage2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrImage2' is used in storyboard 'Voucher', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrV", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrV' is used in storyboard 'Voucher', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.voucher().bottom() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'bottom' could not be loaded from storyboard 'Voucher' as 'CommonBottomViewController'.") }
        if _R.storyboard.voucher().content() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'content' could not be loaded from storyboard 'Voucher' as 'MVoucherViewController'.") }
        if _R.storyboard.voucher().general() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'general' could not be loaded from storyboard 'Voucher' as 'CommonPullUpViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
