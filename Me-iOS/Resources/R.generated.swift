//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import BWWalkthrough
import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    /// Storyboard `ChooseTypeRecord`.
    static let chooseTypeRecord = _R.storyboard.chooseTypeRecord()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Payment`.
    static let payment = _R.storyboard.payment()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `RecordDetail`.
    static let recordDetail = _R.storyboard.recordDetail()
    /// Storyboard `RecordValidators`.
    static let recordValidators = _R.storyboard.recordValidators()
    /// Storyboard `TextRecord`.
    static let textRecord = _R.storyboard.textRecord()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ChooseTypeRecord", bundle: ...)`
    static func chooseTypeRecord(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.chooseTypeRecord)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Payment", bundle: ...)`
    static func payment(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.payment)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "RecordDetail", bundle: ...)`
    static func recordDetail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.recordDetail)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "RecordValidators", bundle: ...)`
    static func recordValidators(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.recordValidators)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "TextRecord", bundle: ...)`
    static func textRecord(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.textRecord)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 22 colors.
  struct color {
    /// Color `Background_DarkTheme`.
    static let background_DarkTheme = Rswift.ColorResource(bundle: R.hostingBundle, name: "Background_DarkTheme")
    /// Color `Background_Voucher_DarkTheme`.
    static let background_Voucher_DarkTheme = Rswift.ColorResource(bundle: R.hostingBundle, name: "Background_Voucher_DarkTheme")
    /// Color `Black_Light_DarkTheme`.
    static let black_Light_DarkTheme = Rswift.ColorResource(bundle: R.hostingBundle, name: "Black_Light_DarkTheme")
    /// Color `Blue_DarkTheme`.
    static let blue_DarkTheme = Rswift.ColorResource(bundle: R.hostingBundle, name: "Blue_DarkTheme")
    /// Color `DarkGray_DarkTheme`.
    static let darkGray_DarkTheme = Rswift.ColorResource(bundle: R.hostingBundle, name: "DarkGray_DarkTheme")
    /// Color `GrayWithLight_Dark_DarkTheme`.
    static let grayWithLight_Dark_DarkTheme = Rswift.ColorResource(bundle: R.hostingBundle, name: "GrayWithLight_Dark_DarkTheme")
    /// Color `Gray_Dark_DarkTheme`.
    static let gray_Dark_DarkTheme = Rswift.ColorResource(bundle: R.hostingBundle, name: "Gray_Dark_DarkTheme")
    /// Color `Gray_Light_DarkTheme`.
    static let gray_Light_DarkTheme = Rswift.ColorResource(bundle: R.hostingBundle, name: "Gray_Light_DarkTheme")
    /// Color `LighGray_DarkTheme`.
    static let lighGray_DarkTheme = Rswift.ColorResource(bundle: R.hostingBundle, name: "LighGray_DarkTheme")
    /// Color `Light_Dark_Mode`.
    static let light_Dark_Mode = Rswift.ColorResource(bundle: R.hostingBundle, name: "Light_Dark_Mode")
    /// Color `Line_DarkMode`.
    static let line_DarkMode = Rswift.ColorResource(bundle: R.hostingBundle, name: "Line_DarkMode")
    /// Color `MainBodyColor`.
    static let mainBodyColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "MainBodyColor")
    /// Color `Profile_Button_DarkTheme`.
    static let profile_Button_DarkTheme = Rswift.ColorResource(bundle: R.hostingBundle, name: "Profile_Button_DarkTheme")
    /// Color `Profile_Row_DarkTheme`.
    static let profile_Row_DarkTheme = Rswift.ColorResource(bundle: R.hostingBundle, name: "Profile_Row_DarkTheme")
    /// Color `RecordBackgroundDetail_DarkTheme`.
    static let recordBackgroundDetail_DarkTheme = Rswift.ColorResource(bundle: R.hostingBundle, name: "RecordBackgroundDetail_DarkTheme")
    /// Color `RecordDetail_BackGround`.
    static let recordDetail_BackGround = Rswift.ColorResource(bundle: R.hostingBundle, name: "RecordDetail_BackGround")
    /// Color `Row_Switch_DarkTheme`.
    static let row_Switch_DarkTheme = Rswift.ColorResource(bundle: R.hostingBundle, name: "Row_Switch_DarkTheme")
    /// Color `Thin_Gray_DarkTheme`.
    static let thin_Gray_DarkTheme = Rswift.ColorResource(bundle: R.hostingBundle, name: "Thin_Gray_DarkTheme")
    /// Color `Thin_Light_Gray_DarkTheme`.
    static let thin_Light_Gray_DarkTheme = Rswift.ColorResource(bundle: R.hostingBundle, name: "Thin_Light_Gray_DarkTheme")
    /// Color `VoucherButton`.
    static let voucherButton = Rswift.ColorResource(bundle: R.hostingBundle, name: "VoucherButton")
    /// Color `WhiteBackgroundRecord_DarkTheme`.
    static let whiteBackgroundRecord_DarkTheme = Rswift.ColorResource(bundle: R.hostingBundle, name: "WhiteBackgroundRecord_DarkTheme")
    /// Color `WhiteBackground_DarkTheme`.
    static let whiteBackground_DarkTheme = Rswift.ColorResource(bundle: R.hostingBundle, name: "WhiteBackground_DarkTheme")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Background_DarkTheme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background_DarkTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background_DarkTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Background_Voucher_DarkTheme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background_Voucher_DarkTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background_Voucher_DarkTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Black_Light_DarkTheme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func black_Light_DarkTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.black_Light_DarkTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Blue_DarkTheme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blue_DarkTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blue_DarkTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DarkGray_DarkTheme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkGray_DarkTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkGray_DarkTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GrayWithLight_Dark_DarkTheme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grayWithLight_Dark_DarkTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grayWithLight_Dark_DarkTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Gray_Dark_DarkTheme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gray_Dark_DarkTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gray_Dark_DarkTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Gray_Light_DarkTheme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gray_Light_DarkTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gray_Light_DarkTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LighGray_DarkTheme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lighGray_DarkTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lighGray_DarkTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Light_Dark_Mode", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func light_Dark_Mode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.light_Dark_Mode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Line_DarkMode", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func line_DarkMode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.line_DarkMode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "MainBodyColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainBodyColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainBodyColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Profile_Button_DarkTheme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func profile_Button_DarkTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.profile_Button_DarkTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Profile_Row_DarkTheme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func profile_Row_DarkTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.profile_Row_DarkTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "RecordBackgroundDetail_DarkTheme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func recordBackgroundDetail_DarkTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.recordBackgroundDetail_DarkTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "RecordDetail_BackGround", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func recordDetail_BackGround(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.recordDetail_BackGround, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Row_Switch_DarkTheme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func row_Switch_DarkTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.row_Switch_DarkTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Thin_Gray_DarkTheme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func thin_Gray_DarkTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.thin_Gray_DarkTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Thin_Light_Gray_DarkTheme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func thin_Light_Gray_DarkTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.thin_Light_Gray_DarkTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "VoucherButton", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func voucherButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.voucherButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "WhiteBackgroundRecord_DarkTheme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func whiteBackgroundRecord_DarkTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.whiteBackgroundRecord_DarkTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "WhiteBackground_DarkTheme", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func whiteBackground_DarkTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.whiteBackground_DarkTheme, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 12 files.
  struct file {
    /// Resource file `GoogleSans-Bold.ttf`.
    static let googleSansBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleSans-Bold", pathExtension: "ttf")
    /// Resource file `GoogleSans-BoldItalic.ttf`.
    static let googleSansBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleSans-BoldItalic", pathExtension: "ttf")
    /// Resource file `GoogleSans-Italic.ttf`.
    static let googleSansItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleSans-Italic", pathExtension: "ttf")
    /// Resource file `GoogleSans-Medium.ttf`.
    static let googleSansMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleSans-Medium", pathExtension: "ttf")
    /// Resource file `GoogleSans-MediumItalic.ttf`.
    static let googleSansMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleSans-MediumItalic", pathExtension: "ttf")
    /// Resource file `GoogleSans-Regular.ttf`.
    static let googleSansRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleSans-Regular", pathExtension: "ttf")
    /// Resource file `LICENSE`.
    static let licensE = Rswift.FileResource(bundle: R.hostingBundle, name: "LICENSE", pathExtension: "")
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")
    /// Resource file `backspaceBlue.png`.
    static let backspaceBluePng = Rswift.FileResource(bundle: R.hostingBundle, name: "backspaceBlue", pathExtension: "png")
    /// Resource file `backspaceBlue@2x.png`.
    static let backspaceBlue2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "backspaceBlue@2x", pathExtension: "png")
    /// Resource file `backspaceBlue@3x.png`.
    static let backspaceBlue3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "backspaceBlue@3x", pathExtension: "png")
    /// Resource file `ic_check_3x.png`.
    static let ic_check_3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_check_3x", pathExtension: "png")

    /// `bundle.url(forResource: "GoogleSans-Bold", withExtension: "ttf")`
    static func googleSansBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleSansBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleSans-BoldItalic", withExtension: "ttf")`
    static func googleSansBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleSansBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleSans-Italic", withExtension: "ttf")`
    static func googleSansItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleSansItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleSans-Medium", withExtension: "ttf")`
    static func googleSansMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleSansMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleSans-MediumItalic", withExtension: "ttf")`
    static func googleSansMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleSansMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleSans-Regular", withExtension: "ttf")`
    static func googleSansRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleSansRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "LICENSE", withExtension: "")`
    static func licensE(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.licensE
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "backspaceBlue", withExtension: "png")`
    static func backspaceBluePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.backspaceBluePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "backspaceBlue@2x", withExtension: "png")`
    static func backspaceBlue2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.backspaceBlue2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "backspaceBlue@3x", withExtension: "png")`
    static func backspaceBlue3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.backspaceBlue3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_check_3x", withExtension: "png")`
    static func ic_check_3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_check_3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 6 fonts.
  struct font: Rswift.Validatable {
    /// Font `GoogleSans-BoldItalic`.
    static let googleSansBoldItalic = Rswift.FontResource(fontName: "GoogleSans-BoldItalic")
    /// Font `GoogleSans-Bold`.
    static let googleSansBold = Rswift.FontResource(fontName: "GoogleSans-Bold")
    /// Font `GoogleSans-Italic`.
    static let googleSansItalic = Rswift.FontResource(fontName: "GoogleSans-Italic")
    /// Font `GoogleSans-MediumItalic`.
    static let googleSansMediumItalic = Rswift.FontResource(fontName: "GoogleSans-MediumItalic")
    /// Font `GoogleSans-Medium`.
    static let googleSansMedium = Rswift.FontResource(fontName: "GoogleSans-Medium")
    /// Font `GoogleSans-Regular`.
    static let googleSansRegular = Rswift.FontResource(fontName: "GoogleSans-Regular")

    /// `UIFont(name: "GoogleSans-Bold", size: ...)`
    static func googleSansBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: googleSansBold, size: size)
    }

    /// `UIFont(name: "GoogleSans-BoldItalic", size: ...)`
    static func googleSansBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: googleSansBoldItalic, size: size)
    }

    /// `UIFont(name: "GoogleSans-Italic", size: ...)`
    static func googleSansItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: googleSansItalic, size: size)
    }

    /// `UIFont(name: "GoogleSans-Medium", size: ...)`
    static func googleSansMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: googleSansMedium, size: size)
    }

    /// `UIFont(name: "GoogleSans-MediumItalic", size: ...)`
    static func googleSansMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: googleSansMediumItalic, size: size)
    }

    /// `UIFont(name: "GoogleSans-Regular", size: ...)`
    static func googleSansRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: googleSansRegular, size: size)
    }

    static func validate() throws {
      if R.font.googleSansBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GoogleSans-Bold' could not be loaded, is 'GoogleSans-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.googleSansBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GoogleSans-BoldItalic' could not be loaded, is 'GoogleSans-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.googleSansItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GoogleSans-Italic' could not be loaded, is 'GoogleSans-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.googleSansMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GoogleSans-Medium' could not be loaded, is 'GoogleSans-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.googleSansMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GoogleSans-MediumItalic' could not be loaded, is 'GoogleSans-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.googleSansRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GoogleSans-Regular' could not be loaded, is 'GoogleSans-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 78 images.
  struct image {
    /// Image `5XVoucherContainerWElevation`.
    static let xVoucherContainerWElevation = Rswift.ImageResource(bundle: R.hostingBundle, name: "5XVoucherContainerWElevation")
    /// Image `Done@1,5x 1`.
    static let done15x1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Done@1,5x 1")
    /// Image `FlashlightOff`.
    static let flashlightOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "FlashlightOff")
    /// Image `FlashlightOn`.
    static let flashlightOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "FlashlightOn")
    /// Image `Illustration-1`.
    static let illustration1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Illustration-1")
    /// Image `IlustrationCheckmark`.
    static let ilustrationCheckmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "IlustrationCheckmark")
    /// Image `Me app`.
    static let meApp = Rswift.ImageResource(bundle: R.hostingBundle, name: "Me app")
    /// Image `Oval 2 Copy`.
    static let oval2Copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "Oval 2 Copy")
    /// Image `Resting`.
    static let resting = Rswift.ImageResource(bundle: R.hostingBundle, name: "Resting")
    /// Image `Shadow`.
    static let shadow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shadow")
    /// Image `activeBlue`.
    static let activeBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "activeBlue")
    /// Image `arrow_right_icon`.
    static let arrow_right_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_right_icon")
    /// Image `arrow`.
    static let arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow")
    /// Image `backCopy`.
    static let backCopy = Rswift.ImageResource(bundle: R.hostingBundle, name: "backCopy")
    /// Image `backIcon`.
    static let backIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "backIcon")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `backspaceBlue`.
    static let backspaceBlue = Rswift.ImageResource(bundle: R.hostingBundle, name: "backspaceBlue")
    /// Image `bottom_left_square_icon`.
    static let bottom_left_square_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "bottom_left_square_icon")
    /// Image `bottom_right_square_icon`.
    static let bottom_right_square_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "bottom_right_square_icon")
    /// Image `camera`.
    static let camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera")
    /// Image `carLocation`.
    static let carLocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "carLocation")
    /// Image `cellularNetwork`.
    static let cellularNetwork = Rswift.ImageResource(bundle: R.hostingBundle, name: "cellularNetwork")
    /// Image `check_authorize_icon`.
    static let check_authorize_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "check_authorize_icon")
    /// Image `circular`.
    static let circular = Rswift.ImageResource(bundle: R.hostingBundle, name: "circular")
    /// Image `clock_icon`.
    static let clock_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "clock_icon")
    /// Image `closeBlack`.
    static let closeBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "closeBlack")
    /// Image `closeIcon`.
    static let closeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "closeIcon")
    /// Image `closeLines`.
    static let closeLines = Rswift.ImageResource(bundle: R.hostingBundle, name: "closeLines")
    /// Image `combinedShapeQR`.
    static let combinedShapeQR = Rswift.ImageResource(bundle: R.hostingBundle, name: "combinedShapeQR")
    /// Image `combinedShape`.
    static let combinedShape = Rswift.ImageResource(bundle: R.hostingBundle, name: "combinedShape")
    /// Image `delete24Px`.
    static let delete24Px = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete24Px")
    /// Image `email1`.
    static let email1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "email1")
    /// Image `emailVoucher`.
    static let emailVoucher = Rswift.ImageResource(bundle: R.hostingBundle, name: "emailVoucher")
    /// Image `eth`.
    static let eth = Rswift.ImageResource(bundle: R.hostingBundle, name: "eth")
    /// Image `euro`.
    static let euro = Rswift.ImageResource(bundle: R.hostingBundle, name: "euro")
    /// Image `faceId-1`.
    static let faceId1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "faceId-1")
    /// Image `faceId`.
    static let faceId = Rswift.ImageResource(bundle: R.hostingBundle, name: "faceId")
    /// Image `face_icon`.
    static let face_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "face_icon")
    /// Image `headings`.
    static let headings = Rswift.ImageResource(bundle: R.hostingBundle, name: "headings")
    /// Image `homeIcon`.
    static let homeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "homeIcon")
    /// Image `ic_check_3x`.
    static let ic_check_3x = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check_3x")
    /// Image `ic_launcher_APP`.
    static let ic_launcher_APP = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_launcher_APP")
    /// Image `iconDigiD`.
    static let iconDigiD = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconDigiD")
    /// Image `iconGrey`.
    static let iconGrey = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconGrey")
    /// Image `iconVoucher`.
    static let iconVoucher = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconVoucher")
    /// Image `iconsBugreport`.
    static let iconsBugreport = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconsBugreport")
    /// Image `illustration`.
    static let illustration = Rswift.ImageResource(bundle: R.hostingBundle, name: "illustration")
    /// Image `location_icon`.
    static let location_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "location_icon")
    /// Image `lock24Px-1`.
    static let lock24Px1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock24Px-1")
    /// Image `lock24Px`.
    static let lock24Px = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock24Px")
    /// Image `lock_error_icon`.
    static let lock_error_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock_error_icon")
    /// Image `lock`.
    static let lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock")
    /// Image `logo_icon`.
    static let logo_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_icon")
    /// Image `nightMode`.
    static let nightMode = Rswift.ImageResource(bundle: R.hostingBundle, name: "nightMode")
    /// Image `notifications`.
    static let notifications = Rswift.ImageResource(bundle: R.hostingBundle, name: "notifications")
    /// Image `phoneIcon`.
    static let phoneIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "phoneIcon")
    /// Image `phone_icon`.
    static let phone_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "phone_icon")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `profileIcon`.
    static let profileIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileIcon")
    /// Image `proper`.
    static let proper = Rswift.ImageResource(bundle: R.hostingBundle, name: "proper")
    /// Image `qrCode`.
    static let qrCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrCode")
    /// Image `qrImage2`.
    static let qrImage2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrImage2")
    /// Image `qrImage`.
    static let qrImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "qrImage")
    /// Image `records`.
    static let records = Rswift.ImageResource(bundle: R.hostingBundle, name: "records")
    /// Image `rectangle2`.
    static let rectangle2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "rectangle2")
    /// Image `rectangleRed`.
    static let rectangleRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "rectangleRed")
    /// Image `rectangle`.
    static let rectangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "rectangle")
    /// Image `rounded`.
    static let rounded = Rswift.ImageResource(bundle: R.hostingBundle, name: "rounded")
    /// Image `splitIcon`.
    static let splitIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "splitIcon")
    /// Image `tick`.
    static let tick = Rswift.ImageResource(bundle: R.hostingBundle, name: "tick")
    /// Image `top_left_square_icon`.
    static let top_left_square_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "top_left_square_icon")
    /// Image `top_right_square_icon`.
    static let top_right_square_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "top_right_square_icon")
    /// Image `touchId`.
    static let touchId = Rswift.ImageResource(bundle: R.hostingBundle, name: "touchId")
    /// Image `transaction_icon`.
    static let transaction_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "transaction_icon")
    /// Image `userpick`.
    static let userpick = Rswift.ImageResource(bundle: R.hostingBundle, name: "userpick")
    /// Image `voucher_ticket_icon`.
    static let voucher_ticket_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "voucher_ticket_icon")
    /// Image `voucher`.
    static let voucher = Rswift.ImageResource(bundle: R.hostingBundle, name: "voucher")
    /// Image `wallet`.
    static let wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "5XVoucherContainerWElevation", bundle: ..., traitCollection: ...)`
    static func xVoucherContainerWElevation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xVoucherContainerWElevation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Done@1,5x 1", bundle: ..., traitCollection: ...)`
    static func done15x1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.done15x1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FlashlightOff", bundle: ..., traitCollection: ...)`
    static func flashlightOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flashlightOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FlashlightOn", bundle: ..., traitCollection: ...)`
    static func flashlightOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flashlightOn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Illustration-1", bundle: ..., traitCollection: ...)`
    static func illustration1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.illustration1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IlustrationCheckmark", bundle: ..., traitCollection: ...)`
    static func ilustrationCheckmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ilustrationCheckmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Me app", bundle: ..., traitCollection: ...)`
    static func meApp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meApp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Oval 2 Copy", bundle: ..., traitCollection: ...)`
    static func oval2Copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.oval2Copy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Resting", bundle: ..., traitCollection: ...)`
    static func resting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.resting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Shadow", bundle: ..., traitCollection: ...)`
    static func shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "activeBlue", bundle: ..., traitCollection: ...)`
    static func activeBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.activeBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow", bundle: ..., traitCollection: ...)`
    static func arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_right_icon", bundle: ..., traitCollection: ...)`
    static func arrow_right_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_right_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backCopy", bundle: ..., traitCollection: ...)`
    static func backCopy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backCopy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backIcon", bundle: ..., traitCollection: ...)`
    static func backIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backspaceBlue", bundle: ..., traitCollection: ...)`
    static func backspaceBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backspaceBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bottom_left_square_icon", bundle: ..., traitCollection: ...)`
    static func bottom_left_square_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bottom_left_square_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bottom_right_square_icon", bundle: ..., traitCollection: ...)`
    static func bottom_right_square_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bottom_right_square_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camera", bundle: ..., traitCollection: ...)`
    static func camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "carLocation", bundle: ..., traitCollection: ...)`
    static func carLocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carLocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cellularNetwork", bundle: ..., traitCollection: ...)`
    static func cellularNetwork(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellularNetwork, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check_authorize_icon", bundle: ..., traitCollection: ...)`
    static func check_authorize_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check_authorize_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "circular", bundle: ..., traitCollection: ...)`
    static func circular(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circular, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clock_icon", bundle: ..., traitCollection: ...)`
    static func clock_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clock_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "closeBlack", bundle: ..., traitCollection: ...)`
    static func closeBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "closeIcon", bundle: ..., traitCollection: ...)`
    static func closeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "closeLines", bundle: ..., traitCollection: ...)`
    static func closeLines(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeLines, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "combinedShape", bundle: ..., traitCollection: ...)`
    static func combinedShape(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.combinedShape, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "combinedShapeQR", bundle: ..., traitCollection: ...)`
    static func combinedShapeQR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.combinedShapeQR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete24Px", bundle: ..., traitCollection: ...)`
    static func delete24Px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete24Px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "email1", bundle: ..., traitCollection: ...)`
    static func email1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.email1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "emailVoucher", bundle: ..., traitCollection: ...)`
    static func emailVoucher(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emailVoucher, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eth", bundle: ..., traitCollection: ...)`
    static func eth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "euro", bundle: ..., traitCollection: ...)`
    static func euro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.euro, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "faceId", bundle: ..., traitCollection: ...)`
    static func faceId(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faceId, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "faceId-1", bundle: ..., traitCollection: ...)`
    static func faceId1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faceId1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "face_icon", bundle: ..., traitCollection: ...)`
    static func face_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.face_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "headings", bundle: ..., traitCollection: ...)`
    static func headings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.headings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homeIcon", bundle: ..., traitCollection: ...)`
    static func homeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_check_3x", bundle: ..., traitCollection: ...)`
    static func ic_check_3x(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check_3x, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_launcher_APP", bundle: ..., traitCollection: ...)`
    static func ic_launcher_APP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_launcher_APP, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconDigiD", bundle: ..., traitCollection: ...)`
    static func iconDigiD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconDigiD, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconGrey", bundle: ..., traitCollection: ...)`
    static func iconGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconGrey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconVoucher", bundle: ..., traitCollection: ...)`
    static func iconVoucher(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconVoucher, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconsBugreport", bundle: ..., traitCollection: ...)`
    static func iconsBugreport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconsBugreport, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "illustration", bundle: ..., traitCollection: ...)`
    static func illustration(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.illustration, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_icon", bundle: ..., traitCollection: ...)`
    static func location_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lock", bundle: ..., traitCollection: ...)`
    static func lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lock24Px", bundle: ..., traitCollection: ...)`
    static func lock24Px(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock24Px, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lock24Px-1", bundle: ..., traitCollection: ...)`
    static func lock24Px1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock24Px1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lock_error_icon", bundle: ..., traitCollection: ...)`
    static func lock_error_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock_error_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_icon", bundle: ..., traitCollection: ...)`
    static func logo_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "nightMode", bundle: ..., traitCollection: ...)`
    static func nightMode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nightMode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "notifications", bundle: ..., traitCollection: ...)`
    static func notifications(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notifications, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "phoneIcon", bundle: ..., traitCollection: ...)`
    static func phoneIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phoneIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "phone_icon", bundle: ..., traitCollection: ...)`
    static func phone_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phone_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profileIcon", bundle: ..., traitCollection: ...)`
    static func profileIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "proper", bundle: ..., traitCollection: ...)`
    static func proper(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.proper, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrCode", bundle: ..., traitCollection: ...)`
    static func qrCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrCode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrImage", bundle: ..., traitCollection: ...)`
    static func qrImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "qrImage2", bundle: ..., traitCollection: ...)`
    static func qrImage2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qrImage2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "records", bundle: ..., traitCollection: ...)`
    static func records(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.records, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rectangle", bundle: ..., traitCollection: ...)`
    static func rectangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rectangle2", bundle: ..., traitCollection: ...)`
    static func rectangle2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rectangleRed", bundle: ..., traitCollection: ...)`
    static func rectangleRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangleRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rounded", bundle: ..., traitCollection: ...)`
    static func rounded(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rounded, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splitIcon", bundle: ..., traitCollection: ...)`
    static func splitIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splitIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tick", bundle: ..., traitCollection: ...)`
    static func tick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "top_left_square_icon", bundle: ..., traitCollection: ...)`
    static func top_left_square_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.top_left_square_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "top_right_square_icon", bundle: ..., traitCollection: ...)`
    static func top_right_square_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.top_right_square_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "touchId", bundle: ..., traitCollection: ...)`
    static func touchId(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.touchId, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "transaction_icon", bundle: ..., traitCollection: ...)`
    static func transaction_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transaction_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "userpick", bundle: ..., traitCollection: ...)`
    static func userpick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userpick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voucher", bundle: ..., traitCollection: ...)`
    static func voucher(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voucher, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "voucher_ticket_icon", bundle: ..., traitCollection: ...)`
    static func voucher_ticket_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.voucher_ticket_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wallet", bundle: ..., traitCollection: ...)`
    static func wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 10 nibs.
  struct nib {
    /// Nib `AllowedOrganizationsViewController`.
    static let allowedOrganizationsViewController = _R.nib._AllowedOrganizationsViewController()
    /// Nib `AppLocker`.
    static let appLocker = _R.nib._AppLocker()
    /// Nib `BottomQrWithPinViewController`.
    static let bottomQrWithPinViewController = _R.nib._BottomQrWithPinViewController()
    /// Nib `ConfirmPaymentPopUp`.
    static let confirmPaymentPopUp = _R.nib._ConfirmPaymentPopUp()
    /// Nib `OrganizationTableViewCell`.
    static let organizationTableViewCell = _R.nib._OrganizationTableViewCell()
    /// Nib `OrganizationValidatorTableViewCell`.
    static let organizationValidatorTableViewCell = _R.nib._OrganizationValidatorTableViewCell()
    /// Nib `OrganizationValidatorViewController`.
    static let organizationValidatorViewController = _R.nib._OrganizationValidatorViewController()
    /// Nib `PullUpQRViewController`.
    static let pullUpQRViewController = _R.nib._PullUpQRViewController()
    /// Nib `SendEtherViewController`.
    static let sendEtherViewController = _R.nib._SendEtherViewController()
    /// Nib `SuccessSendingViewController`.
    static let successSendingViewController = _R.nib._SuccessSendingViewController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AllowedOrganizationsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.allowedOrganizationsViewController) instead")
    static func allowedOrganizationsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.allowedOrganizationsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AppLocker", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.appLocker) instead")
    static func appLocker(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.appLocker)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BottomQrWithPinViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bottomQrWithPinViewController) instead")
    static func bottomQrWithPinViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bottomQrWithPinViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ConfirmPaymentPopUp", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.confirmPaymentPopUp) instead")
    static func confirmPaymentPopUp(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.confirmPaymentPopUp)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrganizationTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.organizationTableViewCell) instead")
    static func organizationTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.organizationTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrganizationValidatorTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.organizationValidatorTableViewCell) instead")
    static func organizationValidatorTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.organizationValidatorTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrganizationValidatorViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.organizationValidatorViewController) instead")
    static func organizationValidatorViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.organizationValidatorViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PullUpQRViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pullUpQRViewController) instead")
    static func pullUpQRViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pullUpQRViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SendEtherViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sendEtherViewController) instead")
    static func sendEtherViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sendEtherViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SuccessSendingViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.successSendingViewController) instead")
    static func successSendingViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.successSendingViewController)
    }
    #endif

    static func allowedOrganizationsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.allowedOrganizationsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func appLocker(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AppLocker? {
      return R.nib.appLocker.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppLocker
    }

    static func bottomQrWithPinViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.bottomQrWithPinViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func confirmPaymentPopUp(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.confirmPaymentPopUp.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func organizationTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrganizationTableViewCell? {
      return R.nib.organizationTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrganizationTableViewCell
    }

    static func organizationValidatorTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrganizationValidatorTableViewCell? {
      return R.nib.organizationValidatorTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrganizationValidatorTableViewCell
    }

    static func organizationValidatorViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.organizationValidatorViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func pullUpQRViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.pullUpQRViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func sendEtherViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.sendEtherViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func successSendingViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.successSendingViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `OrganizationTableViewCell`.
    static let organizationTableViewCell: Rswift.ReuseIdentifier<OrganizationTableViewCell> = Rswift.ReuseIdentifier(identifier: "OrganizationTableViewCell")
    /// Reuse identifier `OrganizationValidatorTableViewCell`.
    static let organizationValidatorTableViewCell: Rswift.ReuseIdentifier<OrganizationValidatorTableViewCell> = Rswift.ReuseIdentifier(identifier: "OrganizationValidatorTableViewCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 14 localization tables.
  struct string {
    /// This `R.string.allowedOrganizationsViewController` struct is generated, and contains static references to 1 localization keys.
    struct allowedOrganizationsViewController {
      /// en translation: Organization Account
      ///
      /// Locales: en, nl
      static let qYXMEkXText = Rswift.StringResource(key: "8qY-XM-EkX.text", tableName: "AllowedOrganizationsViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: Organization Account
      ///
      /// Locales: en, nl
      static func qYXMEkXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("8qY-XM-EkX.text", tableName: "AllowedOrganizationsViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AllowedOrganizationsViewController", preferredLanguages: preferredLanguages) else {
          return "8qY-XM-EkX.text"
        }

        return NSLocalizedString("8qY-XM-EkX.text", tableName: "AllowedOrganizationsViewController", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.appLocker` struct is generated, and contains static references to 12 localization keys.
    struct appLocker {
      /// en translation: 0
      ///
      /// Locales: en, nl
      static let hQBBPFZgNormalTitle = Rswift.StringResource(key: "hQB-bP-FZg.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: 1
      ///
      /// Locales: en, nl
      static let uxb3y6MPNormalTitle = Rswift.StringResource(key: "uxb-3y-6MP.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: 2
      ///
      /// Locales: en, nl
      static let hjzbt9ebNormalTitle = Rswift.StringResource(key: "HJZ-BT-9eb.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: 3
      ///
      /// Locales: en, nl
      static let cogNdUYdNormalTitle = Rswift.StringResource(key: "cog-Nd-UYd.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: 4
      ///
      /// Locales: en, nl
      static let uJnA6MYeNormalTitle = Rswift.StringResource(key: "UJn-a6-MYe.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: 5
      ///
      /// Locales: en, nl
      static let svaSsJmvNormalTitle = Rswift.StringResource(key: "sva-ss-Jmv.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: 6
      ///
      /// Locales: en, nl
      static let uveTi7yaNormalTitle = Rswift.StringResource(key: "uve-ti-7ya.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: 7
      ///
      /// Locales: en, nl
      static let rAE1LZxNNormalTitle = Rswift.StringResource(key: "rAE-1L-zxN.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: 8
      ///
      /// Locales: en, nl
      static let abqS3WbINormalTitle = Rswift.StringResource(key: "abq-s3-wbI.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: 9
      ///
      /// Locales: en, nl
      static let cKDQEN40NormalTitle = Rswift.StringResource(key: "cKD-qE-N40.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, nl
      static let ciu9QOSgNormalTitle = Rswift.StringResource(key: "CIU-9Q-OSg.normalTitle", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Message
      ///
      /// Locales: en, nl
      static let biAIv5oKText = Rswift.StringResource(key: "BiA-iv-5oK.text", tableName: "AppLocker", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: 0
      ///
      /// Locales: en, nl
      static func hQBBPFZgNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hQB-bP-FZg.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "hQB-bP-FZg.normalTitle"
        }

        return NSLocalizedString("hQB-bP-FZg.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: 1
      ///
      /// Locales: en, nl
      static func uxb3y6MPNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uxb-3y-6MP.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "uxb-3y-6MP.normalTitle"
        }

        return NSLocalizedString("uxb-3y-6MP.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: 2
      ///
      /// Locales: en, nl
      static func hjzbt9ebNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HJZ-BT-9eb.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "HJZ-BT-9eb.normalTitle"
        }

        return NSLocalizedString("HJZ-BT-9eb.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: 3
      ///
      /// Locales: en, nl
      static func cogNdUYdNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cog-Nd-UYd.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "cog-Nd-UYd.normalTitle"
        }

        return NSLocalizedString("cog-Nd-UYd.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: 4
      ///
      /// Locales: en, nl
      static func uJnA6MYeNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UJn-a6-MYe.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "UJn-a6-MYe.normalTitle"
        }

        return NSLocalizedString("UJn-a6-MYe.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: 5
      ///
      /// Locales: en, nl
      static func svaSsJmvNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sva-ss-Jmv.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "sva-ss-Jmv.normalTitle"
        }

        return NSLocalizedString("sva-ss-Jmv.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: 6
      ///
      /// Locales: en, nl
      static func uveTi7yaNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uve-ti-7ya.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "uve-ti-7ya.normalTitle"
        }

        return NSLocalizedString("uve-ti-7ya.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: 7
      ///
      /// Locales: en, nl
      static func rAE1LZxNNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rAE-1L-zxN.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "rAE-1L-zxN.normalTitle"
        }

        return NSLocalizedString("rAE-1L-zxN.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: 8
      ///
      /// Locales: en, nl
      static func abqS3WbINormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("abq-s3-wbI.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "abq-s3-wbI.normalTitle"
        }

        return NSLocalizedString("abq-s3-wbI.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: 9
      ///
      /// Locales: en, nl
      static func cKDQEN40NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cKD-qE-N40.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "cKD-qE-N40.normalTitle"
        }

        return NSLocalizedString("cKD-qE-N40.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, nl
      static func ciu9QOSgNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CIU-9Q-OSg.normalTitle", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "CIU-9Q-OSg.normalTitle"
        }

        return NSLocalizedString("CIU-9Q-OSg.normalTitle", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      /// en translation: Message
      ///
      /// Locales: en, nl
      static func biAIv5oKText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BiA-iv-5oK.text", tableName: "AppLocker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "AppLocker", preferredLanguages: preferredLanguages) else {
          return "BiA-iv-5oK.text"
        }

        return NSLocalizedString("BiA-iv-5oK.text", tableName: "AppLocker", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.bottomQrWithPinViewController` struct is generated, and contains static references to 8 localization keys.
    struct bottomQrWithPinViewController {
      /// en translation: CONNECT DEVICE
      ///
      /// Locales: en, nl
      static let mrZRGZPCText = Rswift.StringResource(key: "mrZ-rG-zPC.text", tableName: "BottomQrWithPinViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Scan this QR-Code with a device you are already logged in
      ///
      /// Locales: en, nl
      static let da1V9PIhText = Rswift.StringResource(key: "DA1-v9-PIh.text", tableName: "BottomQrWithPinViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This is your pairing code
      ///
      /// Locales: en, nl
      static let jr0D79x9Text = Rswift.StringResource(key: "Jr0-D7-9x9.text", tableName: "BottomQrWithPinViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: • 
      ///
      /// Locales: en, nl
      static let ip2RH2r5Text = Rswift.StringResource(key: "ip2-RH-2r5.text", tableName: "BottomQrWithPinViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: • 
      ///
      /// Locales: en, nl
      static let mXfTDC8TText = Rswift.StringResource(key: "MXf-TD-C8T.text", tableName: "BottomQrWithPinViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: • 
      ///
      /// Locales: en, nl
      static let nnDLKHwHText = Rswift.StringResource(key: "NnD-lK-HwH.text", tableName: "BottomQrWithPinViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: • 
      ///
      /// Locales: en, nl
      static let xHhUpOffText = Rswift.StringResource(key: "xHh-up-Off.text", tableName: "BottomQrWithPinViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: • 
      ///
      /// Locales: en, nl
      static let xp17mW8DText = Rswift.StringResource(key: "XP1-7m-w8D.text", tableName: "BottomQrWithPinViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: CONNECT DEVICE
      ///
      /// Locales: en, nl
      static func mrZRGZPCText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mrZ-rG-zPC.text", tableName: "BottomQrWithPinViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BottomQrWithPinViewController", preferredLanguages: preferredLanguages) else {
          return "mrZ-rG-zPC.text"
        }

        return NSLocalizedString("mrZ-rG-zPC.text", tableName: "BottomQrWithPinViewController", bundle: bundle, comment: "")
      }

      /// en translation: Scan this QR-Code with a device you are already logged in
      ///
      /// Locales: en, nl
      static func da1V9PIhText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DA1-v9-PIh.text", tableName: "BottomQrWithPinViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BottomQrWithPinViewController", preferredLanguages: preferredLanguages) else {
          return "DA1-v9-PIh.text"
        }

        return NSLocalizedString("DA1-v9-PIh.text", tableName: "BottomQrWithPinViewController", bundle: bundle, comment: "")
      }

      /// en translation: This is your pairing code
      ///
      /// Locales: en, nl
      static func jr0D79x9Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Jr0-D7-9x9.text", tableName: "BottomQrWithPinViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BottomQrWithPinViewController", preferredLanguages: preferredLanguages) else {
          return "Jr0-D7-9x9.text"
        }

        return NSLocalizedString("Jr0-D7-9x9.text", tableName: "BottomQrWithPinViewController", bundle: bundle, comment: "")
      }

      /// en translation: • 
      ///
      /// Locales: en, nl
      static func ip2RH2r5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ip2-RH-2r5.text", tableName: "BottomQrWithPinViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BottomQrWithPinViewController", preferredLanguages: preferredLanguages) else {
          return "ip2-RH-2r5.text"
        }

        return NSLocalizedString("ip2-RH-2r5.text", tableName: "BottomQrWithPinViewController", bundle: bundle, comment: "")
      }

      /// en translation: • 
      ///
      /// Locales: en, nl
      static func mXfTDC8TText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MXf-TD-C8T.text", tableName: "BottomQrWithPinViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BottomQrWithPinViewController", preferredLanguages: preferredLanguages) else {
          return "MXf-TD-C8T.text"
        }

        return NSLocalizedString("MXf-TD-C8T.text", tableName: "BottomQrWithPinViewController", bundle: bundle, comment: "")
      }

      /// en translation: • 
      ///
      /// Locales: en, nl
      static func nnDLKHwHText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NnD-lK-HwH.text", tableName: "BottomQrWithPinViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BottomQrWithPinViewController", preferredLanguages: preferredLanguages) else {
          return "NnD-lK-HwH.text"
        }

        return NSLocalizedString("NnD-lK-HwH.text", tableName: "BottomQrWithPinViewController", bundle: bundle, comment: "")
      }

      /// en translation: • 
      ///
      /// Locales: en, nl
      static func xHhUpOffText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xHh-up-Off.text", tableName: "BottomQrWithPinViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BottomQrWithPinViewController", preferredLanguages: preferredLanguages) else {
          return "xHh-up-Off.text"
        }

        return NSLocalizedString("xHh-up-Off.text", tableName: "BottomQrWithPinViewController", bundle: bundle, comment: "")
      }

      /// en translation: • 
      ///
      /// Locales: en, nl
      static func xp17mW8DText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XP1-7m-w8D.text", tableName: "BottomQrWithPinViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "BottomQrWithPinViewController", preferredLanguages: preferredLanguages) else {
          return "XP1-7m-w8D.text"
        }

        return NSLocalizedString("XP1-7m-w8D.text", tableName: "BottomQrWithPinViewController", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.chooseTypeRecord` struct is generated, and contains static references to 6 localization keys.
    struct chooseTypeRecord {
      /// en translation: Choose Type
      ///
      /// Locales: en, nl
      static let tl7TyEwcText = Rswift.StringResource(key: "tl7-ty-Ewc.text", tableName: "ChooseTypeRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: E-mail
      ///
      /// Locales: en, nl
      static let qdMHrEehText = Rswift.StringResource(key: "QdM-Hr-eeh.text", tableName: "ChooseTypeRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: New Record
      ///
      /// Locales: en, nl
      static let aJp31KeLText = Rswift.StringResource(key: "AJp-31-keL.text", tableName: "ChooseTypeRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Next step
      ///
      /// Locales: en, nl
      static let rd6NkBSjNormalTitle = Rswift.StringResource(key: "Rd6-nk-bSj.normalTitle", tableName: "ChooseTypeRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Personal
      ///
      /// Locales: en, nl
      static let gPmBKJzaNormalTitle = Rswift.StringResource(key: "gPm-bK-jza.normalTitle", tableName: "ChooseTypeRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Select the category under which the new record type should be added.
      ///
      /// Locales: en, nl
      static let ukwWnIuwText = Rswift.StringResource(key: "UKW-Wn-Iuw.text", tableName: "ChooseTypeRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: Choose Type
      ///
      /// Locales: en, nl
      static func tl7TyEwcText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tl7-ty-Ewc.text", tableName: "ChooseTypeRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ChooseTypeRecord", preferredLanguages: preferredLanguages) else {
          return "tl7-ty-Ewc.text"
        }

        return NSLocalizedString("tl7-ty-Ewc.text", tableName: "ChooseTypeRecord", bundle: bundle, comment: "")
      }

      /// en translation: E-mail
      ///
      /// Locales: en, nl
      static func qdMHrEehText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("QdM-Hr-eeh.text", tableName: "ChooseTypeRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ChooseTypeRecord", preferredLanguages: preferredLanguages) else {
          return "QdM-Hr-eeh.text"
        }

        return NSLocalizedString("QdM-Hr-eeh.text", tableName: "ChooseTypeRecord", bundle: bundle, comment: "")
      }

      /// en translation: New Record
      ///
      /// Locales: en, nl
      static func aJp31KeLText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AJp-31-keL.text", tableName: "ChooseTypeRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ChooseTypeRecord", preferredLanguages: preferredLanguages) else {
          return "AJp-31-keL.text"
        }

        return NSLocalizedString("AJp-31-keL.text", tableName: "ChooseTypeRecord", bundle: bundle, comment: "")
      }

      /// en translation: Next step
      ///
      /// Locales: en, nl
      static func rd6NkBSjNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rd6-nk-bSj.normalTitle", tableName: "ChooseTypeRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ChooseTypeRecord", preferredLanguages: preferredLanguages) else {
          return "Rd6-nk-bSj.normalTitle"
        }

        return NSLocalizedString("Rd6-nk-bSj.normalTitle", tableName: "ChooseTypeRecord", bundle: bundle, comment: "")
      }

      /// en translation: Personal
      ///
      /// Locales: en, nl
      static func gPmBKJzaNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gPm-bK-jza.normalTitle", tableName: "ChooseTypeRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ChooseTypeRecord", preferredLanguages: preferredLanguages) else {
          return "gPm-bK-jza.normalTitle"
        }

        return NSLocalizedString("gPm-bK-jza.normalTitle", tableName: "ChooseTypeRecord", bundle: bundle, comment: "")
      }

      /// en translation: Select the category under which the new record type should be added.
      ///
      /// Locales: en, nl
      static func ukwWnIuwText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UKW-Wn-Iuw.text", tableName: "ChooseTypeRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ChooseTypeRecord", preferredLanguages: preferredLanguages) else {
          return "UKW-Wn-Iuw.text"
        }

        return NSLocalizedString("UKW-Wn-Iuw.text", tableName: "ChooseTypeRecord", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.confirmPaymentPopUp` struct is generated, and contains static references to 5 localization keys.
    struct confirmPaymentPopUp {
      /// en translation: Are you sure you want to pay      €140?
      ///
      /// Locales: en, nl
      static let yYRZqCf0Text = Rswift.StringResource(key: "yYR-Zq-Cf0.text", tableName: "ConfirmPaymentPopUp", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: CONFIRM
      ///
      /// Locales: en, nl
      static let bujqCpNormalTitle = Rswift.StringResource(key: "69B-uJ-QCp.normalTitle", tableName: "ConfirmPaymentPopUp", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Confirm transaction
      ///
      /// Locales: en, nl
      static let dBuVIFVrText = Rswift.StringResource(key: "dBu-VI-fVr.text", tableName: "ConfirmPaymentPopUp", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: DECLINE
      ///
      /// Locales: en, nl
      static let buJFY5YsNormalTitle = Rswift.StringResource(key: "BuJ-fY-5Ys.normalTitle", tableName: "ConfirmPaymentPopUp", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Insufficient funds on the voucher.  Please, request extra payment of € 20
      ///
      /// Locales: en, nl
      static let snKYGX66Text = Rswift.StringResource(key: "SnK-yG-X66.text", tableName: "ConfirmPaymentPopUp", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: Are you sure you want to pay      €140?
      ///
      /// Locales: en, nl
      static func yYRZqCf0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yYR-Zq-Cf0.text", tableName: "ConfirmPaymentPopUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ConfirmPaymentPopUp", preferredLanguages: preferredLanguages) else {
          return "yYR-Zq-Cf0.text"
        }

        return NSLocalizedString("yYR-Zq-Cf0.text", tableName: "ConfirmPaymentPopUp", bundle: bundle, comment: "")
      }

      /// en translation: CONFIRM
      ///
      /// Locales: en, nl
      static func bujqCpNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("69B-uJ-QCp.normalTitle", tableName: "ConfirmPaymentPopUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ConfirmPaymentPopUp", preferredLanguages: preferredLanguages) else {
          return "69B-uJ-QCp.normalTitle"
        }

        return NSLocalizedString("69B-uJ-QCp.normalTitle", tableName: "ConfirmPaymentPopUp", bundle: bundle, comment: "")
      }

      /// en translation: Confirm transaction
      ///
      /// Locales: en, nl
      static func dBuVIFVrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dBu-VI-fVr.text", tableName: "ConfirmPaymentPopUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ConfirmPaymentPopUp", preferredLanguages: preferredLanguages) else {
          return "dBu-VI-fVr.text"
        }

        return NSLocalizedString("dBu-VI-fVr.text", tableName: "ConfirmPaymentPopUp", bundle: bundle, comment: "")
      }

      /// en translation: DECLINE
      ///
      /// Locales: en, nl
      static func buJFY5YsNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("BuJ-fY-5Ys.normalTitle", tableName: "ConfirmPaymentPopUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ConfirmPaymentPopUp", preferredLanguages: preferredLanguages) else {
          return "BuJ-fY-5Ys.normalTitle"
        }

        return NSLocalizedString("BuJ-fY-5Ys.normalTitle", tableName: "ConfirmPaymentPopUp", bundle: bundle, comment: "")
      }

      /// en translation: Insufficient funds on the voucher.  Please, request extra payment of € 20
      ///
      /// Locales: en, nl
      static func snKYGX66Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SnK-yG-X66.text", tableName: "ConfirmPaymentPopUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ConfirmPaymentPopUp", preferredLanguages: preferredLanguages) else {
          return "SnK-yG-X66.text"
        }

        return NSLocalizedString("SnK-yG-X66.text", tableName: "ConfirmPaymentPopUp", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 200 localization keys.
    struct localizable {
      /// en translation: %@ Branches
      ///
      /// Locales: en, nl
      static let branches = Rswift.StringResource(key: "branches", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: %@ Don't Available
      ///
      /// Locales: en, nl
      static let dont_available = Rswift.StringResource(key: "dont_available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: %@ Lockout Please go to the Settings & Turn On Passcode
      ///
      /// Locales: en, nl
      static let lockout_please_go_to_settings_turn_on_passcode = Rswift.StringResource(key: "lockout_please_go_to_settings_turn_on_passcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: %@ Not Enrolled
      ///
      /// Locales: en, nl
      static let not_enrolled = Rswift.StringResource(key: "not_enrolled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: -voucher in the form of a QR-code
      ///
      /// Locales: en, nl
      static let voucher_in_the_form_qr_code = Rswift.StringResource(key: "voucher_in_the_form_qr_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: A payment of € 0.01 is too low to be paid out, choose a higher amount.
      ///
      /// Locales: en
      static let payment_of_001_is_to_low_to_be_paid_out_choose_highe_amount = Rswift.StringResource(key: "payment_of_0.01_is_to_low_to_be_paid_out_choose_highe_amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: A record has been validated!
      ///
      /// Locales: en, nl
      static let a_record_has_been_validated = Rswift.StringResource(key: "a_record_has_been_validated", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: About Me
      ///
      /// Locales: en, nl
      static let about_me = Rswift.StringResource(key: "about_me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Activated
      ///
      /// Locales: en, nl
      static let activated = Rswift.StringResource(key: "activated", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: en, nl
      static let address = Rswift.StringResource(key: "address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Amount of children
      ///
      /// Locales: en, nl
      static let children_nth = Rswift.StringResource(key: "children_nth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: An e-mail has been sent to %@. Click the link in the email to sign up.
      ///
      /// Locales: en, nl
      static let click_on_link_you_received_continue = Rswift.StringResource(key: "click_on_link_you_received_continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: App Cancel
      ///
      /// Locales: en, nl
      static let app_cancel = Rswift.StringResource(key: "app_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Are you sure you want to confirm this transaction.
      ///
      /// Locales: en, nl
      static let are_you_sure_you_want_confirm_transaction = Rswift.StringResource(key: "are_you_sure_you_want_confirm_transaction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Are you sure you want to log out?
      ///
      /// Locales: en, nl
      static let are_you_sure_you_want_log_out = Rswift.StringResource(key: "are_you_sure_you_want_log_out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Authentication Failed
      ///
      /// Locales: en, nl
      static let authentification_failed = Rswift.StringResource(key: "authentification_failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: BSN
      ///
      /// Locales: en, nl
      static let bsn = Rswift.StringResource(key: "bsn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Before we get started, please confirm your email address.
      ///
      /// Locales: en, nl
      static let before_we_get_started_please_confirm_your_email_address = Rswift.StringResource(key: "before_we_get_started_please_confirm_your_email_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Bevestig uw emailadres
      ///
      /// Locales: en, nl
      static let bevestig_uw_emailadres = Rswift.StringResource(key: "bevestig_uw_emailadres", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Business
      ///
      /// Locales: en
      static let business = Rswift.StringResource(key: "business", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: By sharing your identification number, problems can be solved faster. If needed the developers can contact you as well.
      ///
      /// Locales: en, nl
      static let sharing_identification_number_info = Rswift.StringResource(key: "sharing_identification_number_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: COMPLETE AN AMOUNT
      ///
      /// Locales: en, nl
      static let complete_amount = Rswift.StringResource(key: "complete_amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Camera permission request was denied.
      ///
      /// Locales: en, nl
      static let camera_permission_request_was_denied = Rswift.StringResource(key: "camera_permission_request_was_denied", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, nl
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Certificates
      ///
      /// Locales: en, nl
      static let certificates = Rswift.StringResource(key: "certificates", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Change passcode
      ///
      /// Locales: en, nl
      static let change_passcode = Rswift.StringResource(key: "change_passcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Children
      ///
      /// Locales: en, nl
      static let children = Rswift.StringResource(key: "children", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Choose Reservation
      ///
      /// Locales: en, nl
      static let choose_reservation = Rswift.StringResource(key: "choose_reservation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Choose from date
      ///
      /// Locales: en, nl
      static let choose_from_date = Rswift.StringResource(key: "choose_from_date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Choose organization
      ///
      /// Locales: en, nl
      static let choose_organization = Rswift.StringResource(key: "choose_organization", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Choose validator
      ///
      /// Locales: en, nl
      static let choose_validator = Rswift.StringResource(key: "choose_validator", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: en, nl
      static let close = Rswift.StringResource(key: "close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Codes don't match. Please try again
      ///
      /// Locales: en, nl
      static let codes_dont_match_please_try_again = Rswift.StringResource(key: "codes_dont_match_please_try_again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, nl
      static let confirm = Rswift.StringResource(key: "confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Confirm the code
      ///
      /// Locales: en, nl
      static let confirm_the_code = Rswift.StringResource(key: "confirm_the_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Confirm the login code by entering it again.
      ///
      /// Locales: en, nl
      static let confirm_the_login_code_by_entering_it_again = Rswift.StringResource(key: "confirm_the_login_code_by_entering_it_again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Confirm to go to your email app to send a message to the provider
      ///
      /// Locales: en, nl
      static let confirm_to_go_your_email_app_to_send_message_to_provider = Rswift.StringResource(key: "confirm_to_go_your_email_app_to_send_message_to_provider", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Confirm transaction
      ///
      /// Locales: en, nl
      static let confirm_transaction = Rswift.StringResource(key: "confirm_transaction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Continuing will allow this device to acces your account. Are you sure you want to continue?
      ///
      /// Locales: en, nl
      static let description_of_auth_anothe_device = Rswift.StringResource(key: "description_of_auth_anothe_device", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Copied to clipboard
      ///
      /// Locales: en, nl
      static let copied_to_clipboard = Rswift.StringResource(key: "copied_to_clipboard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Copy address
      ///
      /// Locales: en, nl
      static let copy_address = Rswift.StringResource(key: "copy_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Create passcode
      ///
      /// Locales: en, nl
      static let create_passcode = Rswift.StringResource(key: "create_passcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Currently maintenance is being done.
      ///
      /// Locales: en
      static let currently_maintenance_being_done = Rswift.StringResource(key: "currently_maintenance_being_done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: DECLINE
      ///
      /// Locales: en, nl
      static let decline = Rswift.StringResource(key: "decline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Date
      ///
      /// Locales: en, nl
      static let date = Rswift.StringResource(key: "date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Date of birth
      ///
      /// Locales: en, nl
      static let birth_date = Rswift.StringResource(key: "birth_date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Discount
      ///
      /// Locales: en, nl
      static let discount = Rswift.StringResource(key: "discount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Discount by %@
      ///
      /// Locales: en, nl
      static let discout_by = Rswift.StringResource(key: "discout_by", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Do you want to login instead?
      ///
      /// Locales: en, nl
      static let you_want_to_login_instead = Rswift.StringResource(key: "you_want_to_login_instead", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Do you want to login on this device?
      ///
      /// Locales: en, nl
      static let do_you_want_to_login = Rswift.StringResource(key: "do_you_want_to_login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: E-mail has been sent to you.
      ///
      /// Locales: en, nl
      static let email_has_been_sent = Rswift.StringResource(key: "email_has_been_sent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: E-mail to me
      ///
      /// Locales: en, nl
      static let email_to_me = Rswift.StringResource(key: "email_to_me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Eligible for Kindpakket 2018
      ///
      /// Locales: en, nl
      static let kindpakket_2018_eligible = Rswift.StringResource(key: "kindpakket_2018_eligible", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Eligible for Kindpakket 2019
      ///
      /// Locales: en, nl
      static let kindpakket_2019_eligible = Rswift.StringResource(key: "kindpakket_2019_eligible", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Eligible for Meedoenregeling 2018
      ///
      /// Locales: en, nl
      static let meedoenregeling_2018_eligible = Rswift.StringResource(key: "meedoenregeling_2018_eligible", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, nl
      static let email = Rswift.StringResource(key: "email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Email is empty
      ///
      /// Locales: en, nl
      static let email_is_empty = Rswift.StringResource(key: "email_is_empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Enter a new login code
      ///
      /// Locales: en, nl
      static let enter_a_new_login_code = Rswift.StringResource(key: "enter_a_new_login_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Enter login code
      ///
      /// Locales: en, nl
      static let enter_login_code = Rswift.StringResource(key: "enter_login_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Enter the price here.
      ///
      /// Locales: en, nl
      static let enter_the_price_here = Rswift.StringResource(key: "enter_the_price_here", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Enter your login code
      ///
      /// Locales: en, nl
      static let enter_your_login_code = Rswift.StringResource(key: "enter_your_login_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Enter your login code to use Face ID
      ///
      /// Locales: en, nl
      static let enter_your_login_code_to_use_face_ID = Rswift.StringResource(key: "enter_your_login_code_to_use_face_ID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Enter your old code
      ///
      /// Locales: en, nl
      static let enter_your_old_code = Rswift.StringResource(key: "enter_your_old_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: en, nl
      static let error = Rswift.StringResource(key: "error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Error!
      ///
      /// Locales: en, nl
      static let error_exclamation = Rswift.StringResource(key: "error_exclamation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Expired
      ///
      /// Locales: en, nl
      static let expired = Rswift.StringResource(key: "expired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Expired session
      ///
      /// Locales: en, nl
      static let expired_session = Rswift.StringResource(key: "expired_session", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Family Name
      ///
      /// Locales: en, nl
      static let family_name = Rswift.StringResource(key: "family_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Field is empty
      ///
      /// Locales: en, nl
      static let field_is_empty = Rswift.StringResource(key: "field_is_empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Field is requierd
      ///
      /// Locales: en, nl
      static let field_is_requierd = Rswift.StringResource(key: "field_is_requierd", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Free
      ///
      /// Locales: en, nl
      static let free = Rswift.StringResource(key: "free", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Fund
      ///
      /// Locales: en, nl
      static let fund = Rswift.StringResource(key: "fund", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Gender
      ///
      /// Locales: en, nl
      static let gender = Rswift.StringResource(key: "gender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Given name
      ///
      /// Locales: en, nl
      static let given_name = Rswift.StringResource(key: "given_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: History
      ///
      /// Locales: en, nl
      static let history = Rswift.StringResource(key: "history", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: How does it work?
      ///
      /// Locales: en, nl
      static let how_does_it_work = Rswift.StringResource(key: "how_does_it_work", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: If you already have a Me identity and logged into the web-shop, then go to the web-shop and click on 'Authorize device' and enter the code that is visible on this screen.
      ///
      /// Locales: en, nl
      static let login_description_on_webshop = Rswift.StringResource(key: "login_description_on_webshop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Informatie delen
      ///
      /// Locales: en, nl
      static let informatie_delen = Rswift.StringResource(key: "informatie_delen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Insufficient funds on the voucher
      ///
      /// Locales: en, nl
      static let insufficient_funds_on_the_voucher = Rswift.StringResource(key: "insufficient_funds_on_the_voucher", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Insufficient funds on the voucher. Please, request extra payment of €%.02f
      ///
      /// Locales: en, nl
      static let insufficient_funds_on_the_voucher_please_request_extra_payment = Rswift.StringResource(key: "insufficient_funds_on_the_voucher_please_request_extra_payment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Invalid Email address
      ///
      /// Locales: en, nl
      static let invalid_email_address = Rswift.StringResource(key: "invalid_email_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Invalid context
      ///
      /// Locales: en, nl
      static let invalid_context = Rswift.StringResource(key: "invalid_context", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Klantnummer
      ///
      /// Locales: en, nl
      static let klantnummer = Rswift.StringResource(key: "klantnummer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Let the shopkeeper scan it to make a payment from your voucher.
      ///
      /// Locales: en, nl
      static let let_shopkeeper_scan_it_make_payment_from_your_voucher = Rswift.StringResource(key: "let_shopkeeper_scan_it_make_payment_from_your_voucher", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Let the shopkeeper scan it to make a validtion to your record %@.
      ///
      /// Locales: en, nl
      static let let_shopkeeper_scan_it_to_make_validtion_to_your_record = Rswift.StringResource(key: "let_shopkeeper_scan_it_to_make_validtion_to_your_record", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Loading...
      ///
      /// Locales: en, nl
      static let loading = Rswift.StringResource(key: "loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Log Out
      ///
      /// Locales: en, nl
      static let log_out = Rswift.StringResource(key: "log_out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Log in from another device
      ///
      /// Locales: en, nl
      static let log_from_another_device = Rswift.StringResource(key: "log_from_another_device", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Login code
      ///
      /// Locales: en, nl
      static let login_code = Rswift.StringResource(key: "login_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Mail services are not available.
      ///
      /// Locales: en, nl
      static let mail_services_are_not_available = Rswift.StringResource(key: "mail_services_are_not_available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Medical
      ///
      /// Locales: en, nl
      static let medical = Rswift.StringResource(key: "medical", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: More information about price agreement
      ///
      /// Locales: en, nl
      static let more_information_price_agreement = Rswift.StringResource(key: "more_information_price_agreement", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: My currencies
      ///
      /// Locales: en, nl
      static let my_currencies = Rswift.StringResource(key: "my_currencies", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: My feedback about the Me app
      ///
      /// Locales: en, nl
      static let my_feedback_about_me_app = Rswift.StringResource(key: "my_feedback_about_me_app", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: NEW RECORDS
      ///
      /// Locales: en, nl
      static let new_records = Rswift.StringResource(key: "new_records", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: NEXT
      ///
      /// Locales: en, nl
      static let next = Rswift.StringResource(key: "next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: NO
      ///
      /// Locales: en, nl
      static let no = Rswift.StringResource(key: "no", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Net worth
      ///
      /// Locales: en, nl
      static let net_worth = Rswift.StringResource(key: "net_worth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: New update is available, update your application!
      ///
      /// Locales: en, nl
      static let update_is_available = Rswift.StringResource(key: "update_is_available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: No Internet Conecction
      ///
      /// Locales: en, nl
      static let no_internet_conecction = Rswift.StringResource(key: "no_internet_conecction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: No balance for your actions
      ///
      /// Locales: en, nl
      static let no_balance_for_actions = Rswift.StringResource(key: "no_balance_for_actions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: No phone number
      ///
      /// Locales: en, nl
      static let no_phone_number = Rswift.StringResource(key: "no_phone_number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: No thanks
      ///
      /// Locales: en, nl
      static let no_thanks = Rswift.StringResource(key: "no_thanks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Note
      ///
      /// Locales: en, nl
      static let note = Rswift.StringResource(key: "note", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, nl
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: OPEN MAIL APP
      ///
      /// Locales: en, nl
      static let open_mail_app = Rswift.StringResource(key: "open_mail_app", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Offers
      ///
      /// Locales: en, nl
      static let offers = Rswift.StringResource(key: "offers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Others
      ///
      /// Locales: en, nl
      static let others = Rswift.StringResource(key: "others", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: PAIRING
      ///
      /// Locales: en, nl
      static let pairing = Rswift.StringResource(key: "pairing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: PAYMENT
      ///
      /// Locales: en, nl
      static let payment = Rswift.StringResource(key: "payment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Paid
      ///
      /// Locales: en, nl
      static let paid = Rswift.StringResource(key: "paid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Parent
      ///
      /// Locales: en, nl
      static let parent = Rswift.StringResource(key: "parent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Payment succeeded! The processing can take up to 3 business days.
      ///
      /// Locales: en, nl
      static let payment_succeeded = Rswift.StringResource(key: "payment_succeeded", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Personal
      ///
      /// Locales: en, nl
      static let personal = Rswift.StringResource(key: "personal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Personal account
      ///
      /// Locales: en, nl
      static let personal_account = Rswift.StringResource(key: "personal_account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Please confirm the transaction of € %@.
      ///
      /// Locales: en, nl
      static let please_confirm_the_transaction = Rswift.StringResource(key: "please_confirm_the_transaction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Please enter the amount
      ///
      /// Locales: en, nl
      static let please_enter_the_amount = Rswift.StringResource(key: "please_enter_the_amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Please go to the Settings & Turn On Passcode
      ///
      /// Locales: en, nl
      static let please_go_to_settings_turn_on_passcode = Rswift.StringResource(key: "please_go_to_settings_turn_on_passcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Please try to send email again.
      ///
      /// Locales: en, nl
      static let please_try_to_send_email_again = Rswift.StringResource(key: "please_try_to_send_email_again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Press settings to give an access or cancel to close this window.
      ///
      /// Locales: en
      static let press_settings_to_give_access_or_cancel_to_close_window = Rswift.StringResource(key: "press_settings_to_give_access_or_cancel_to_close_window", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Price agreement
      ///
      /// Locales: en, nl
      static let price_agreement = Rswift.StringResource(key: "price_agreement", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Primary e-mail
      ///
      /// Locales: en, nl
      static let primary_email = Rswift.StringResource(key: "primary_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Product voucher
      ///
      /// Locales: en, nl
      static let product_voucher = Rswift.StringResource(key: "product_voucher", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Profile
      ///
      /// Locales: en, nl
      static let profile = Rswift.StringResource(key: "profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Property
      ///
      /// Locales: en, nl
      static let property = Rswift.StringResource(key: "property", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Provider
      ///
      /// Locales: en, nl
      static let provider = Rswift.StringResource(key: "provider", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: QR-code was recognized
      ///
      /// Locales: en, nl
      static let scanning_successfully = Rswift.StringResource(key: "scanning_successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Question from Me user
      ///
      /// Locales: en, nl
      static let question_from_me_user = Rswift.StringResource(key: "question_from_me_user", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: REQUEST
      ///
      /// Locales: en, nl
      static let request = Rswift.StringResource(key: "request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Record
      ///
      /// Locales: en
      static let record = Rswift.StringResource(key: "record", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Records
      ///
      /// Locales: en, nl
      static let records = Rswift.StringResource(key: "records", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Relationships
      ///
      /// Locales: en, nl
      static let relationships = Rswift.StringResource(key: "relationships", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: SIGN IN
      ///
      /// Locales: en, nl
      static let sign_in = Rswift.StringResource(key: "sign_in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Salary
      ///
      /// Locales: en, nl
      static let base_salary = Rswift.StringResource(key: "base_salary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Search currency
      ///
      /// Locales: en, nl
      static let search_currency = Rswift.StringResource(key: "search_currency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Secundary e-mail
      ///
      /// Locales: en, nl
      static let secundary_email = Rswift.StringResource(key: "secundary_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Send an e-mail to the provider
      ///
      /// Locales: en, nl
      static let send_an_email_to_the_provider = Rswift.StringResource(key: "send_an_email_to_the_provider", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Send the voucher to your email?
      ///
      /// Locales: en, nl
      static let send_voucher_to_your_email = Rswift.StringResource(key: "send_voucher_to_your_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Set up the login code
      ///
      /// Locales: en, nl
      static let set_up_the_login_code = Rswift.StringResource(key: "set_up_the_login_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, nl
      static let settings = Rswift.StringResource(key: "settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Share identification number
      ///
      /// Locales: en, nl
      static let share_identification_number = Rswift.StringResource(key: "share_identification_number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Sharing information
      ///
      /// Locales: en, nl
      static let sharing_information = Rswift.StringResource(key: "sharing_information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Something went wrong, please try again…
      ///
      /// Locales: en, nl
      static let something_went_wrong_please_try_again = Rswift.StringResource(key: "something_went_wrong_please_try_again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Sorry not enough funds on voucher
      ///
      /// Locales: en, nl
      static let voucher_not_have_enough_funds = Rswift.StringResource(key: "voucher_not_have_enough_funds", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Sorry you do not meet the criteria for this voucher
      ///
      /// Locales: en, nl
      static let sorry_you_do_not_meet_the_criteria_for_this_voucher = Rswift.StringResource(key: "sorry_you_do_not_meet_the_criteria_for_this_voucher", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Spouse
      ///
      /// Locales: en, nl
      static let spouse = Rswift.StringResource(key: "spouse", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Subsidy by %@
      ///
      /// Locales: en, nl
      static let subsid_by = Rswift.StringResource(key: "subsid_by", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Success
      ///
      /// Locales: en, nl
      static let success = Rswift.StringResource(key: "success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Success!
      ///
      /// Locales: en, nl
      static let success_exclamation = Rswift.StringResource(key: "success_exclamation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Successfully  logged in!
      ///
      /// Locales: en, nl
      static let success_login = Rswift.StringResource(key: "success_login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: System Cancel
      ///
      /// Locales: en, nl
      static let system_cancel = Rswift.StringResource(key: "system_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Tap here if you want to see your list of transactions
      ///
      /// Locales: en, nl
      static let tap_here_you_want_to_see_list_transaction = Rswift.StringResource(key: "tap_here_you_want_to_see_list_transaction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Tax ID
      ///
      /// Locales: en, nl
      static let tax_id = Rswift.StringResource(key: "tax_id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Telephonenumber
      ///
      /// Locales: en, nl
      static let telephone = Rswift.StringResource(key: "telephone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Test organisation
      ///
      /// Locales: en, nl
      static let test_organization = Rswift.StringResource(key: "test_organization", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Test transaction
      ///
      /// Locales: en, nl
      static let test_transaction = Rswift.StringResource(key: "test_transaction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: The customer needs to pay folowing amount
      ///
      /// Locales: en, nl
      static let paid_by_customer = Rswift.StringResource(key: "paid_by_customer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: The offers below are reserved by the customer
      ///
      /// Locales: en, nl
      static let offer_below_reserved_customer = Rswift.StringResource(key: "offer_below_reserved_customer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: The scanner is not supported on this device
      ///
      /// Locales: en, nl
      static let the_scanner_is_not_supported_on_this_device = Rswift.StringResource(key: "the_scanner_is_not_supported_on_this_device", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: The voucher is empty! No transactions can be done.
      ///
      /// Locales: en, nl
      static let the_voucher_is_empty = Rswift.StringResource(key: "the_voucher_is_empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This app is intended to store vouchers, make payments and log in to different applications./n/n/nThis app works together with:/n/n     • 	The Westerkwartier webshop;      • 	The Nijmegen webshop;      • 	The Winterswijk webshop;      • 	The Oost Gelre webshop;      • 	The Berkelland webshop;      • 	The Noordoostpolder webshop      • 	The Kerstpakket webshop;
      ///
      /// Locales: en, nl
      static let description_about = Rswift.StringResource(key: "description_about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This app is not authorized to use Back Camera
      ///
      /// Locales: en, nl
      static let this_app_is_not_authorized_to_use_back_camera = Rswift.StringResource(key: "this_app_is_not_authorized_to_use_back_camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This device in not authorize
      ///
      /// Locales: en
      static let this_device_in_not_authorize = Rswift.StringResource(key: "this_device_in_not_authorize", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: This email does not exist
      ///
      /// Locales: en, nl
      static let this_email_does_not_exist = Rswift.StringResource(key: "this_email_does_not_exist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This email is already used
      ///
      /// Locales: en, nl
      static let this_email_is_already_used = Rswift.StringResource(key: "this_email_is_already_used", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This is your
      ///
      /// Locales: en, nl
      static let this_is_your = Rswift.StringResource(key: "this_is_your", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This is your Voucher’s QR-code.
      ///
      /// Locales: en, nl
      static let this_is_your_vouchers_qr_code = Rswift.StringResource(key: "this_is_your_vouchers_qr_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This is your personal QR code.
      ///
      /// Locales: en, nl
      static let this_is_your_personal_qr_code = Rswift.StringResource(key: "this_is_your_personal_qr_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This product voucher is used!
      ///
      /// Locales: en, nl
      static let this_product_voucher_is_used = Rswift.StringResource(key: "this_product_voucher_is_used", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This voucher expires on %@
      ///
      /// Locales: en, nl
      static let this_voucher_is_expired_on = Rswift.StringResource(key: "this_voucher_is_expired_on", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Total price
      ///
      /// Locales: en, nl
      static let total_price = Rswift.StringResource(key: "total_price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Transaction
      ///
      /// Locales: en, nl
      static let transaction = Rswift.StringResource(key: "transaction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Transaction details
      ///
      /// Locales: en, nl
      static let transaction_details = Rswift.StringResource(key: "transaction_details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Transactions
      ///
      /// Locales: en, nl
      static let transactions = Rswift.StringResource(key: "transactions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Turn off login code
      ///
      /// Locales: en, nl
      static let turn_off_login_code = Rswift.StringResource(key: "turn_off_login_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Turn on Face ID
      ///
      /// Locales: en, nl
      static let turn_on_face_ID = Rswift.StringResource(key: "turn_on_face_ID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Turn on Touch ID
      ///
      /// Locales: en, nl
      static let turn_on_touch_ID = Rswift.StringResource(key: "turn_on_touch_ID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Unknown QR-code!
      ///
      /// Locales: en, nl
      static let unknown_qr_code = Rswift.StringResource(key: "unknown_qr_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Unlock with %@
      ///
      /// Locales: en, nl
      static let unlock_with = Rswift.StringResource(key: "unlock_with", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Use Touch ID
      ///
      /// Locales: en, nl
      static let use_touch_ID = Rswift.StringResource(key: "use_touch_ID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Use Touch ID to log in?
      ///
      /// Locales: en, nl
      static let use_touch_ID_to_log_in = Rswift.StringResource(key: "use_touch_ID_to_log_in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Used
      ///
      /// Locales: en, nl
      static let used = Rswift.StringResource(key: "used", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: User Cancel
      ///
      /// Locales: en, nl
      static let user_cancel = Rswift.StringResource(key: "user_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Validate
      ///
      /// Locales: en, nl
      static let validate = Rswift.StringResource(key: "validate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Validation approved.
      ///
      /// Locales: en, nl
      static let validation_approved = Rswift.StringResource(key: "validation_approved", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Validations
      ///
      /// Locales: en, nl
      static let validations = Rswift.StringResource(key: "validations", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Voucher Info
      ///
      /// Locales: en, nl
      static let voucher_info = Rswift.StringResource(key: "voucher_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Vouchers
      ///
      /// Locales: en, nl
      static let vouchers = Rswift.StringResource(key: "vouchers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Warning
      ///
      /// Locales: en, nl
      static let warning = Rswift.StringResource(key: "warning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Welcome to Me
      ///
      /// Locales: en, nl
      static let welcome_to_me = Rswift.StringResource(key: "welcome_to_me", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: What customer pays
      ///
      /// Locales: en, nl
      static let what_customer_pays = Rswift.StringResource(key: "what_customer_pays", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: With the Me you can create an identity, receive and use your vouchers.
      ///
      /// Locales: en
      static let with_me_you_can_create_identity_receive_and_use_your_vouchers = Rswift.StringResource(key: "with_me_you_can_create_identity_receive_and_use_your_vouchers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Would you like to send us your feedback by e-mail?
      ///
      /// Locales: en, nl
      static let would_you_like_send_us_your_feedback_by_email = Rswift.StringResource(key: "would_you_like_send_us_your_feedback_by_email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Wrong passcode, please try again
      ///
      /// Locales: en, nl
      static let wrong_passcode_please_try_again = Rswift.StringResource(key: "wrong_passcode_please_try_again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: YES
      ///
      /// Locales: en, nl
      static let yes = Rswift.StringResource(key: "yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Yes, I want to login
      ///
      /// Locales: en, nl
      static let i_want_to_login = Rswift.StringResource(key: "i_want_to_login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: You can't scan this voucher. You are not accepted as a provider for the fund that hands out these vouchers.
      ///
      /// Locales: en, nl
      static let you_cant_scan_this_voucher_you_are_not_accepted_as_provider_for_fund = Rswift.StringResource(key: "you_cant_scan_this_voucher_you_are_not_accepted_as_provider_for_fund", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: You sure you wan't to login this device?
      ///
      /// Locales: en, nl
      static let you_sure_you_want_to_login_device = Rswift.StringResource(key: "you_sure_you_want_to_login_device", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Your e-mail address is already used, do you instead want to login using this e-mail address?
      ///
      /// Locales: en, nl
      static let your_email_address_already_used_you_instead_want_login_using_email_address = Rswift.StringResource(key: "your_email_address_already_used_you_instead_want_login_using_email_address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Your session has expired. You are being logged out.
      ///
      /// Locales: en, nl
      static let your_session_has_expired = Rswift.StringResource(key: "your_session_has_expired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: %@ Branches
      ///
      /// Locales: en, nl
      static func branches(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("branches", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "branches"
        }

        let format = NSLocalizedString("branches", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Don't Available
      ///
      /// Locales: en, nl
      static func dont_available(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("dont_available", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dont_available"
        }

        let format = NSLocalizedString("dont_available", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Lockout Please go to the Settings & Turn On Passcode
      ///
      /// Locales: en, nl
      static func lockout_please_go_to_settings_turn_on_passcode(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("lockout_please_go_to_settings_turn_on_passcode", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lockout_please_go_to_settings_turn_on_passcode"
        }

        let format = NSLocalizedString("lockout_please_go_to_settings_turn_on_passcode", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %@ Not Enrolled
      ///
      /// Locales: en, nl
      static func not_enrolled(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("not_enrolled", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "not_enrolled"
        }

        let format = NSLocalizedString("not_enrolled", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: -voucher in the form of a QR-code
      ///
      /// Locales: en, nl
      static func voucher_in_the_form_qr_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("voucher_in_the_form_qr_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "voucher_in_the_form_qr_code"
        }

        return NSLocalizedString("voucher_in_the_form_qr_code", bundle: bundle, comment: "")
      }

      /// en translation: A payment of € 0.01 is too low to be paid out, choose a higher amount.
      ///
      /// Locales: en
      static func payment_of_001_is_to_low_to_be_paid_out_choose_highe_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment_of_0.01_is_to_low_to_be_paid_out_choose_highe_amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_of_0.01_is_to_low_to_be_paid_out_choose_highe_amount"
        }

        return NSLocalizedString("payment_of_0.01_is_to_low_to_be_paid_out_choose_highe_amount", bundle: bundle, comment: "")
      }

      /// en translation: A record has been validated!
      ///
      /// Locales: en, nl
      static func a_record_has_been_validated(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("a_record_has_been_validated", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "a_record_has_been_validated"
        }

        return NSLocalizedString("a_record_has_been_validated", bundle: bundle, comment: "")
      }

      /// en translation: About Me
      ///
      /// Locales: en, nl
      static func about_me(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("about_me", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "about_me"
        }

        return NSLocalizedString("about_me", bundle: bundle, comment: "")
      }

      /// en translation: Activated
      ///
      /// Locales: en, nl
      static func activated(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("activated", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activated"
        }

        return NSLocalizedString("activated", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: en, nl
      static func address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "address"
        }

        return NSLocalizedString("address", bundle: bundle, comment: "")
      }

      /// en translation: Amount of children
      ///
      /// Locales: en, nl
      static func children_nth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("children_nth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "children_nth"
        }

        return NSLocalizedString("children_nth", bundle: bundle, comment: "")
      }

      /// en translation: An e-mail has been sent to %@. Click the link in the email to sign up.
      ///
      /// Locales: en, nl
      static func click_on_link_you_received_continue(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("click_on_link_you_received_continue", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "click_on_link_you_received_continue"
        }

        let format = NSLocalizedString("click_on_link_you_received_continue", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: App Cancel
      ///
      /// Locales: en, nl
      static func app_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("app_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "app_cancel"
        }

        return NSLocalizedString("app_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to confirm this transaction.
      ///
      /// Locales: en, nl
      static func are_you_sure_you_want_confirm_transaction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("are_you_sure_you_want_confirm_transaction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "are_you_sure_you_want_confirm_transaction"
        }

        return NSLocalizedString("are_you_sure_you_want_confirm_transaction", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to log out?
      ///
      /// Locales: en, nl
      static func are_you_sure_you_want_log_out(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("are_you_sure_you_want_log_out", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "are_you_sure_you_want_log_out"
        }

        return NSLocalizedString("are_you_sure_you_want_log_out", bundle: bundle, comment: "")
      }

      /// en translation: Authentication Failed
      ///
      /// Locales: en, nl
      static func authentification_failed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("authentification_failed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "authentification_failed"
        }

        return NSLocalizedString("authentification_failed", bundle: bundle, comment: "")
      }

      /// en translation: BSN
      ///
      /// Locales: en, nl
      static func bsn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bsn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bsn"
        }

        return NSLocalizedString("bsn", bundle: bundle, comment: "")
      }

      /// en translation: Before we get started, please confirm your email address.
      ///
      /// Locales: en, nl
      static func before_we_get_started_please_confirm_your_email_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("before_we_get_started_please_confirm_your_email_address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "before_we_get_started_please_confirm_your_email_address"
        }

        return NSLocalizedString("before_we_get_started_please_confirm_your_email_address", bundle: bundle, comment: "")
      }

      /// en translation: Bevestig uw emailadres
      ///
      /// Locales: en, nl
      static func bevestig_uw_emailadres(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bevestig_uw_emailadres", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bevestig_uw_emailadres"
        }

        return NSLocalizedString("bevestig_uw_emailadres", bundle: bundle, comment: "")
      }

      /// en translation: Business
      ///
      /// Locales: en
      static func business(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("business", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "business"
        }

        return NSLocalizedString("business", bundle: bundle, comment: "")
      }

      /// en translation: By sharing your identification number, problems can be solved faster. If needed the developers can contact you as well.
      ///
      /// Locales: en, nl
      static func sharing_identification_number_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sharing_identification_number_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sharing_identification_number_info"
        }

        return NSLocalizedString("sharing_identification_number_info", bundle: bundle, comment: "")
      }

      /// en translation: COMPLETE AN AMOUNT
      ///
      /// Locales: en, nl
      static func complete_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("complete_amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "complete_amount"
        }

        return NSLocalizedString("complete_amount", bundle: bundle, comment: "")
      }

      /// en translation: Camera permission request was denied.
      ///
      /// Locales: en, nl
      static func camera_permission_request_was_denied(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("camera_permission_request_was_denied", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "camera_permission_request_was_denied"
        }

        return NSLocalizedString("camera_permission_request_was_denied", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, nl
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", bundle: bundle, comment: "")
      }

      /// en translation: Certificates
      ///
      /// Locales: en, nl
      static func certificates(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("certificates", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "certificates"
        }

        return NSLocalizedString("certificates", bundle: bundle, comment: "")
      }

      /// en translation: Change passcode
      ///
      /// Locales: en, nl
      static func change_passcode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("change_passcode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "change_passcode"
        }

        return NSLocalizedString("change_passcode", bundle: bundle, comment: "")
      }

      /// en translation: Children
      ///
      /// Locales: en, nl
      static func children(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("children", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "children"
        }

        return NSLocalizedString("children", bundle: bundle, comment: "")
      }

      /// en translation: Choose Reservation
      ///
      /// Locales: en, nl
      static func choose_reservation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_reservation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_reservation"
        }

        return NSLocalizedString("choose_reservation", bundle: bundle, comment: "")
      }

      /// en translation: Choose from date
      ///
      /// Locales: en, nl
      static func choose_from_date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_from_date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_from_date"
        }

        return NSLocalizedString("choose_from_date", bundle: bundle, comment: "")
      }

      /// en translation: Choose organization
      ///
      /// Locales: en, nl
      static func choose_organization(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_organization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_organization"
        }

        return NSLocalizedString("choose_organization", bundle: bundle, comment: "")
      }

      /// en translation: Choose validator
      ///
      /// Locales: en, nl
      static func choose_validator(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_validator", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_validator"
        }

        return NSLocalizedString("choose_validator", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: en, nl
      static func close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "close"
        }

        return NSLocalizedString("close", bundle: bundle, comment: "")
      }

      /// en translation: Codes don't match. Please try again
      ///
      /// Locales: en, nl
      static func codes_dont_match_please_try_again(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("codes_dont_match_please_try_again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "codes_dont_match_please_try_again"
        }

        return NSLocalizedString("codes_dont_match_please_try_again", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, nl
      static func confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm"
        }

        return NSLocalizedString("confirm", bundle: bundle, comment: "")
      }

      /// en translation: Confirm the code
      ///
      /// Locales: en, nl
      static func confirm_the_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm_the_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm_the_code"
        }

        return NSLocalizedString("confirm_the_code", bundle: bundle, comment: "")
      }

      /// en translation: Confirm the login code by entering it again.
      ///
      /// Locales: en, nl
      static func confirm_the_login_code_by_entering_it_again(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm_the_login_code_by_entering_it_again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm_the_login_code_by_entering_it_again"
        }

        return NSLocalizedString("confirm_the_login_code_by_entering_it_again", bundle: bundle, comment: "")
      }

      /// en translation: Confirm to go to your email app to send a message to the provider
      ///
      /// Locales: en, nl
      static func confirm_to_go_your_email_app_to_send_message_to_provider(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm_to_go_your_email_app_to_send_message_to_provider", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm_to_go_your_email_app_to_send_message_to_provider"
        }

        return NSLocalizedString("confirm_to_go_your_email_app_to_send_message_to_provider", bundle: bundle, comment: "")
      }

      /// en translation: Confirm transaction
      ///
      /// Locales: en, nl
      static func confirm_transaction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm_transaction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm_transaction"
        }

        return NSLocalizedString("confirm_transaction", bundle: bundle, comment: "")
      }

      /// en translation: Continuing will allow this device to acces your account. Are you sure you want to continue?
      ///
      /// Locales: en, nl
      static func description_of_auth_anothe_device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("description_of_auth_anothe_device", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "description_of_auth_anothe_device"
        }

        return NSLocalizedString("description_of_auth_anothe_device", bundle: bundle, comment: "")
      }

      /// en translation: Copied to clipboard
      ///
      /// Locales: en, nl
      static func copied_to_clipboard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("copied_to_clipboard", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "copied_to_clipboard"
        }

        return NSLocalizedString("copied_to_clipboard", bundle: bundle, comment: "")
      }

      /// en translation: Copy address
      ///
      /// Locales: en, nl
      static func copy_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("copy_address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "copy_address"
        }

        return NSLocalizedString("copy_address", bundle: bundle, comment: "")
      }

      /// en translation: Create passcode
      ///
      /// Locales: en, nl
      static func create_passcode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("create_passcode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "create_passcode"
        }

        return NSLocalizedString("create_passcode", bundle: bundle, comment: "")
      }

      /// en translation: Currently maintenance is being done.
      ///
      /// Locales: en
      static func currently_maintenance_being_done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("currently_maintenance_being_done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "currently_maintenance_being_done"
        }

        return NSLocalizedString("currently_maintenance_being_done", bundle: bundle, comment: "")
      }

      /// en translation: DECLINE
      ///
      /// Locales: en, nl
      static func decline(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("decline", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "decline"
        }

        return NSLocalizedString("decline", bundle: bundle, comment: "")
      }

      /// en translation: Date
      ///
      /// Locales: en, nl
      static func date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "date"
        }

        return NSLocalizedString("date", bundle: bundle, comment: "")
      }

      /// en translation: Date of birth
      ///
      /// Locales: en, nl
      static func birth_date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("birth_date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "birth_date"
        }

        return NSLocalizedString("birth_date", bundle: bundle, comment: "")
      }

      /// en translation: Discount
      ///
      /// Locales: en, nl
      static func discount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("discount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "discount"
        }

        return NSLocalizedString("discount", bundle: bundle, comment: "")
      }

      /// en translation: Discount by %@
      ///
      /// Locales: en, nl
      static func discout_by(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("discout_by", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "discout_by"
        }

        let format = NSLocalizedString("discout_by", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Do you want to login instead?
      ///
      /// Locales: en, nl
      static func you_want_to_login_instead(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("you_want_to_login_instead", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "you_want_to_login_instead"
        }

        return NSLocalizedString("you_want_to_login_instead", bundle: bundle, comment: "")
      }

      /// en translation: Do you want to login on this device?
      ///
      /// Locales: en, nl
      static func do_you_want_to_login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("do_you_want_to_login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "do_you_want_to_login"
        }

        return NSLocalizedString("do_you_want_to_login", bundle: bundle, comment: "")
      }

      /// en translation: E-mail has been sent to you.
      ///
      /// Locales: en, nl
      static func email_has_been_sent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email_has_been_sent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email_has_been_sent"
        }

        return NSLocalizedString("email_has_been_sent", bundle: bundle, comment: "")
      }

      /// en translation: E-mail to me
      ///
      /// Locales: en, nl
      static func email_to_me(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email_to_me", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email_to_me"
        }

        return NSLocalizedString("email_to_me", bundle: bundle, comment: "")
      }

      /// en translation: Eligible for Kindpakket 2018
      ///
      /// Locales: en, nl
      static func kindpakket_2018_eligible(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kindpakket_2018_eligible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "kindpakket_2018_eligible"
        }

        return NSLocalizedString("kindpakket_2018_eligible", bundle: bundle, comment: "")
      }

      /// en translation: Eligible for Kindpakket 2019
      ///
      /// Locales: en, nl
      static func kindpakket_2019_eligible(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kindpakket_2019_eligible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "kindpakket_2019_eligible"
        }

        return NSLocalizedString("kindpakket_2019_eligible", bundle: bundle, comment: "")
      }

      /// en translation: Eligible for Meedoenregeling 2018
      ///
      /// Locales: en, nl
      static func meedoenregeling_2018_eligible(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("meedoenregeling_2018_eligible", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "meedoenregeling_2018_eligible"
        }

        return NSLocalizedString("meedoenregeling_2018_eligible", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, nl
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email"
        }

        return NSLocalizedString("email", bundle: bundle, comment: "")
      }

      /// en translation: Email is empty
      ///
      /// Locales: en, nl
      static func email_is_empty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email_is_empty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email_is_empty"
        }

        return NSLocalizedString("email_is_empty", bundle: bundle, comment: "")
      }

      /// en translation: Enter a new login code
      ///
      /// Locales: en, nl
      static func enter_a_new_login_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_a_new_login_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_a_new_login_code"
        }

        return NSLocalizedString("enter_a_new_login_code", bundle: bundle, comment: "")
      }

      /// en translation: Enter login code
      ///
      /// Locales: en, nl
      static func enter_login_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_login_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_login_code"
        }

        return NSLocalizedString("enter_login_code", bundle: bundle, comment: "")
      }

      /// en translation: Enter the price here.
      ///
      /// Locales: en, nl
      static func enter_the_price_here(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_the_price_here", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_the_price_here"
        }

        return NSLocalizedString("enter_the_price_here", bundle: bundle, comment: "")
      }

      /// en translation: Enter your login code
      ///
      /// Locales: en, nl
      static func enter_your_login_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_your_login_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_your_login_code"
        }

        return NSLocalizedString("enter_your_login_code", bundle: bundle, comment: "")
      }

      /// en translation: Enter your login code to use Face ID
      ///
      /// Locales: en, nl
      static func enter_your_login_code_to_use_face_ID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_your_login_code_to_use_face_ID", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_your_login_code_to_use_face_ID"
        }

        return NSLocalizedString("enter_your_login_code_to_use_face_ID", bundle: bundle, comment: "")
      }

      /// en translation: Enter your old code
      ///
      /// Locales: en, nl
      static func enter_your_old_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_your_old_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_your_old_code"
        }

        return NSLocalizedString("enter_your_old_code", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: en, nl
      static func error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error"
        }

        return NSLocalizedString("error", bundle: bundle, comment: "")
      }

      /// en translation: Error!
      ///
      /// Locales: en, nl
      static func error_exclamation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_exclamation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_exclamation"
        }

        return NSLocalizedString("error_exclamation", bundle: bundle, comment: "")
      }

      /// en translation: Expired
      ///
      /// Locales: en, nl
      static func expired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("expired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "expired"
        }

        return NSLocalizedString("expired", bundle: bundle, comment: "")
      }

      /// en translation: Expired session
      ///
      /// Locales: en, nl
      static func expired_session(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("expired_session", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "expired_session"
        }

        return NSLocalizedString("expired_session", bundle: bundle, comment: "")
      }

      /// en translation: Family Name
      ///
      /// Locales: en, nl
      static func family_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("family_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "family_name"
        }

        return NSLocalizedString("family_name", bundle: bundle, comment: "")
      }

      /// en translation: Field is empty
      ///
      /// Locales: en, nl
      static func field_is_empty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("field_is_empty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "field_is_empty"
        }

        return NSLocalizedString("field_is_empty", bundle: bundle, comment: "")
      }

      /// en translation: Field is requierd
      ///
      /// Locales: en, nl
      static func field_is_requierd(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("field_is_requierd", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "field_is_requierd"
        }

        return NSLocalizedString("field_is_requierd", bundle: bundle, comment: "")
      }

      /// en translation: Free
      ///
      /// Locales: en, nl
      static func free(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("free", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "free"
        }

        return NSLocalizedString("free", bundle: bundle, comment: "")
      }

      /// en translation: Fund
      ///
      /// Locales: en, nl
      static func fund(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fund", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fund"
        }

        return NSLocalizedString("fund", bundle: bundle, comment: "")
      }

      /// en translation: Gender
      ///
      /// Locales: en, nl
      static func gender(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gender", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "gender"
        }

        return NSLocalizedString("gender", bundle: bundle, comment: "")
      }

      /// en translation: Given name
      ///
      /// Locales: en, nl
      static func given_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("given_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "given_name"
        }

        return NSLocalizedString("given_name", bundle: bundle, comment: "")
      }

      /// en translation: History
      ///
      /// Locales: en, nl
      static func history(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("history", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "history"
        }

        return NSLocalizedString("history", bundle: bundle, comment: "")
      }

      /// en translation: How does it work?
      ///
      /// Locales: en, nl
      static func how_does_it_work(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("how_does_it_work", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "how_does_it_work"
        }

        return NSLocalizedString("how_does_it_work", bundle: bundle, comment: "")
      }

      /// en translation: If you already have a Me identity and logged into the web-shop, then go to the web-shop and click on 'Authorize device' and enter the code that is visible on this screen.
      ///
      /// Locales: en, nl
      static func login_description_on_webshop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_description_on_webshop", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_description_on_webshop"
        }

        return NSLocalizedString("login_description_on_webshop", bundle: bundle, comment: "")
      }

      /// en translation: Informatie delen
      ///
      /// Locales: en, nl
      static func informatie_delen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("informatie_delen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "informatie_delen"
        }

        return NSLocalizedString("informatie_delen", bundle: bundle, comment: "")
      }

      /// en translation: Insufficient funds on the voucher
      ///
      /// Locales: en, nl
      static func insufficient_funds_on_the_voucher(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("insufficient_funds_on_the_voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "insufficient_funds_on_the_voucher"
        }

        return NSLocalizedString("insufficient_funds_on_the_voucher", bundle: bundle, comment: "")
      }

      /// en translation: Insufficient funds on the voucher. Please, request extra payment of €%.02f
      ///
      /// Locales: en, nl
      static func insufficient_funds_on_the_voucher_please_request_extra_payment(_ value1: Double, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("insufficient_funds_on_the_voucher_please_request_extra_payment", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "insufficient_funds_on_the_voucher_please_request_extra_payment"
        }

        let format = NSLocalizedString("insufficient_funds_on_the_voucher_please_request_extra_payment", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Invalid Email address
      ///
      /// Locales: en, nl
      static func invalid_email_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invalid_email_address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invalid_email_address"
        }

        return NSLocalizedString("invalid_email_address", bundle: bundle, comment: "")
      }

      /// en translation: Invalid context
      ///
      /// Locales: en, nl
      static func invalid_context(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("invalid_context", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "invalid_context"
        }

        return NSLocalizedString("invalid_context", bundle: bundle, comment: "")
      }

      /// en translation: Klantnummer
      ///
      /// Locales: en, nl
      static func klantnummer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("klantnummer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "klantnummer"
        }

        return NSLocalizedString("klantnummer", bundle: bundle, comment: "")
      }

      /// en translation: Let the shopkeeper scan it to make a payment from your voucher.
      ///
      /// Locales: en, nl
      static func let_shopkeeper_scan_it_make_payment_from_your_voucher(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("let_shopkeeper_scan_it_make_payment_from_your_voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "let_shopkeeper_scan_it_make_payment_from_your_voucher"
        }

        return NSLocalizedString("let_shopkeeper_scan_it_make_payment_from_your_voucher", bundle: bundle, comment: "")
      }

      /// en translation: Let the shopkeeper scan it to make a validtion to your record %@.
      ///
      /// Locales: en, nl
      static func let_shopkeeper_scan_it_to_make_validtion_to_your_record(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("let_shopkeeper_scan_it_to_make_validtion_to_your_record", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "let_shopkeeper_scan_it_to_make_validtion_to_your_record"
        }

        let format = NSLocalizedString("let_shopkeeper_scan_it_to_make_validtion_to_your_record", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Loading...
      ///
      /// Locales: en, nl
      static func loading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("loading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "loading"
        }

        return NSLocalizedString("loading", bundle: bundle, comment: "")
      }

      /// en translation: Log Out
      ///
      /// Locales: en, nl
      static func log_out(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("log_out", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "log_out"
        }

        return NSLocalizedString("log_out", bundle: bundle, comment: "")
      }

      /// en translation: Log in from another device
      ///
      /// Locales: en, nl
      static func log_from_another_device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("log_from_another_device", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "log_from_another_device"
        }

        return NSLocalizedString("log_from_another_device", bundle: bundle, comment: "")
      }

      /// en translation: Login code
      ///
      /// Locales: en, nl
      static func login_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_code"
        }

        return NSLocalizedString("login_code", bundle: bundle, comment: "")
      }

      /// en translation: Mail services are not available.
      ///
      /// Locales: en, nl
      static func mail_services_are_not_available(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mail_services_are_not_available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mail_services_are_not_available"
        }

        return NSLocalizedString("mail_services_are_not_available", bundle: bundle, comment: "")
      }

      /// en translation: Medical
      ///
      /// Locales: en, nl
      static func medical(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("medical", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "medical"
        }

        return NSLocalizedString("medical", bundle: bundle, comment: "")
      }

      /// en translation: More information about price agreement
      ///
      /// Locales: en, nl
      static func more_information_price_agreement(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("more_information_price_agreement", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "more_information_price_agreement"
        }

        return NSLocalizedString("more_information_price_agreement", bundle: bundle, comment: "")
      }

      /// en translation: My currencies
      ///
      /// Locales: en, nl
      static func my_currencies(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("my_currencies", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "my_currencies"
        }

        return NSLocalizedString("my_currencies", bundle: bundle, comment: "")
      }

      /// en translation: My feedback about the Me app
      ///
      /// Locales: en, nl
      static func my_feedback_about_me_app(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("my_feedback_about_me_app", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "my_feedback_about_me_app"
        }

        return NSLocalizedString("my_feedback_about_me_app", bundle: bundle, comment: "")
      }

      /// en translation: NEW RECORDS
      ///
      /// Locales: en, nl
      static func new_records(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new_records", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new_records"
        }

        return NSLocalizedString("new_records", bundle: bundle, comment: "")
      }

      /// en translation: NEXT
      ///
      /// Locales: en, nl
      static func next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "next"
        }

        return NSLocalizedString("next", bundle: bundle, comment: "")
      }

      /// en translation: NO
      ///
      /// Locales: en, nl
      static func no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no"
        }

        return NSLocalizedString("no", bundle: bundle, comment: "")
      }

      /// en translation: Net worth
      ///
      /// Locales: en, nl
      static func net_worth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("net_worth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "net_worth"
        }

        return NSLocalizedString("net_worth", bundle: bundle, comment: "")
      }

      /// en translation: New update is available, update your application!
      ///
      /// Locales: en, nl
      static func update_is_available(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("update_is_available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "update_is_available"
        }

        return NSLocalizedString("update_is_available", bundle: bundle, comment: "")
      }

      /// en translation: No Internet Conecction
      ///
      /// Locales: en, nl
      static func no_internet_conecction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_internet_conecction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_internet_conecction"
        }

        return NSLocalizedString("no_internet_conecction", bundle: bundle, comment: "")
      }

      /// en translation: No balance for your actions
      ///
      /// Locales: en, nl
      static func no_balance_for_actions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_balance_for_actions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_balance_for_actions"
        }

        return NSLocalizedString("no_balance_for_actions", bundle: bundle, comment: "")
      }

      /// en translation: No phone number
      ///
      /// Locales: en, nl
      static func no_phone_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_phone_number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_phone_number"
        }

        return NSLocalizedString("no_phone_number", bundle: bundle, comment: "")
      }

      /// en translation: No thanks
      ///
      /// Locales: en, nl
      static func no_thanks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_thanks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_thanks"
        }

        return NSLocalizedString("no_thanks", bundle: bundle, comment: "")
      }

      /// en translation: Note
      ///
      /// Locales: en, nl
      static func note(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("note", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "note"
        }

        return NSLocalizedString("note", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, nl
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ok"
        }

        return NSLocalizedString("ok", bundle: bundle, comment: "")
      }

      /// en translation: OPEN MAIL APP
      ///
      /// Locales: en, nl
      static func open_mail_app(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("open_mail_app", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "open_mail_app"
        }

        return NSLocalizedString("open_mail_app", bundle: bundle, comment: "")
      }

      /// en translation: Offers
      ///
      /// Locales: en, nl
      static func offers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("offers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "offers"
        }

        return NSLocalizedString("offers", bundle: bundle, comment: "")
      }

      /// en translation: Others
      ///
      /// Locales: en, nl
      static func others(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("others", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "others"
        }

        return NSLocalizedString("others", bundle: bundle, comment: "")
      }

      /// en translation: PAIRING
      ///
      /// Locales: en, nl
      static func pairing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pairing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pairing"
        }

        return NSLocalizedString("pairing", bundle: bundle, comment: "")
      }

      /// en translation: PAYMENT
      ///
      /// Locales: en, nl
      static func payment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment"
        }

        return NSLocalizedString("payment", bundle: bundle, comment: "")
      }

      /// en translation: Paid
      ///
      /// Locales: en, nl
      static func paid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paid", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "paid"
        }

        return NSLocalizedString("paid", bundle: bundle, comment: "")
      }

      /// en translation: Parent
      ///
      /// Locales: en, nl
      static func parent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("parent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "parent"
        }

        return NSLocalizedString("parent", bundle: bundle, comment: "")
      }

      /// en translation: Payment succeeded! The processing can take up to 3 business days.
      ///
      /// Locales: en, nl
      static func payment_succeeded(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment_succeeded", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_succeeded"
        }

        return NSLocalizedString("payment_succeeded", bundle: bundle, comment: "")
      }

      /// en translation: Personal
      ///
      /// Locales: en, nl
      static func personal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("personal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "personal"
        }

        return NSLocalizedString("personal", bundle: bundle, comment: "")
      }

      /// en translation: Personal account
      ///
      /// Locales: en, nl
      static func personal_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("personal_account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "personal_account"
        }

        return NSLocalizedString("personal_account", bundle: bundle, comment: "")
      }

      /// en translation: Please confirm the transaction of € %@.
      ///
      /// Locales: en, nl
      static func please_confirm_the_transaction(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("please_confirm_the_transaction", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please_confirm_the_transaction"
        }

        let format = NSLocalizedString("please_confirm_the_transaction", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Please enter the amount
      ///
      /// Locales: en, nl
      static func please_enter_the_amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please_enter_the_amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please_enter_the_amount"
        }

        return NSLocalizedString("please_enter_the_amount", bundle: bundle, comment: "")
      }

      /// en translation: Please go to the Settings & Turn On Passcode
      ///
      /// Locales: en, nl
      static func please_go_to_settings_turn_on_passcode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please_go_to_settings_turn_on_passcode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please_go_to_settings_turn_on_passcode"
        }

        return NSLocalizedString("please_go_to_settings_turn_on_passcode", bundle: bundle, comment: "")
      }

      /// en translation: Please try to send email again.
      ///
      /// Locales: en, nl
      static func please_try_to_send_email_again(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please_try_to_send_email_again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please_try_to_send_email_again"
        }

        return NSLocalizedString("please_try_to_send_email_again", bundle: bundle, comment: "")
      }

      /// en translation: Press settings to give an access or cancel to close this window.
      ///
      /// Locales: en
      static func press_settings_to_give_access_or_cancel_to_close_window(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("press_settings_to_give_access_or_cancel_to_close_window", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "press_settings_to_give_access_or_cancel_to_close_window"
        }

        return NSLocalizedString("press_settings_to_give_access_or_cancel_to_close_window", bundle: bundle, comment: "")
      }

      /// en translation: Price agreement
      ///
      /// Locales: en, nl
      static func price_agreement(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("price_agreement", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "price_agreement"
        }

        return NSLocalizedString("price_agreement", bundle: bundle, comment: "")
      }

      /// en translation: Primary e-mail
      ///
      /// Locales: en, nl
      static func primary_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("primary_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "primary_email"
        }

        return NSLocalizedString("primary_email", bundle: bundle, comment: "")
      }

      /// en translation: Product voucher
      ///
      /// Locales: en, nl
      static func product_voucher(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("product_voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "product_voucher"
        }

        return NSLocalizedString("product_voucher", bundle: bundle, comment: "")
      }

      /// en translation: Profile
      ///
      /// Locales: en, nl
      static func profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile"
        }

        return NSLocalizedString("profile", bundle: bundle, comment: "")
      }

      /// en translation: Property
      ///
      /// Locales: en, nl
      static func property(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("property", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "property"
        }

        return NSLocalizedString("property", bundle: bundle, comment: "")
      }

      /// en translation: Provider
      ///
      /// Locales: en, nl
      static func provider(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("provider", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "provider"
        }

        return NSLocalizedString("provider", bundle: bundle, comment: "")
      }

      /// en translation: QR-code was recognized
      ///
      /// Locales: en, nl
      static func scanning_successfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scanning_successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scanning_successfully"
        }

        return NSLocalizedString("scanning_successfully", bundle: bundle, comment: "")
      }

      /// en translation: Question from Me user
      ///
      /// Locales: en, nl
      static func question_from_me_user(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("question_from_me_user", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "question_from_me_user"
        }

        return NSLocalizedString("question_from_me_user", bundle: bundle, comment: "")
      }

      /// en translation: REQUEST
      ///
      /// Locales: en, nl
      static func request(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "request"
        }

        return NSLocalizedString("request", bundle: bundle, comment: "")
      }

      /// en translation: Record
      ///
      /// Locales: en
      static func record(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("record", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "record"
        }

        return NSLocalizedString("record", bundle: bundle, comment: "")
      }

      /// en translation: Records
      ///
      /// Locales: en, nl
      static func records(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("records", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "records"
        }

        return NSLocalizedString("records", bundle: bundle, comment: "")
      }

      /// en translation: Relationships
      ///
      /// Locales: en, nl
      static func relationships(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("relationships", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "relationships"
        }

        return NSLocalizedString("relationships", bundle: bundle, comment: "")
      }

      /// en translation: SIGN IN
      ///
      /// Locales: en, nl
      static func sign_in(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign_in", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign_in"
        }

        return NSLocalizedString("sign_in", bundle: bundle, comment: "")
      }

      /// en translation: Salary
      ///
      /// Locales: en, nl
      static func base_salary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("base_salary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "base_salary"
        }

        return NSLocalizedString("base_salary", bundle: bundle, comment: "")
      }

      /// en translation: Search currency
      ///
      /// Locales: en, nl
      static func search_currency(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("search_currency", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "search_currency"
        }

        return NSLocalizedString("search_currency", bundle: bundle, comment: "")
      }

      /// en translation: Secundary e-mail
      ///
      /// Locales: en, nl
      static func secundary_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("secundary_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "secundary_email"
        }

        return NSLocalizedString("secundary_email", bundle: bundle, comment: "")
      }

      /// en translation: Send an e-mail to the provider
      ///
      /// Locales: en, nl
      static func send_an_email_to_the_provider(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("send_an_email_to_the_provider", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "send_an_email_to_the_provider"
        }

        return NSLocalizedString("send_an_email_to_the_provider", bundle: bundle, comment: "")
      }

      /// en translation: Send the voucher to your email?
      ///
      /// Locales: en, nl
      static func send_voucher_to_your_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("send_voucher_to_your_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "send_voucher_to_your_email"
        }

        return NSLocalizedString("send_voucher_to_your_email", bundle: bundle, comment: "")
      }

      /// en translation: Set up the login code
      ///
      /// Locales: en, nl
      static func set_up_the_login_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("set_up_the_login_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "set_up_the_login_code"
        }

        return NSLocalizedString("set_up_the_login_code", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, nl
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings"
        }

        return NSLocalizedString("settings", bundle: bundle, comment: "")
      }

      /// en translation: Share identification number
      ///
      /// Locales: en, nl
      static func share_identification_number(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("share_identification_number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "share_identification_number"
        }

        return NSLocalizedString("share_identification_number", bundle: bundle, comment: "")
      }

      /// en translation: Sharing information
      ///
      /// Locales: en, nl
      static func sharing_information(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sharing_information", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sharing_information"
        }

        return NSLocalizedString("sharing_information", bundle: bundle, comment: "")
      }

      /// en translation: Something went wrong, please try again…
      ///
      /// Locales: en, nl
      static func something_went_wrong_please_try_again(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("something_went_wrong_please_try_again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "something_went_wrong_please_try_again"
        }

        return NSLocalizedString("something_went_wrong_please_try_again", bundle: bundle, comment: "")
      }

      /// en translation: Sorry not enough funds on voucher
      ///
      /// Locales: en, nl
      static func voucher_not_have_enough_funds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("voucher_not_have_enough_funds", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "voucher_not_have_enough_funds"
        }

        return NSLocalizedString("voucher_not_have_enough_funds", bundle: bundle, comment: "")
      }

      /// en translation: Sorry you do not meet the criteria for this voucher
      ///
      /// Locales: en, nl
      static func sorry_you_do_not_meet_the_criteria_for_this_voucher(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sorry_you_do_not_meet_the_criteria_for_this_voucher", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sorry_you_do_not_meet_the_criteria_for_this_voucher"
        }

        return NSLocalizedString("sorry_you_do_not_meet_the_criteria_for_this_voucher", bundle: bundle, comment: "")
      }

      /// en translation: Spouse
      ///
      /// Locales: en, nl
      static func spouse(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("spouse", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "spouse"
        }

        return NSLocalizedString("spouse", bundle: bundle, comment: "")
      }

      /// en translation: Subsidy by %@
      ///
      /// Locales: en, nl
      static func subsid_by(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("subsid_by", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subsid_by"
        }

        let format = NSLocalizedString("subsid_by", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Success
      ///
      /// Locales: en, nl
      static func success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("success", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "success"
        }

        return NSLocalizedString("success", bundle: bundle, comment: "")
      }

      /// en translation: Success!
      ///
      /// Locales: en, nl
      static func success_exclamation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("success_exclamation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "success_exclamation"
        }

        return NSLocalizedString("success_exclamation", bundle: bundle, comment: "")
      }

      /// en translation: Successfully  logged in!
      ///
      /// Locales: en, nl
      static func success_login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("success_login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "success_login"
        }

        return NSLocalizedString("success_login", bundle: bundle, comment: "")
      }

      /// en translation: System Cancel
      ///
      /// Locales: en, nl
      static func system_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("system_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "system_cancel"
        }

        return NSLocalizedString("system_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Tap here if you want to see your list of transactions
      ///
      /// Locales: en, nl
      static func tap_here_you_want_to_see_list_transaction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tap_here_you_want_to_see_list_transaction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tap_here_you_want_to_see_list_transaction"
        }

        return NSLocalizedString("tap_here_you_want_to_see_list_transaction", bundle: bundle, comment: "")
      }

      /// en translation: Tax ID
      ///
      /// Locales: en, nl
      static func tax_id(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tax_id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tax_id"
        }

        return NSLocalizedString("tax_id", bundle: bundle, comment: "")
      }

      /// en translation: Telephonenumber
      ///
      /// Locales: en, nl
      static func telephone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("telephone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "telephone"
        }

        return NSLocalizedString("telephone", bundle: bundle, comment: "")
      }

      /// en translation: Test organisation
      ///
      /// Locales: en, nl
      static func test_organization(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("test_organization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "test_organization"
        }

        return NSLocalizedString("test_organization", bundle: bundle, comment: "")
      }

      /// en translation: Test transaction
      ///
      /// Locales: en, nl
      static func test_transaction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("test_transaction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "test_transaction"
        }

        return NSLocalizedString("test_transaction", bundle: bundle, comment: "")
      }

      /// en translation: The customer needs to pay folowing amount
      ///
      /// Locales: en, nl
      static func paid_by_customer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paid_by_customer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "paid_by_customer"
        }

        return NSLocalizedString("paid_by_customer", bundle: bundle, comment: "")
      }

      /// en translation: The offers below are reserved by the customer
      ///
      /// Locales: en, nl
      static func offer_below_reserved_customer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("offer_below_reserved_customer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "offer_below_reserved_customer"
        }

        return NSLocalizedString("offer_below_reserved_customer", bundle: bundle, comment: "")
      }

      /// en translation: The scanner is not supported on this device
      ///
      /// Locales: en, nl
      static func the_scanner_is_not_supported_on_this_device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("the_scanner_is_not_supported_on_this_device", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "the_scanner_is_not_supported_on_this_device"
        }

        return NSLocalizedString("the_scanner_is_not_supported_on_this_device", bundle: bundle, comment: "")
      }

      /// en translation: The voucher is empty! No transactions can be done.
      ///
      /// Locales: en, nl
      static func the_voucher_is_empty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("the_voucher_is_empty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "the_voucher_is_empty"
        }

        return NSLocalizedString("the_voucher_is_empty", bundle: bundle, comment: "")
      }

      /// en translation: This app is intended to store vouchers, make payments and log in to different applications./n/n/nThis app works together with:/n/n     • 	The Westerkwartier webshop;      • 	The Nijmegen webshop;      • 	The Winterswijk webshop;      • 	The Oost Gelre webshop;      • 	The Berkelland webshop;      • 	The Noordoostpolder webshop      • 	The Kerstpakket webshop;
      ///
      /// Locales: en, nl
      static func description_about(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("description_about", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "description_about"
        }

        return NSLocalizedString("description_about", bundle: bundle, comment: "")
      }

      /// en translation: This app is not authorized to use Back Camera
      ///
      /// Locales: en, nl
      static func this_app_is_not_authorized_to_use_back_camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("this_app_is_not_authorized_to_use_back_camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "this_app_is_not_authorized_to_use_back_camera"
        }

        return NSLocalizedString("this_app_is_not_authorized_to_use_back_camera", bundle: bundle, comment: "")
      }

      /// en translation: This device in not authorize
      ///
      /// Locales: en
      static func this_device_in_not_authorize(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("this_device_in_not_authorize", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "this_device_in_not_authorize"
        }

        return NSLocalizedString("this_device_in_not_authorize", bundle: bundle, comment: "")
      }

      /// en translation: This email does not exist
      ///
      /// Locales: en, nl
      static func this_email_does_not_exist(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("this_email_does_not_exist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "this_email_does_not_exist"
        }

        return NSLocalizedString("this_email_does_not_exist", bundle: bundle, comment: "")
      }

      /// en translation: This email is already used
      ///
      /// Locales: en, nl
      static func this_email_is_already_used(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("this_email_is_already_used", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "this_email_is_already_used"
        }

        return NSLocalizedString("this_email_is_already_used", bundle: bundle, comment: "")
      }

      /// en translation: This is your
      ///
      /// Locales: en, nl
      static func this_is_your(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("this_is_your", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "this_is_your"
        }

        return NSLocalizedString("this_is_your", bundle: bundle, comment: "")
      }

      /// en translation: This is your Voucher’s QR-code.
      ///
      /// Locales: en, nl
      static func this_is_your_vouchers_qr_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("this_is_your_vouchers_qr_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "this_is_your_vouchers_qr_code"
        }

        return NSLocalizedString("this_is_your_vouchers_qr_code", bundle: bundle, comment: "")
      }

      /// en translation: This is your personal QR code.
      ///
      /// Locales: en, nl
      static func this_is_your_personal_qr_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("this_is_your_personal_qr_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "this_is_your_personal_qr_code"
        }

        return NSLocalizedString("this_is_your_personal_qr_code", bundle: bundle, comment: "")
      }

      /// en translation: This product voucher is used!
      ///
      /// Locales: en, nl
      static func this_product_voucher_is_used(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("this_product_voucher_is_used", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "this_product_voucher_is_used"
        }

        return NSLocalizedString("this_product_voucher_is_used", bundle: bundle, comment: "")
      }

      /// en translation: This voucher expires on %@
      ///
      /// Locales: en, nl
      static func this_voucher_is_expired_on(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("this_voucher_is_expired_on", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "this_voucher_is_expired_on"
        }

        let format = NSLocalizedString("this_voucher_is_expired_on", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Total price
      ///
      /// Locales: en, nl
      static func total_price(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("total_price", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "total_price"
        }

        return NSLocalizedString("total_price", bundle: bundle, comment: "")
      }

      /// en translation: Transaction
      ///
      /// Locales: en, nl
      static func transaction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction"
        }

        return NSLocalizedString("transaction", bundle: bundle, comment: "")
      }

      /// en translation: Transaction details
      ///
      /// Locales: en, nl
      static func transaction_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transaction_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transaction_details"
        }

        return NSLocalizedString("transaction_details", bundle: bundle, comment: "")
      }

      /// en translation: Transactions
      ///
      /// Locales: en, nl
      static func transactions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("transactions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "transactions"
        }

        return NSLocalizedString("transactions", bundle: bundle, comment: "")
      }

      /// en translation: Turn off login code
      ///
      /// Locales: en, nl
      static func turn_off_login_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("turn_off_login_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "turn_off_login_code"
        }

        return NSLocalizedString("turn_off_login_code", bundle: bundle, comment: "")
      }

      /// en translation: Turn on Face ID
      ///
      /// Locales: en, nl
      static func turn_on_face_ID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("turn_on_face_ID", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "turn_on_face_ID"
        }

        return NSLocalizedString("turn_on_face_ID", bundle: bundle, comment: "")
      }

      /// en translation: Turn on Touch ID
      ///
      /// Locales: en, nl
      static func turn_on_touch_ID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("turn_on_touch_ID", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "turn_on_touch_ID"
        }

        return NSLocalizedString("turn_on_touch_ID", bundle: bundle, comment: "")
      }

      /// en translation: Unknown QR-code!
      ///
      /// Locales: en, nl
      static func unknown_qr_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unknown_qr_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unknown_qr_code"
        }

        return NSLocalizedString("unknown_qr_code", bundle: bundle, comment: "")
      }

      /// en translation: Unlock with %@
      ///
      /// Locales: en, nl
      static func unlock_with(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("unlock_with", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unlock_with"
        }

        let format = NSLocalizedString("unlock_with", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Use Touch ID
      ///
      /// Locales: en, nl
      static func use_touch_ID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("use_touch_ID", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "use_touch_ID"
        }

        return NSLocalizedString("use_touch_ID", bundle: bundle, comment: "")
      }

      /// en translation: Use Touch ID to log in?
      ///
      /// Locales: en, nl
      static func use_touch_ID_to_log_in(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("use_touch_ID_to_log_in", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "use_touch_ID_to_log_in"
        }

        return NSLocalizedString("use_touch_ID_to_log_in", bundle: bundle, comment: "")
      }

      /// en translation: Used
      ///
      /// Locales: en, nl
      static func used(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("used", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "used"
        }

        return NSLocalizedString("used", bundle: bundle, comment: "")
      }

      /// en translation: User Cancel
      ///
      /// Locales: en, nl
      static func user_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user_cancel"
        }

        return NSLocalizedString("user_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Validate
      ///
      /// Locales: en, nl
      static func validate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validate"
        }

        return NSLocalizedString("validate", bundle: bundle, comment: "")
      }

      /// en translation: Validation approved.
      ///
      /// Locales: en, nl
      static func validation_approved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validation_approved", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validation_approved"
        }

        return NSLocalizedString("validation_approved", bundle: bundle, comment: "")
      }

      /// en translation: Validations
      ///
      /// Locales: en, nl
      static func validations(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("validations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "validations"
        }

        return NSLocalizedString("validations", bundle: bundle, comment: "")
      }

      /// en translation: Voucher Info
      ///
      /// Locales: en, nl
      static func voucher_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("voucher_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "voucher_info"
        }

        return NSLocalizedString("voucher_info", bundle: bundle, comment: "")
      }

      /// en translation: Vouchers
      ///
      /// Locales: en, nl
      static func vouchers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vouchers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "vouchers"
        }

        return NSLocalizedString("vouchers", bundle: bundle, comment: "")
      }

      /// en translation: Warning
      ///
      /// Locales: en, nl
      static func warning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("warning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "warning"
        }

        return NSLocalizedString("warning", bundle: bundle, comment: "")
      }

      /// en translation: Welcome to Me
      ///
      /// Locales: en, nl
      static func welcome_to_me(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("welcome_to_me", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "welcome_to_me"
        }

        return NSLocalizedString("welcome_to_me", bundle: bundle, comment: "")
      }

      /// en translation: What customer pays
      ///
      /// Locales: en, nl
      static func what_customer_pays(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("what_customer_pays", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "what_customer_pays"
        }

        return NSLocalizedString("what_customer_pays", bundle: bundle, comment: "")
      }

      /// en translation: With the Me you can create an identity, receive and use your vouchers.
      ///
      /// Locales: en
      static func with_me_you_can_create_identity_receive_and_use_your_vouchers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("with_me_you_can_create_identity_receive_and_use_your_vouchers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "with_me_you_can_create_identity_receive_and_use_your_vouchers"
        }

        return NSLocalizedString("with_me_you_can_create_identity_receive_and_use_your_vouchers", bundle: bundle, comment: "")
      }

      /// en translation: Would you like to send us your feedback by e-mail?
      ///
      /// Locales: en, nl
      static func would_you_like_send_us_your_feedback_by_email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("would_you_like_send_us_your_feedback_by_email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "would_you_like_send_us_your_feedback_by_email"
        }

        return NSLocalizedString("would_you_like_send_us_your_feedback_by_email", bundle: bundle, comment: "")
      }

      /// en translation: Wrong passcode, please try again
      ///
      /// Locales: en, nl
      static func wrong_passcode_please_try_again(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wrong_passcode_please_try_again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wrong_passcode_please_try_again"
        }

        return NSLocalizedString("wrong_passcode_please_try_again", bundle: bundle, comment: "")
      }

      /// en translation: YES
      ///
      /// Locales: en, nl
      static func yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "yes"
        }

        return NSLocalizedString("yes", bundle: bundle, comment: "")
      }

      /// en translation: Yes, I want to login
      ///
      /// Locales: en, nl
      static func i_want_to_login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("i_want_to_login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "i_want_to_login"
        }

        return NSLocalizedString("i_want_to_login", bundle: bundle, comment: "")
      }

      /// en translation: You can't scan this voucher. You are not accepted as a provider for the fund that hands out these vouchers.
      ///
      /// Locales: en, nl
      static func you_cant_scan_this_voucher_you_are_not_accepted_as_provider_for_fund(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("you_cant_scan_this_voucher_you_are_not_accepted_as_provider_for_fund", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "you_cant_scan_this_voucher_you_are_not_accepted_as_provider_for_fund"
        }

        return NSLocalizedString("you_cant_scan_this_voucher_you_are_not_accepted_as_provider_for_fund", bundle: bundle, comment: "")
      }

      /// en translation: You sure you wan't to login this device?
      ///
      /// Locales: en, nl
      static func you_sure_you_want_to_login_device(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("you_sure_you_want_to_login_device", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "you_sure_you_want_to_login_device"
        }

        return NSLocalizedString("you_sure_you_want_to_login_device", bundle: bundle, comment: "")
      }

      /// en translation: Your e-mail address is already used, do you instead want to login using this e-mail address?
      ///
      /// Locales: en, nl
      static func your_email_address_already_used_you_instead_want_login_using_email_address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("your_email_address_already_used_you_instead_want_login_using_email_address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "your_email_address_already_used_you_instead_want_login_using_email_address"
        }

        return NSLocalizedString("your_email_address_already_used_you_instead_want_login_using_email_address", bundle: bundle, comment: "")
      }

      /// en translation: Your session has expired. You are being logged out.
      ///
      /// Locales: en, nl
      static func your_session_has_expired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("your_session_has_expired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "your_session_has_expired"
        }

        return NSLocalizedString("your_session_has_expired", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.organizationTableViewCell` struct is generated, and contains static references to 1 localization keys.
    struct organizationTableViewCell {
      /// en translation: Belga Fietsen Groningen Megastore
      ///
      /// Locales: en, nl
      static let yugasZgZText = Rswift.StringResource(key: "YUG-aS-ZgZ.text", tableName: "OrganizationTableViewCell", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: Belga Fietsen Groningen Megastore
      ///
      /// Locales: en, nl
      static func yugasZgZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YUG-aS-ZgZ.text", tableName: "OrganizationTableViewCell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrganizationTableViewCell", preferredLanguages: preferredLanguages) else {
          return "YUG-aS-ZgZ.text"
        }

        return NSLocalizedString("YUG-aS-ZgZ.text", tableName: "OrganizationTableViewCell", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.organizationValidatorViewController` struct is generated, and contains static references to 1 localization keys.
    struct organizationValidatorViewController {
      /// en translation: Choose a validator
      ///
      /// Locales: en, nl
      static let axgVL5dNText = Rswift.StringResource(key: "axg-vL-5dN.text", tableName: "OrganizationValidatorViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: Choose a validator
      ///
      /// Locales: en, nl
      static func axgVL5dNText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("axg-vL-5dN.text", tableName: "OrganizationValidatorViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "OrganizationValidatorViewController", preferredLanguages: preferredLanguages) else {
          return "axg-vL-5dN.text"
        }

        return NSLocalizedString("axg-vL-5dN.text", tableName: "OrganizationValidatorViewController", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.payment` struct is generated, and contains static references to 8 localization keys.
    struct payment {
      /// en translation: DenyK
      ///
      /// Locales: en, nl
      static let sBInTb1Text = Rswift.StringResource(key: "7sB-in-Tb1.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Enter the price here.
      ///
      /// Locales: en, nl
      static let s9mQTRjOPlaceholder = Rswift.StringResource(key: "S9m-QT-RjO.placeholder", tableName: "Payment", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Kindpakket
      ///
      /// Locales: en, nl
      static let uPPYSF4lText = Rswift.StringResource(key: "uPP-YS-f4l.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: NOT 2 DAGEN GELDIG VALID
      ///
      /// Locales: en, nl
      static let kgfIKRAIText = Rswift.StringResource(key: "kgf-iK-RAI.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Note
      ///
      /// Locales: en, nl
      static let tcrOrO4PPlaceholder = Rswift.StringResource(key: "TCR-Or-O4P.placeholder", tableName: "Payment", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Product categories
      ///
      /// Locales: en, nl
      static let zrf29OzlText = Rswift.StringResource(key: "Zrf-29-ozl.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: REQUEST PAYMENT
      ///
      /// Locales: en, nl
      static let riyOmVArNormalTitle = Rswift.StringResource(key: "riy-om-vAr.normalTitle", tableName: "Payment", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Redeem Voucher
      ///
      /// Locales: en, nl
      static let eGEDuSxeText = Rswift.StringResource(key: "eGE-du-sxe.text", tableName: "Payment", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: DenyK
      ///
      /// Locales: en, nl
      static func sBInTb1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("7sB-in-Tb1.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "7sB-in-Tb1.text"
        }

        return NSLocalizedString("7sB-in-Tb1.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Enter the price here.
      ///
      /// Locales: en, nl
      static func s9mQTRjOPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("S9m-QT-RjO.placeholder", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "S9m-QT-RjO.placeholder"
        }

        return NSLocalizedString("S9m-QT-RjO.placeholder", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Kindpakket
      ///
      /// Locales: en, nl
      static func uPPYSF4lText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uPP-YS-f4l.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "uPP-YS-f4l.text"
        }

        return NSLocalizedString("uPP-YS-f4l.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: NOT 2 DAGEN GELDIG VALID
      ///
      /// Locales: en, nl
      static func kgfIKRAIText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kgf-iK-RAI.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "kgf-iK-RAI.text"
        }

        return NSLocalizedString("kgf-iK-RAI.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Note
      ///
      /// Locales: en, nl
      static func tcrOrO4PPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TCR-Or-O4P.placeholder", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "TCR-Or-O4P.placeholder"
        }

        return NSLocalizedString("TCR-Or-O4P.placeholder", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Product categories
      ///
      /// Locales: en, nl
      static func zrf29OzlText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Zrf-29-ozl.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "Zrf-29-ozl.text"
        }

        return NSLocalizedString("Zrf-29-ozl.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: REQUEST PAYMENT
      ///
      /// Locales: en, nl
      static func riyOmVArNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("riy-om-vAr.normalTitle", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "riy-om-vAr.normalTitle"
        }

        return NSLocalizedString("riy-om-vAr.normalTitle", tableName: "Payment", bundle: bundle, comment: "")
      }

      /// en translation: Redeem Voucher
      ///
      /// Locales: en, nl
      static func eGEDuSxeText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eGE-du-sxe.text", tableName: "Payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Payment", preferredLanguages: preferredLanguages) else {
          return "eGE-du-sxe.text"
        }

        return NSLocalizedString("eGE-du-sxe.text", tableName: "Payment", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.profile` struct is generated, and contains static references to 18 localization keys.
    struct profile {
      /// en translation: 1.0.4
      ///
      /// Locales: en, nl
      static let fMYOVsBText = Rswift.StringResource(key: "6fM-yO-VsB.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: About Me
      ///
      /// Locales: en, nl
      static let rtBmZ42NormalTitle = Rswift.StringResource(key: "0RT-Bm-Z42.normalTitle", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: App version
      ///
      /// Locales: en, nl
      static let szPVkGG7Text = Rswift.StringResource(key: "szP-vk-gG7.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Change 4-digit passcode
      ///
      /// Locales: en, nl
      static let abLEwQz7Text = Rswift.StringResource(key: "AbL-ew-Qz7.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: en, nl
      static let hu1SrB6hNormalTitle = Rswift.StringResource(key: "hu1-sr-b6h.normalTitle", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Contact Support
      ///
      /// Locales: en, nl
      static let g7d5ZMNyText = Rswift.StringResource(key: "G7d-5Z-MNy.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: en, nl
      static let sqgEG8rANormalTitle = Rswift.StringResource(key: "Sqg-eG-8rA.normalTitle", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: LOG OUT
      ///
      /// Locales: en, nl
      static let lClJE4RlNormalTitle = Rswift.StringResource(key: "LCl-JE-4Rl.normalTitle", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Let someone scan your personal QR code to send your currency, property or vouchers.
      ///
      /// Locales: en, nl
      static let mxWQZ33fText = Rswift.StringResource(key: "MxW-qZ-33f.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Personal account
      ///
      /// Locales: en, nl
      static let nFdZAOpXText = Rswift.StringResource(key: "NFd-zA-OpX.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Press for crash the app
      ///
      /// Locales: en, nl
      static let uyUTZKOJNormalTitle = Rswift.StringResource(key: "uyU-tZ-kOJ.normalTitle", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Send crash reports
      ///
      /// Locales: en, nl
      static let pA8VOWKTText = Rswift.StringResource(key: "pA8-VO-WKT.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Start from scanner
      ///
      /// Locales: en, nl
      static let aiDMk0LQText = Rswift.StringResource(key: "AiD-mk-0LQ.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This is your personal QR code
      ///
      /// Locales: en, nl
      static let nfrIkUtFText = Rswift.StringResource(key: "NFR-Ik-UtF.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Turn off passcode
      ///
      /// Locales: en, nl
      static let bq2SXGJZText = Rswift.StringResource(key: "Bq2-SX-GJZ.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Use Face ID for login
      ///
      /// Locales: en, nl
      static let scnSYTGfText = Rswift.StringResource(key: "scn-SY-tGf.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Uw Profiel
      ///
      /// Locales: en, nl
      static let ncj5FIHrText = Rswift.StringResource(key: "Ncj-5F-IHr.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: mail@mail.com
      ///
      /// Locales: en, nl
      static let rkqEJVPaText = Rswift.StringResource(key: "Rkq-EJ-VPa.text", tableName: "Profile", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: 1.0.4
      ///
      /// Locales: en, nl
      static func fMYOVsBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6fM-yO-VsB.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "6fM-yO-VsB.text"
        }

        return NSLocalizedString("6fM-yO-VsB.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: About Me
      ///
      /// Locales: en, nl
      static func rtBmZ42NormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0RT-Bm-Z42.normalTitle", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "0RT-Bm-Z42.normalTitle"
        }

        return NSLocalizedString("0RT-Bm-Z42.normalTitle", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: App version
      ///
      /// Locales: en, nl
      static func szPVkGG7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("szP-vk-gG7.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "szP-vk-gG7.text"
        }

        return NSLocalizedString("szP-vk-gG7.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Change 4-digit passcode
      ///
      /// Locales: en, nl
      static func abLEwQz7Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AbL-ew-Qz7.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "AbL-ew-Qz7.text"
        }

        return NSLocalizedString("AbL-ew-Qz7.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: en, nl
      static func hu1SrB6hNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hu1-sr-b6h.normalTitle", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "hu1-sr-b6h.normalTitle"
        }

        return NSLocalizedString("hu1-sr-b6h.normalTitle", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Contact Support
      ///
      /// Locales: en, nl
      static func g7d5ZMNyText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("G7d-5Z-MNy.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "G7d-5Z-MNy.text"
        }

        return NSLocalizedString("G7d-5Z-MNy.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: en, nl
      static func sqgEG8rANormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sqg-eG-8rA.normalTitle", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "Sqg-eG-8rA.normalTitle"
        }

        return NSLocalizedString("Sqg-eG-8rA.normalTitle", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: LOG OUT
      ///
      /// Locales: en, nl
      static func lClJE4RlNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LCl-JE-4Rl.normalTitle", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "LCl-JE-4Rl.normalTitle"
        }

        return NSLocalizedString("LCl-JE-4Rl.normalTitle", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Let someone scan your personal QR code to send your currency, property or vouchers.
      ///
      /// Locales: en, nl
      static func mxWQZ33fText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MxW-qZ-33f.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "MxW-qZ-33f.text"
        }

        return NSLocalizedString("MxW-qZ-33f.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Personal account
      ///
      /// Locales: en, nl
      static func nFdZAOpXText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NFd-zA-OpX.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "NFd-zA-OpX.text"
        }

        return NSLocalizedString("NFd-zA-OpX.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Press for crash the app
      ///
      /// Locales: en, nl
      static func uyUTZKOJNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uyU-tZ-kOJ.normalTitle", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "uyU-tZ-kOJ.normalTitle"
        }

        return NSLocalizedString("uyU-tZ-kOJ.normalTitle", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Send crash reports
      ///
      /// Locales: en, nl
      static func pA8VOWKTText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pA8-VO-WKT.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "pA8-VO-WKT.text"
        }

        return NSLocalizedString("pA8-VO-WKT.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Start from scanner
      ///
      /// Locales: en, nl
      static func aiDMk0LQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("AiD-mk-0LQ.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "AiD-mk-0LQ.text"
        }

        return NSLocalizedString("AiD-mk-0LQ.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: This is your personal QR code
      ///
      /// Locales: en, nl
      static func nfrIkUtFText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NFR-Ik-UtF.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "NFR-Ik-UtF.text"
        }

        return NSLocalizedString("NFR-Ik-UtF.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Turn off passcode
      ///
      /// Locales: en, nl
      static func bq2SXGJZText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Bq2-SX-GJZ.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "Bq2-SX-GJZ.text"
        }

        return NSLocalizedString("Bq2-SX-GJZ.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Use Face ID for login
      ///
      /// Locales: en, nl
      static func scnSYTGfText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scn-SY-tGf.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "scn-SY-tGf.text"
        }

        return NSLocalizedString("scn-SY-tGf.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: Uw Profiel
      ///
      /// Locales: en, nl
      static func ncj5FIHrText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ncj-5F-IHr.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "Ncj-5F-IHr.text"
        }

        return NSLocalizedString("Ncj-5F-IHr.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      /// en translation: mail@mail.com
      ///
      /// Locales: en, nl
      static func rkqEJVPaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rkq-EJ-VPa.text", tableName: "Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Profile", preferredLanguages: preferredLanguages) else {
          return "Rkq-EJ-VPa.text"
        }

        return NSLocalizedString("Rkq-EJ-VPa.text", tableName: "Profile", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.recordDetail` struct is generated, and contains static references to 12 localization keys.
    struct recordDetail {
      /// en translation: Delete record
      ///
      /// Locales: en, nl
      static let owVNuEITNormalTitle = Rswift.StringResource(key: "owV-nu-EIT.normalTitle", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: en, nl
      static let fAdC31pqText = Rswift.StringResource(key: "fAd-C3-1pq.text", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Jamal
      ///
      /// Locales: en, nl
      static let gd30SRSMText = Rswift.StringResource(key: "GD3-0S-rSM.text", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, nl
      static let nZhDxKQ4Text = Rswift.StringResource(key: "NZh-dx-KQ4.text", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Let the shopkeeper scan it to make a validtion to your record.
      ///
      /// Locales: en, nl
      static let cb7BvI2dText = Rswift.StringResource(key: "Cb7-Bv-I2d.text", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: QR-CODE
      ///
      /// Locales: en, nl
      static let aVIF3Q7EText = Rswift.StringResource(key: "aVI-f3-Q7E.text", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Record detail
      ///
      /// Locales: en, nl
      static let nZaJqIY1Text = Rswift.StringResource(key: "nZa-Jq-IY1.text", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Show QR-Code
      ///
      /// Locales: en, nl
      static let xXmPGIzENormalTitle = Rswift.StringResource(key: "XXm-PG-izE.normalTitle", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This is your personal QR code
      ///
      /// Locales: en, nl
      static let j0BXOPUText = Rswift.StringResource(key: "3j0-bX-OPU.text", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This record has no validations yet
      ///
      /// Locales: en, nl
      static let tMmMnV3XText = Rswift.StringResource(key: "TMm-Mn-V3X.text", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Validations
      ///
      /// Locales: en, nl
      static let eLcRsIT8Text = Rswift.StringResource(key: "eLc-rs-IT8.text", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: validations
      ///
      /// Locales: en, nl
      static let eQwAsESGText = Rswift.StringResource(key: "eQw-as-eSG.text", tableName: "RecordDetail", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: Delete record
      ///
      /// Locales: en, nl
      static func owVNuEITNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("owV-nu-EIT.normalTitle", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "owV-nu-EIT.normalTitle"
        }

        return NSLocalizedString("owV-nu-EIT.normalTitle", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: en, nl
      static func fAdC31pqText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fAd-C3-1pq.text", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "fAd-C3-1pq.text"
        }

        return NSLocalizedString("fAd-C3-1pq.text", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: Jamal
      ///
      /// Locales: en, nl
      static func gd30SRSMText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GD3-0S-rSM.text", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "GD3-0S-rSM.text"
        }

        return NSLocalizedString("GD3-0S-rSM.text", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, nl
      static func nZhDxKQ4Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NZh-dx-KQ4.text", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "NZh-dx-KQ4.text"
        }

        return NSLocalizedString("NZh-dx-KQ4.text", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: Let the shopkeeper scan it to make a validtion to your record.
      ///
      /// Locales: en, nl
      static func cb7BvI2dText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cb7-Bv-I2d.text", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "Cb7-Bv-I2d.text"
        }

        return NSLocalizedString("Cb7-Bv-I2d.text", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: QR-CODE
      ///
      /// Locales: en, nl
      static func aVIF3Q7EText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aVI-f3-Q7E.text", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "aVI-f3-Q7E.text"
        }

        return NSLocalizedString("aVI-f3-Q7E.text", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: Record detail
      ///
      /// Locales: en, nl
      static func nZaJqIY1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nZa-Jq-IY1.text", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "nZa-Jq-IY1.text"
        }

        return NSLocalizedString("nZa-Jq-IY1.text", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: Show QR-Code
      ///
      /// Locales: en, nl
      static func xXmPGIzENormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XXm-PG-izE.normalTitle", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "XXm-PG-izE.normalTitle"
        }

        return NSLocalizedString("XXm-PG-izE.normalTitle", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: This is your personal QR code
      ///
      /// Locales: en, nl
      static func j0BXOPUText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("3j0-bX-OPU.text", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "3j0-bX-OPU.text"
        }

        return NSLocalizedString("3j0-bX-OPU.text", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: This record has no validations yet
      ///
      /// Locales: en, nl
      static func tMmMnV3XText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TMm-Mn-V3X.text", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "TMm-Mn-V3X.text"
        }

        return NSLocalizedString("TMm-Mn-V3X.text", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: Validations
      ///
      /// Locales: en, nl
      static func eLcRsIT8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eLc-rs-IT8.text", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "eLc-rs-IT8.text"
        }

        return NSLocalizedString("eLc-rs-IT8.text", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      /// en translation: validations
      ///
      /// Locales: en, nl
      static func eQwAsESGText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eQw-as-eSG.text", tableName: "RecordDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordDetail", preferredLanguages: preferredLanguages) else {
          return "eQw-as-eSG.text"
        }

        return NSLocalizedString("eQw-as-eSG.text", tableName: "RecordDetail", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.recordValidators` struct is generated, and contains static references to 10 localization keys.
    struct recordValidators {
      /// en translation: Choose the category under.
      ///
      /// Locales: en, nl
      static let xkUhUInText = Rswift.StringResource(key: "9Xk-uh-uIn.text", tableName: "RecordValidators", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Choose validator
      ///
      /// Locales: en, nl
      static let tTqNPAvEText = Rswift.StringResource(key: "TTq-NP-AvE.text", tableName: "RecordValidators", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Given Name
      ///
      /// Locales: en, nl
      static let y1JAA6CiText = Rswift.StringResource(key: "y1J-AA-6Ci.text", tableName: "RecordValidators", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Jamal
      ///
      /// Locales: en, nl
      static let e4sJtG1ENormalTitle = Rswift.StringResource(key: "e4s-Jt-G1E.normalTitle", tableName: "RecordValidators", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, nl
      static let spf3BE5Text = Rswift.StringResource(key: "5SP-f3-BE5.text", tableName: "RecordValidators", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, nl
      static let uwAHRRf8Text = Rswift.StringResource(key: "UwA-hR-Rf8.text", tableName: "RecordValidators", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: New records
      ///
      /// Locales: en, nl
      static let xiYUg2dgText = Rswift.StringResource(key: "XiY-ug-2dg.text", tableName: "RecordValidators", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: This record has no validations yet
      ///
      /// Locales: en, nl
      static let gLjO5OVgText = Rswift.StringResource(key: "gLj-o5-OVg.text", tableName: "RecordValidators", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: VALIDATE LATER
      ///
      /// Locales: en, nl
      static let bpxIbVVTNormalTitle = Rswift.StringResource(key: "bpx-Ib-VVT.normalTitle", tableName: "RecordValidators", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Voornaam
      ///
      /// Locales: en, nl
      static let wEh0jF0hNormalTitle = Rswift.StringResource(key: "WEh-0j-F0h.normalTitle", tableName: "RecordValidators", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: Choose the category under.
      ///
      /// Locales: en, nl
      static func xkUhUInText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9Xk-uh-uIn.text", tableName: "RecordValidators", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordValidators", preferredLanguages: preferredLanguages) else {
          return "9Xk-uh-uIn.text"
        }

        return NSLocalizedString("9Xk-uh-uIn.text", tableName: "RecordValidators", bundle: bundle, comment: "")
      }

      /// en translation: Choose validator
      ///
      /// Locales: en, nl
      static func tTqNPAvEText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TTq-NP-AvE.text", tableName: "RecordValidators", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordValidators", preferredLanguages: preferredLanguages) else {
          return "TTq-NP-AvE.text"
        }

        return NSLocalizedString("TTq-NP-AvE.text", tableName: "RecordValidators", bundle: bundle, comment: "")
      }

      /// en translation: Given Name
      ///
      /// Locales: en, nl
      static func y1JAA6CiText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("y1J-AA-6Ci.text", tableName: "RecordValidators", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordValidators", preferredLanguages: preferredLanguages) else {
          return "y1J-AA-6Ci.text"
        }

        return NSLocalizedString("y1J-AA-6Ci.text", tableName: "RecordValidators", bundle: bundle, comment: "")
      }

      /// en translation: Jamal
      ///
      /// Locales: en, nl
      static func e4sJtG1ENormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("e4s-Jt-G1E.normalTitle", tableName: "RecordValidators", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordValidators", preferredLanguages: preferredLanguages) else {
          return "e4s-Jt-G1E.normalTitle"
        }

        return NSLocalizedString("e4s-Jt-G1E.normalTitle", tableName: "RecordValidators", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, nl
      static func spf3BE5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5SP-f3-BE5.text", tableName: "RecordValidators", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordValidators", preferredLanguages: preferredLanguages) else {
          return "5SP-f3-BE5.text"
        }

        return NSLocalizedString("5SP-f3-BE5.text", tableName: "RecordValidators", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, nl
      static func uwAHRRf8Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("UwA-hR-Rf8.text", tableName: "RecordValidators", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordValidators", preferredLanguages: preferredLanguages) else {
          return "UwA-hR-Rf8.text"
        }

        return NSLocalizedString("UwA-hR-Rf8.text", tableName: "RecordValidators", bundle: bundle, comment: "")
      }

      /// en translation: New records
      ///
      /// Locales: en, nl
      static func xiYUg2dgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("XiY-ug-2dg.text", tableName: "RecordValidators", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordValidators", preferredLanguages: preferredLanguages) else {
          return "XiY-ug-2dg.text"
        }

        return NSLocalizedString("XiY-ug-2dg.text", tableName: "RecordValidators", bundle: bundle, comment: "")
      }

      /// en translation: This record has no validations yet
      ///
      /// Locales: en, nl
      static func gLjO5OVgText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gLj-o5-OVg.text", tableName: "RecordValidators", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordValidators", preferredLanguages: preferredLanguages) else {
          return "gLj-o5-OVg.text"
        }

        return NSLocalizedString("gLj-o5-OVg.text", tableName: "RecordValidators", bundle: bundle, comment: "")
      }

      /// en translation: VALIDATE LATER
      ///
      /// Locales: en, nl
      static func bpxIbVVTNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bpx-Ib-VVT.normalTitle", tableName: "RecordValidators", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordValidators", preferredLanguages: preferredLanguages) else {
          return "bpx-Ib-VVT.normalTitle"
        }

        return NSLocalizedString("bpx-Ib-VVT.normalTitle", tableName: "RecordValidators", bundle: bundle, comment: "")
      }

      /// en translation: Voornaam
      ///
      /// Locales: en, nl
      static func wEh0jF0hNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WEh-0j-F0h.normalTitle", tableName: "RecordValidators", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "RecordValidators", preferredLanguages: preferredLanguages) else {
          return "WEh-0j-F0h.normalTitle"
        }

        return NSLocalizedString("WEh-0j-F0h.normalTitle", tableName: "RecordValidators", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.successSendingViewController` struct is generated, and contains static references to 3 localization keys.
    struct successSendingViewController {
      /// en translation: OK
      ///
      /// Locales: en, nl
      static let kvOHI2dNormalTitle = Rswift.StringResource(key: "0kv-OH-i2d.normalTitle", tableName: "SuccessSendingViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Success!
      ///
      /// Locales: en, nl
      static let euX3zECaText = Rswift.StringResource(key: "euX-3z-eCa.text", tableName: "SuccessSendingViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: The voucher has been sent to email.
      ///
      /// Locales: en, nl
      static let qnGE6zQText = Rswift.StringResource(key: "6qn-GE-6zQ.text", tableName: "SuccessSendingViewController", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: OK
      ///
      /// Locales: en, nl
      static func kvOHI2dNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0kv-OH-i2d.normalTitle", tableName: "SuccessSendingViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SuccessSendingViewController", preferredLanguages: preferredLanguages) else {
          return "0kv-OH-i2d.normalTitle"
        }

        return NSLocalizedString("0kv-OH-i2d.normalTitle", tableName: "SuccessSendingViewController", bundle: bundle, comment: "")
      }

      /// en translation: Success!
      ///
      /// Locales: en, nl
      static func euX3zECaText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("euX-3z-eCa.text", tableName: "SuccessSendingViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SuccessSendingViewController", preferredLanguages: preferredLanguages) else {
          return "euX-3z-eCa.text"
        }

        return NSLocalizedString("euX-3z-eCa.text", tableName: "SuccessSendingViewController", bundle: bundle, comment: "")
      }

      /// en translation: The voucher has been sent to email.
      ///
      /// Locales: en, nl
      static func qnGE6zQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("6qn-GE-6zQ.text", tableName: "SuccessSendingViewController", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "SuccessSendingViewController", preferredLanguages: preferredLanguages) else {
          return "6qn-GE-6zQ.text"
        }

        return NSLocalizedString("6qn-GE-6zQ.text", tableName: "SuccessSendingViewController", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.textRecord` struct is generated, and contains static references to 7 localization keys.
    struct textRecord {
      /// en translation: Create the text or value for the current record
      ///
      /// Locales: en, nl
      static let sahCvY6yText = Rswift.StringResource(key: "sah-Cv-Y6y.text", tableName: "TextRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Enter the value
      ///
      /// Locales: en, nl
      static let loZCXWQ0Text = Rswift.StringResource(key: "LoZ-cX-WQ0.text", tableName: "TextRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Given Name
      ///
      /// Locales: en, nl
      static let k5ZTbErDNormalTitle = Rswift.StringResource(key: "K5Z-tb-ErD.normalTitle", tableName: "TextRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: New Record
      ///
      /// Locales: en, nl
      static let ckKUMWBText = Rswift.StringResource(key: "2ck-KU-mWB.text", tableName: "TextRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Personal
      ///
      /// Locales: en, nl
      static let up1wBOcNormalTitle = Rswift.StringResource(key: "5Up-1w-BOc.normalTitle", tableName: "TextRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: SUBMIT
      ///
      /// Locales: en, nl
      static let h8KWtMAVNormalTitle = Rswift.StringResource(key: "H8K-Wt-MAV.normalTitle", tableName: "TextRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)
      /// en translation: Text
      ///
      /// Locales: en, nl
      static let bOlHBLCpText = Rswift.StringResource(key: "bOl-hB-lCp.text", tableName: "TextRecord", bundle: R.hostingBundle, locales: ["en", "nl"], comment: nil)

      /// en translation: Create the text or value for the current record
      ///
      /// Locales: en, nl
      static func sahCvY6yText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sah-Cv-Y6y.text", tableName: "TextRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TextRecord", preferredLanguages: preferredLanguages) else {
          return "sah-Cv-Y6y.text"
        }

        return NSLocalizedString("sah-Cv-Y6y.text", tableName: "TextRecord", bundle: bundle, comment: "")
      }

      /// en translation: Enter the value
      ///
      /// Locales: en, nl
      static func loZCXWQ0Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LoZ-cX-WQ0.text", tableName: "TextRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TextRecord", preferredLanguages: preferredLanguages) else {
          return "LoZ-cX-WQ0.text"
        }

        return NSLocalizedString("LoZ-cX-WQ0.text", tableName: "TextRecord", bundle: bundle, comment: "")
      }

      /// en translation: Given Name
      ///
      /// Locales: en, nl
      static func k5ZTbErDNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("K5Z-tb-ErD.normalTitle", tableName: "TextRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TextRecord", preferredLanguages: preferredLanguages) else {
          return "K5Z-tb-ErD.normalTitle"
        }

        return NSLocalizedString("K5Z-tb-ErD.normalTitle", tableName: "TextRecord", bundle: bundle, comment: "")
      }

      /// en translation: New Record
      ///
      /// Locales: en, nl
      static func ckKUMWBText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2ck-KU-mWB.text", tableName: "TextRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TextRecord", preferredLanguages: preferredLanguages) else {
          return "2ck-KU-mWB.text"
        }

        return NSLocalizedString("2ck-KU-mWB.text", tableName: "TextRecord", bundle: bundle, comment: "")
      }

      /// en translation: Personal
      ///
      /// Locales: en, nl
      static func up1wBOcNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5Up-1w-BOc.normalTitle", tableName: "TextRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TextRecord", preferredLanguages: preferredLanguages) else {
          return "5Up-1w-BOc.normalTitle"
        }

        return NSLocalizedString("5Up-1w-BOc.normalTitle", tableName: "TextRecord", bundle: bundle, comment: "")
      }

      /// en translation: SUBMIT
      ///
      /// Locales: en, nl
      static func h8KWtMAVNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("H8K-Wt-MAV.normalTitle", tableName: "TextRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TextRecord", preferredLanguages: preferredLanguages) else {
          return "H8K-Wt-MAV.normalTitle"
        }

        return NSLocalizedString("H8K-Wt-MAV.normalTitle", tableName: "TextRecord", bundle: bundle, comment: "")
      }

      /// en translation: Text
      ///
      /// Locales: en, nl
      static func bOlHBLCpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bOl-hB-lCp.text", tableName: "TextRecord", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "TextRecord", preferredLanguages: preferredLanguages) else {
          return "bOl-hB-lCp.text"
        }

        return NSLocalizedString("bOl-hB-lCp.text", tableName: "TextRecord", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AppLocker.validate()
      try _BottomQrWithPinViewController.validate()
      try _OrganizationTableViewCell.validate()
      try _OrganizationValidatorTableViewCell.validate()
      try _OrganizationValidatorViewController.validate()
      try _PullUpQRViewController.validate()
      try _SendEtherViewController.validate()
      try _SuccessSendingViewController.validate()
    }

    struct _AllowedOrganizationsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AllowedOrganizationsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _AppLocker: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AppLocker"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AppLocker? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppLocker
      }

      static func validate() throws {
        if UIKit.UIImage(named: "backspaceBlue.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backspaceBlue.png' is used in nib 'AppLocker', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _BottomQrWithPinViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BottomQrWithPinViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "closeBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeBlack' is used in nib 'BottomQrWithPinViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageView:Vdb-YF-cMS:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:Vdb-YF-cMS:image' is used in nib 'BottomQrWithPinViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrImage2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrImage2' is used in nib 'BottomQrWithPinViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ConfirmPaymentPopUp: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ConfirmPaymentPopUp"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _OrganizationTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OrganizationTableViewCell

      let bundle = R.hostingBundle
      let identifier = "OrganizationTableViewCell"
      let name = "OrganizationTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrganizationTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrganizationTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Resting", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Resting' is used in nib 'OrganizationTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OrganizationValidatorTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OrganizationValidatorTableViewCell

      let bundle = R.hostingBundle
      let identifier = "OrganizationValidatorTableViewCell"
      let name = "OrganizationValidatorTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrganizationValidatorTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrganizationValidatorTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "logo_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_icon' is used in nib 'OrganizationValidatorTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OrganizationValidatorViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrganizationValidatorViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "closeIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeIcon' is used in nib 'OrganizationValidatorViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PullUpQRViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PullUpQRViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "closeIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeIcon' is used in nib 'PullUpQRViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageView:uGu-yz-Ntp:image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:uGu-yz-Ntp:image' is used in nib 'PullUpQRViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrImage2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrImage2' is used in nib 'PullUpQRViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SendEtherViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SendEtherViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'camera' is used in nib 'SendEtherViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SuccessSendingViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SuccessSendingViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "tick", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tick' is used in nib 'SuccessSendingViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try chooseTypeRecord.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try payment.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profile.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try recordDetail.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try recordValidators.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try textRecord.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct chooseTypeRecord: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ChooseTypeRecord"
      let types = StoryboardViewControllerResource<MChooseTypeRecordViewController>(identifier: "types")
      let walk = StoryboardViewControllerResource<BWWalkthrough.BWWalkthroughViewController>(identifier: "walk")

      func types(_: Void = ()) -> MChooseTypeRecordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: types)
      }

      func walk(_: Void = ()) -> BWWalkthrough.BWWalkthroughViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walk)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "rounded", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rounded' is used in storyboard 'ChooseTypeRecord', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.chooseTypeRecord().types() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'types' could not be loaded from storyboard 'ChooseTypeRecord' as 'MChooseTypeRecordViewController'.") }
        if _R.storyboard.chooseTypeRecord().walk() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walk' could not be loaded from storyboard 'ChooseTypeRecord' as 'BWWalkthrough.BWWalkthroughViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct payment: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MPaymentViewController

      let bundle = R.hostingBundle
      let content = StoryboardViewControllerResource<MPaymentViewController>(identifier: "content")
      let name = "Payment"

      func content(_: Void = ()) -> MPaymentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: content)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow_right_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow_right_icon' is used in storyboard 'Payment', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'Payment', but couldn't be loaded.") }
        if UIKit.UIImage(named: "face_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'face_icon' is used in storyboard 'Payment', but couldn't be loaded.") }
        if UIKit.UIImage(named: "qrV", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'qrV' is used in storyboard 'Payment', but couldn't be loaded.") }
        if UIKit.UIImage(named: "voucher_ticket_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'voucher_ticket_icon' is used in storyboard 'Payment', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.payment().content() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'content' could not be loaded from storyboard 'Payment' as 'MPaymentViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profile: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MProfileViewController

      let bundle = R.hostingBundle
      let content = StoryboardViewControllerResource<MProfileViewController>(identifier: "content")
      let name = "Profile"

      func content(_: Void = ()) -> MProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: content)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "closeBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeBlack' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_launcher_APP", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_launcher_APP' is used in storyboard 'Profile', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.profile().content() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'content' could not be loaded from storyboard 'Profile' as 'MProfileViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct recordDetail: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MRecordDetailViewController

      let bundle = R.hostingBundle
      let content = StoryboardViewControllerResource<MRecordDetailViewController>(identifier: "content")
      let name = "RecordDetail"

      func content(_: Void = ()) -> MRecordDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: content)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'RecordDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "delete24Px", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'delete24Px' is used in storyboard 'RecordDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_launcher_APP", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_launcher_APP' is used in storyboard 'RecordDetail', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.recordDetail().content() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'content' could not be loaded from storyboard 'RecordDetail' as 'MRecordDetailViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct recordValidators: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MRecordValidatorsViewController

      let bundle = R.hostingBundle
      let name = "RecordValidators"
      let validators = StoryboardViewControllerResource<MRecordValidatorsViewController>(identifier: "validators")

      func validators(_: Void = ()) -> MRecordValidatorsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: validators)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back' is used in storyboard 'RecordValidators', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_launcher_APP", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_launcher_APP' is used in storyboard 'RecordValidators', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconPersonal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconPersonal' is used in storyboard 'RecordValidators', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.recordValidators().validators() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'validators' could not be loaded from storyboard 'RecordValidators' as 'MRecordValidatorsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct textRecord: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TextRecord"
      let text = StoryboardViewControllerResource<MTextRecordViewController>(identifier: "text")

      func text(_: Void = ()) -> MTextRecordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: text)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "closeIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeIcon' is used in storyboard 'TextRecord', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.textRecord().text() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'text' could not be loaded from storyboard 'TextRecord' as 'MTextRecordViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
